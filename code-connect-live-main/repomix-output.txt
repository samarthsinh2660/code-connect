This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-28T09:04:57.416Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  file.svg
  globe.svg
  google.svg
  linkedin.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    _not-found/
      page.tsx
    dotgrid/
      page.tsx
    editor/
      [roomid]/
        page.tsx
    sso-callback/
      page.tsx
    globals.css
    landing.tsx
    layout.tsx
    not-found.tsx
    page.tsx
  components/
    Auth/
      AuthDialog.tsx
    Dashboard/
      animations/
        AnimatedBackground.tsx
        NeonGlow.tsx
        ParallaxScroll.tsx
        RevealAnimation.tsx
        WaveLoader.tsx
      buttons/
        FuturisticInput.tsx
        GlowingButton.tsx
        OTPInput.tsx
      cards/
        FeatureCard.tsx
        HoverCard.tsx
        MoreUseCases.tsx
        RoadmapItem.tsx
        StatsCard.tsx
        WhyCodeConnect.tsx
      Cursor.tsx
      Decorative.tsx
      FaqSection.tsx
      Header.tsx
      LoadinAnimation.tsx
      LoadingScreen.tsx
      ScrollToTop.tsx
      Slider.tsx
      UserProfile.tsx
    Editor/
      AiAssistant.tsx
      Chat.tsx
      Client.tsx
      ConsoleOutput.tsx
      MessageBubble.tsx
      monaco-editor.tsx
      TypingIndicator.tsx
    ui/
      accordion.tsx
      avatar.tsx
      badge.tsx
      button.tsx
      card.tsx
      dialog.tsx
      dropdown-menu.tsx
      input.tsx
      placeholders-and-vanish-input.tsx
      scroll-area.tsx
      select.tsx
      skeleton.tsx
      slider.tsx
      switch.tsx
      tabs.tsx
      tooltip.tsx
    onedarkpro.json
  lib/
    actions.ts
    languageConfig.ts
    socket.ts
    utils.ts
  providers/
    socketProvider.tsx
  types/
    env.d.ts
  middleware.ts
.gitignore
components.json
next.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/google.svg
================
<svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 48 48" width="48px" height="48px"><path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"/><path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"/><path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"/><path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"/></svg>

================
File: public/linkedin.svg
================
<svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 48 48" width="48px" height="48px"><path fill="#0288D1" d="M42,37c0,2.762-2.238,5-5,5H11c-2.761,0-5-2.238-5-5V11c0-2.762,2.239-5,5-5h26c2.762,0,5,2.238,5,5V37z"/><path fill="#FFF" d="M12 19H17V36H12zM14.485 17h-.028C12.965 17 12 15.888 12 14.499 12 13.08 12.995 12 14.514 12c1.521 0 2.458 1.08 2.486 2.499C17 15.887 16.035 17 14.485 17zM36 36h-5v-9.099c0-2.198-1.225-3.698-3.192-3.698-1.501 0-2.313 1.012-2.707 1.99C24.957 25.543 25 26.511 25 27v9h-5V19h5v2.616C25.721 20.5 26.85 19 29.738 19c3.578 0 6.261 2.25 6.261 7.274L36 36 36 36z"/></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/_not-found/page.tsx
================
"use client"
import { Suspense } from 'react'
import { useSearchParams } from 'next/navigation'
import { motion } from "framer-motion";
import Link from "next/link";

function NotFoundContent() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gradient-to-r from-gray-900 to-black text-white">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="text-center"
      >
        <motion.h1
          className="text-6xl font-bold text-gray-100"
          initial={{ scale: 0.8 }}
          animate={{ scale: 1 }}
          transition={{ duration: 0.4 }}
        >
          404
        </motion.h1>
        <p className="mt-4 text-xl text-gray-400">Oops! Page Not Found.</p>

        <motion.div
          className="mt-6"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.6 }}
        >
          <Link href="/">
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              className="px-6 py-3 rounded-lg bg-blue-600 hover:bg-blue-500 text-white font-medium transition-all duration-300 shadow-lg"
            >
              Return Home
            </motion.button>
          </Link>
        </motion.div>
      </motion.div>
    </div>
  );
}


export default function NotFound() {
  return (
    <Suspense fallback={<div></div>}>
      <NotFoundContent />
    </Suspense>
  )
}

================
File: src/app/dotgrid/page.tsx
================
"use client";
import React from "react";

const DotBackgroundDemo = () => {
  return (
    <div className="h-[50rem] w-full dark:bg-black bg-white  dark:bg-grid-white/[0.2] bg-grid-black/[0.2] relative flex items-center justify-center">
    {/* Radial gradient for the container to give a faded look */}
    <div className="absolute pointer-events-none inset-0 flex items-center justify-center dark:bg-black bg-white [mask-image:radial-gradient(ellipse_at_center,transparent_20%,black)]"></div>
    <p className="text-4xl sm:text-7xl font-bold relative z-20 bg-clip-text text-transparent bg-gradient-to-b from-neutral-200 to-neutral-500 py-8">
      Backgrounds
    </p>
  </div>
  );
};

export default DotBackgroundDemo;

================
File: src/app/editor/[roomid]/page.tsx
================
"use client"
import { useState, useRef, useEffect, useMemo, Suspense } from "react"
import { motion, AnimatePresence, useAnimation } from "framer-motion"
import { toast, Toaster } from "sonner"
import { useParams, useSearchParams } from "next/navigation"
import { ACTIONS } from "@/lib/actions"
import {
  LogOut,
  Play,
  ChevronRight,
  ChevronLeft,
  Maximize,
  Minimize,
  SunMoon,
  Moon,
  Settings,
  Save,
  Download,
  Share,
  Upload,
  Terminal,
  Bot,
  Sparkles,
  MessageSquare,
} from "lucide-react"
import { useSocket } from "@/providers/socketProvider"
import dynamic from "next/dynamic"
const Button = dynamic(
  () => import("@/components/ui/button").then((mod) => mod.Button)
);
const Slider = dynamic(
  () => import("@/components/ui/slider").then((mod) => mod.Slider)
);
const Select = dynamic(
  () => import("@/components/ui/select").then((mod) => mod.Select)
);
const SelectTrigger = dynamic(
  () => import("@/components/ui/select").then((mod) => mod.SelectTrigger)
);
const SelectValue = dynamic(
  () => import("@/components/ui/select").then((mod) => mod.SelectValue)
);
const SelectContent = dynamic(
  () => import("@/components/ui/select").then((mod) => mod.SelectContent)
);
const SelectItem = dynamic(
  () => import("@/components/ui/select").then((mod) => mod.SelectItem)
);
const ScrollArea = dynamic(
  () =>
    import("@/components/ui/scroll-area").then((mod) => mod.ScrollArea)
);
const Dialog = dynamic(
  () => import("@/components/ui/dialog").then((mod) => mod.Dialog)
);
const DialogContent = dynamic(
  () =>
    import("@/components/ui/dialog").then((mod) => mod.DialogContent)
);
const DialogHeader = dynamic(
  () =>
    import("@/components/ui/dialog").then((mod) => mod.DialogHeader)
);
const DialogTitle = dynamic(
  () =>
    import("@/components/ui/dialog").then((mod) => mod.DialogTitle)
);
const DialogDescription = dynamic(
  () =>
    import("@/components/ui/dialog").then((mod) => mod.DialogDescription)
);
const Input = dynamic(
  () => import("@/components/ui/input").then((mod) => mod.Input)
);
const Client = dynamic(
  () => import("@/components/Editor/Client").then((mod) => mod.Client),
  { ssr: false }
);
const Chat = dynamic(
  () => import("@/components/Editor/Chat").then((mod) => mod.Chat),
  { ssr: false }
);
const Skeleton = dynamic(
  () => import("@/components/ui/skeleton").then((mod) => mod.Skeleton)
);
const ConsoleOutput = dynamic(
  () =>
    import("@/components/Editor/ConsoleOutput").then((mod) => mod.default),
  { ssr: false }
);
const AiAssistant = dynamic(
  () =>
    import("@/components/Editor/AiAssistant").then((mod) => mod.default),
  { ssr: false }
);
const WaveLoader = dynamic(
  () =>
    import("@/components/Dashboard/animations/WaveLoader").then((mod) => mod.default),
  { ssr: false }
);
const MonacoEditor = dynamic(() => import("@/components/Editor/monaco-editor"), {
  ssr: false,
  loading: () => <div>Loading...</div>
});

function EditorPageContent() {
  // Socket and Client State
  const socketRef = useRef<any>(null)
  const [clients, setClients] = useState<{ socketId: string; username: string }[]>([])
  const params = useParams()
  const searchParams = useSearchParams()
  const roomId = params?.roomid
  const [isFullscreen, setIsFullscreen] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [isSocketConnected, setIsSocketConnected] = useState(false)
  const [connectionStatus, setConnectionStatus] = useState<"connecting" | "connected" | "failed">("connecting")
  const username = searchParams.get("username")
  const [typingUser, setTypingUser] = useState<string | null>(null)
  const [consoleHeight, setConsoleHeight] = useState(150)
  const typingTimeoutRef = useRef<{ [key: string]: NodeJS.Timeout }>({})
  const [isConsoleOpen, setIsConsoleOpen] = useState(true);
  const [showConnectingSplash, setShowConnectingSplash] = useState(true);
  const [isAiPanelOpen, setIsAiPanelOpen] = useState(false);
  const [isChatOpen, setIsChatOpen] = useState(true);


  // Editor State
  const [fontSize, setFontSize] = useState(14)
  const [language, setLanguage] = useState("javascript")
  const [theme, setTheme] = useState("vs-dark")

  // UI State
  const [isSidebarOpen, setIsSidebarOpen] = useState(true)
  const [isOutputPanelOpen, setIsOutputPanelOpen] = useState(true)
  const [isDarkMode, setIsDarkMode] = useState(true)
  const [activeTab, setActiveTab] = useState("code")
  const [isSettingsOpen, setIsSettingsOpen] = useState(false)
  const [isPageLoaded, setIsPageLoaded] = useState(false)
  const [isShareDialogOpen, setIsShareDialogOpen] = useState(false)
  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false)

  // Refs
  const editorRef = useRef<any>(null)
  const outputRef = useRef(null)
  const controls = useAnimation()
  const [code, setCode] =
    useState(`//Start Coding Here...
  // Function to print a pyramid pattern
  function printPyramid(height) {
      let pattern = '';
      
      // Loop through each row
      for (let i = 1; i <= height; i++) {
          // Add spaces before stars
          let spaces = ' '.repeat(height - i);
          
          // Add stars for this row
          let stars = '*'.repeat(2 * i - 1);
          
          // Combine spaces and stars for this row
          pattern += spaces + stars + '\\n';
      }
      
      return pattern;
  }
  console.log(printPyramid(5));`);

  const [typingUsers, setTypingUsers] = useState(new Set())
  const [output, setOutput] = useState("")
  const [consoleOutput, setConsoleOutput] = useState<Array<{ type: "log" | "error" | "info"; content: string }>>([])
  const lastTypingEventRef = useRef<number>(0)
  const TYPING_INTERVAL = 1000 // Minimum time between typing events in ms
  const { socket, isConnected } = useSocket()

  useEffect(() => {
    const timer = setTimeout(() => {
      setShowConnectingSplash(false);
    }, 2000); // 2 seconds

    return () => clearTimeout(timer);
  }, []);

  // Memoized variants
  const pageVariants = useMemo(
    () => ({
      hidden: { opacity: 0, scale: 0.9 },
      visible: {
        opacity: 1,
        scale: 1,
        transition: {
          duration: 0.5,
          ease: "easeOut",
          staggerChildren: 0.1,
        },
      },
    }),
    [],
  )

  const itemVariants = useMemo(
    () => ({
      hidden: { y: 20, opacity: 0 },
      visible: {
        y: 0,
        opacity: 1,
        transition: { duration: 0.5, ease: "easeOut" },
      },
    }),
    [],
  )

  // Effects
  useEffect(() => {
    // Trigger initial animation when the page loads
    setIsPageLoaded(true)
    controls.start("visible")
  }, [controls])

  useEffect(() => {
    if (!socket || !isConnected) return

    if (!username || !roomId) {
      toast.error("Missing room ID or username")
      window.location.href = "/"
      return
    }

    console.log("Joining room with:", { roomId, username: username })

    socket.emit(ACTIONS.JOIN, {
      id: roomId,
      user: username,
    })

    // Handle join response
    socket.on(ACTIONS.JOINED, ({ clients, user, socketId }) => {
      console.log("JOINED event received:", { clients, user, socketId })
      toast.success(`${user} joined the room`)
      setClients(clients)
      setConnectionStatus("connected")
      setIsLoading(false)
    })

    socket.on(ACTIONS.DISCONNECTED, ({ socketId, user, clients: updatedClients }) => {
      console.log("DISCONNECTED event received:", { socketId, user, clients: updatedClients })
      setClients(updatedClients)
      toast.info(`${user} left the room`)
    })

    const handleBeforeUnload = () => {
      if (socket && roomId) {
        socket.emit(ACTIONS.LEAVE, { roomId })
      }
    }

    window.addEventListener("beforeunload", handleBeforeUnload)

    socket.on(ACTIONS.CODE_CHANGE, ({ code }) => {
      setCode(code)
    })

    socket.on(ACTIONS.SYNC_CODE, ({ code }) => {
      setCode(code)
    })

    socket.on(ACTIONS.COMPILE_RESULT, ({ result, error }) => {
      if (error) {
        setOutput(error)
        setConsoleOutput((prev) => [...prev, { type: "error", content: error }])
      } else {
        setOutput(result)
        setConsoleOutput((prev) => [...prev, { type: "log", content: result }])
      }
    })

    socket.on("error", handleSocketError)

    return () => {
      socket.off(ACTIONS.JOINED)
      socket.off(ACTIONS.DISCONNECTED)
      socket.off(ACTIONS.CODE_CHANGE)
      socket.off(ACTIONS.SYNC_CODE)
      handleBeforeUnload()
      window.removeEventListener("beforeunload", handleBeforeUnload)
      socket.off(ACTIONS.COMPILE_RESULT)
      socket.off("error")
    }
  }, [socket, isConnected, roomId, username])

  useEffect(() => {
    if (!socket || !isConnected) return

    // Handle typing events
    const handleTyping = ({ username }: { username: string }) => {
      setTypingUsers((prev) => {
        const newSet = new Set(prev)
        newSet.add(username)
        return newSet
      })

      // Clear existing timeout for this user if it exists
      if (typingTimeoutRef.current[username]) {
        clearTimeout(typingTimeoutRef.current[username])
      }

      // Set new timeout
      typingTimeoutRef.current[username] = setTimeout(() => {
        setTypingUsers((prev) => {
          const newSet = new Set(prev)
          newSet.delete(username)
          return newSet
        })
        delete typingTimeoutRef.current[username]
      }, 1500) // Slightly longer than the server timeout
    }

    const handleStopTyping = ({ username }: { username: string }) => {
      // Clear timeout if it exists
      if (typingTimeoutRef.current[username]) {
        clearTimeout(typingTimeoutRef.current[username])
        delete typingTimeoutRef.current[username]
      }

      setTypingUsers((prev) => {
        const newSet = new Set(prev)
        newSet.delete(username)
        return newSet
      })
    }

    socket.on(ACTIONS.TYPING, handleTyping)
    socket.on(ACTIONS.STOP_TYPING, handleStopTyping)

    // Cleanup
    return () => {
      socket.off(ACTIONS.TYPING)
      socket.off(ACTIONS.STOP_TYPING)
      // Clear all typing timeouts
      Object.values(typingTimeoutRef.current).forEach(clearTimeout)
      typingTimeoutRef.current = {}
    }
  }, [socket, isConnected])

  // Handlers
  const clearConsole = () => setConsoleOutput([])

  const handleCodeChange = (value: string) => {
    setCode(value)
    socket?.emit(ACTIONS.CODE_CHANGE, { roomId, code: value })

    if (!username) return

    // Clear any existing typing timeout
    if (typingTimeoutRef.current) {
      Object.values(typingTimeoutRef.current).forEach(clearTimeout)
    }

    // Always emit typing event for the current user
    socket?.emit(ACTIONS.TYPING, {
      roomId,
      username,
    })

    // Set timeout to clear typing status
    if (!username) return
    typingTimeoutRef.current[username] = setTimeout(() => {
      socket?.emit(ACTIONS.STOP_TYPING, {
        roomId,
        username,
      })
    }, 1000)
  }

  const handleRunCode = () => {
    try {
      socket?.emit(ACTIONS.COMPILE, { roomId, code, language })
    } catch (err: any) {
      setOutput(`Error: ${err.message}`)
    }
  }

  const handleSocketError = (err: any) => {
    console.error("Socket error:", err)
    toast.error(err.message || "Failed to connect to server. Please try again.")
  }

  const copyRoomId = async () => {
    try {
      await navigator.clipboard.writeText(roomId as string)
      toast.success("Room ID copied to clipboard")
    } catch (err: any) {
      toast.error("Failed to copy room ID")
    }
  }

  const leaveRoom = () => {
    setIsLeaveDialogOpen(true)
  }

  const confirmLeaveRoom = () => {
    try {
      if (socket) {
        socket.emit(ACTIONS.LEAVE, { roomId })
        socket.disconnect()
      }
      window.location.href = "/"
    } catch (error) {
      console.error("Error leaving room:", error)
      toast.error("Failed to leave room")
    }
  }

  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen()
      setIsFullscreen(true)
    } else {
      if (document.exitFullscreen) {
        document.exitFullscreen()
        setIsFullscreen(false)
      }
    }
  }

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
    setTheme(isDarkMode ? "vs-light" : "vs-dark");

    // Update monaco editor theme
    if (editorRef.current) {
      editorRef.current.updateOptions({
        theme: isDarkMode ? "vs-light" : "vs-dark"
      });
    }

    // Update document theme class for Tailwind
    document.documentElement.classList.toggle("dark");
  };

  const toggleSettings = () => {
    setIsSettingsOpen(!isSettingsOpen)
  }

  // Render functions
  const renderSkeleton = () => (
    <div className="flex flex-col space-y-4 animate-pulse">
      <Skeleton className="h-12 w-full" />
      <div className="flex space-x-4">
        <Skeleton className="h-8 w-24" />
        <Skeleton className="h-8 w-24" />
      </div>
      <Skeleton className="h-64 w-full" />
      <div className="flex space-x-4">
        <Skeleton className="h-8 w-1/3" />
        <Skeleton className="h-8 w-1/3" />
        <Skeleton className="h-8 w-1/3" />
      </div>
    </div>
  )

  if (showConnectingSplash) {
    return (
      <div className="flex h-screen w-full  overflow-hidden items-center justify-center bg-black/100">
        <motion.div
          className="flex flex-col items-center space-y-8 p-12 backdrop-blur-lg rounded-3xl shadow-2xl"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, ease: "easeOut" }}
          variants={pageVariants}
        >
          <motion.h2
            className="text-4xl font-bold text-white text-center"
            initial={{ y: -20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.2, duration: 0.5 }}
          >
            Connecting to session
          </motion.h2>
          <div className="relative w-40 h-40">
            <WaveLoader />
          </div>
          <motion.div
            className="text-blue-300 text-lg"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.5 }}
          >
            Please wait...
          </motion.div>
        </motion.div>
      </div>
    );
  }

  if (connectionStatus === "connecting") {
    return (
      <div className="flex min-h-screen items-center justify-center bg-gradient-to-br from-gray-900 to-gray-800">
        <motion.div
          className="flex flex-col items-center space-y-4"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <div className="text-2xl font-bold text-white">Connecting to session...</div>
          <motion.div
            className="w-20 h-20 border-4 border-blue-500 border-t-transparent rounded-full"
            animate={{ rotate: 360 }}
            transition={{ duration: 1, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
          />
        </motion.div>
      </div>
    )
  }

  if (connectionStatus === "failed") {
    return (
      <div className="flex min-h-screen items-center justify-center bg-gradient-to-br from-gray-900 to-gray-800">
        <motion.div
          className="flex flex-col items-center space-y-6 text-white"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
        >
          <div className="text-3xl font-bold">Failed to connect to session</div>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => window.location.reload()}
            className="px-6 py-3 bg-blue-600 rounded-lg text-lg font-semibold hover:bg-blue-700 transition-colors"
          >
            Retry Connection
          </motion.button>
        </motion.div>
      </div>
    )
  }

  return (
    <motion.div
      className={`h-screen w-full overflow-hidden flex ${isDarkMode ? "bg-gray-900 text-white" : "bg-gray-100  text-black"
        }`}
      initial="hidden"
      animate={isPageLoaded ? "visible" : "hidden"}
      variants={pageVariants}
    >
      {/* Sidebar */}
      <AnimatePresence>
        {isSidebarOpen && (
          <motion.div
            variants={itemVariants}
            initial="hidden"
            animate="visible"
            exit="hidden"
            className={`w-80 
              bg-gradient-to-b from-gray-800 to-gray-900 border-gray-700 text-black
              border-r flex flex-col`}
          >
            {/* Connected Users */}
            <ScrollArea className="flex-1 p-4">
              <motion.h2
                variants={itemVariants}
                className={`text-sm justify-center items-center text-center mx-auto font-semibold uppercase mb-4 ${isDarkMode
                  ? "text-gray-400"
                  : "text-gray-600"
                  }`}
              >                <span className="bg-gradient-to-r from-cyan-300 to-blue-400 text-transparent bg-clip-text">Connected</span> <span className="text-gray-400 lowercase">({clients.length} users)</span>
              </motion.h2>
              <motion.div className="max-h-[calc(100vh-200px)] overflow-y-auto space-y-3" variants={itemVariants}>
                {clients.map((client) => (
                  <motion.div key={client.socketId} variants={itemVariants}>
                    <Client
                      user={client.username}
                      isActive={client.socketId === socket?.id}
                      isTyping={typingUsers.has(client.username)}
                      lastActive={new Date().toISOString()}
                      messageCount={0}
                      mood={null}
                    />
                  </motion.div>
                ))}
              </motion.div>
            </ScrollArea>

            {/* Room Controls */}
            
<motion.div 
  className="p-4 border-t border-gray-700 space-y-3"
  initial={{ opacity: 0 }}
  animate={{ opacity: 1 }}
  transition={{ duration: 0.4 }}
>
  <motion.div
    className="rounded-lg bg-gradient-to-br from-gray-100 to-gray-300 p-0.5 shadow-lg"
    whileHover={{ boxShadow: "0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)" }}
    transition={{ duration: 0.2 }}
  >
    <Button 
      data-color="white" 
      variant="secondary" 
      className="bg-gradient-to-br from-white to-gray-100 text-black w-full h-10 rounded-lg border-none relative overflow-hidden shadow-inner"
      onClick={() => setIsShareDialogOpen(true)}
    >
      <motion.div 
        className="absolute inset-0 bg-gradient-to-r from-blue-50 via-white to-blue-50 opacity-0"
        initial={{ opacity: 0 }}
        whileHover={{ opacity: 1 }}
        transition={{ duration: 0.3 }}
      />
      
      <motion.div 
        className="flex items-center justify-center relative z-10"
        initial={{ gap: "0.5rem" }}
        whileHover={{ gap: "0.75rem" }}
        transition={{ duration: 0.2 }}
      >
        <motion.div
          whileHover={{ rotate: 180 }}
          transition={{ duration: 0.6, ease: "circOut" }}
        >
          <Share className="h-5 w-5" />
        </motion.div>
        <span className="font-medium">Share Room</span>
      </motion.div>
    </Button>
  </motion.div>

  <motion.div
    className="rounded-lg bg-gradient-to-br from-red-500 to-red-600 p-0.5 shadow-lg"
    whileHover={{ 
      boxShadow: "0 10px 25px -5px rgba(239, 68, 68, 0.4), 0 10px 10px -5px rgba(239, 68, 68, 0.1)",
    }}
    transition={{ duration: 0.2 }}
  >
    <Button 
      data-color="red" 
      variant="destructive" 
      className="bg-gradient-to-br from-red-500 to-red-600 w-full h-10 rounded-lg border-none relative overflow-hidden shadow-inner"
      onClick={leaveRoom}
    >
      <motion.div 
        className="absolute inset-0 bg-gradient-to-r from-red-600 to-red-500"
        animate={{ 
          x: ["-100%", "100%"],
        }}
        transition={{ 
          repeat: Infinity, 
          repeatType: "mirror", 
          duration: 2,
          ease: "linear"
        }}
        style={{ opacity: 0.2 }}
      />
      
      <motion.div className="flex items-center justify-center relative z-10">
        <motion.div
          whileHover={{ x: 5 }}
          transition={{ repeat: Infinity, repeatType: "mirror", duration: 0.5 }}
        >
          <LogOut className="h-5 w-5 mr-2" />
        </motion.div>
        <span className="font-medium">Leave Room</span>
      </motion.div>
    </Button>
  </motion.div>
</motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Editor Section */}
      <motion.div className="flex-1 h-full flex flex-col overflow-hidden" variants={itemVariants}>
        {/* Editor Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{
            type: "spring",
            stiffness: 200,
            damping: 15,
            duration: 0.5
          }}
          className={`${isDarkMode
            ? "bg-gray-800 border-gray-700"
            : "bg-white border-gray-200"
            } border-b p-4 flex items-center justify-between`}
        >
          <div className="flex items-center space-x-4">
            <motion.div
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
            >
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setIsSidebarOpen(!isSidebarOpen)}
              >
                {isSidebarOpen ? <ChevronLeft className="h-5 w-5" /> : <ChevronRight className="h-5 w-5" />}
              </Button>
            </motion.div>

            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              initial={{ backgroundColor: "transparent" }}
              animate={{
                backgroundColor: isSidebarOpen ? "rgba(22, 163, 74, 0.2)" : "transparent"
              }}
              transition={{ duration: 0.3 }}
              className="rounded-md text-white"
            >
              <Button
                variant="default"
                className="bg-green-600 text-white hover:bg-green-700 transition-colors duration-300"
                onClick={handleRunCode}
              >
                <Play className="h-5 w-5 mr-2" />
                Run Code
              </Button>
            </motion.div>

            <div className={`${isDarkMode ? "text-gray-400" : "text-gray-600"}`}>
              Language: {language}
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <Button
              variant="ghost"
              onClick={() => setIsAiPanelOpen(!isAiPanelOpen)}
              className="relative h-10 px-4 group"
            >
              <span className="flex items-center">
                <Bot className="h-5 w-5 mr-2 group-hover:text-blue-400 transition-colors" />
                Ask AI
              </span>
              <motion.div
                className="absolute -top-1 -right-1"
                animate={{
                  scale: [1, 1.2, 1],
                  opacity: [0.5, 1, 0.5]
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
              >
                <Sparkles className="h-3 w-3 text-blue-400" />
              </motion.div>
              <motion.div
                className="absolute left-0 bottom-0 w-full h-0.5 bg-blue-400"
                initial={{ scaleX: 0 }}
                animate={{ scaleX: isAiPanelOpen ? 1 : 0 }}
                transition={{ duration: 0.2 }}
              />
            </Button>

            <Button
              variant="ghost"
              onClick={() => setIsChatOpen(!isChatOpen)}
              className="relative h-10 px-4 group "
            >
              <span className="flex items-center">
                <MessageSquare className="h-5 w-5 mr-2 hover:bg-white group-hover:text-blue-400 transition-colors" />
                Chat
              </span>
              <motion.div
                className="absolute left-0 bottom-0 w-full h-0.5 bg-blue-400"
                initial={{ scaleX: 0 }}
                animate={{ scaleX: isChatOpen ? 1 : 0 }}
                transition={{ duration: 0.2 }}
              />
            </Button>
          </div>
          <div className="flex items-center space-x-2">
            {[
              {
                icon: isFullscreen ? <Minimize className="h-5 w-5" /> : <Maximize className="h-5 w-5" />,
                onClick: toggleFullscreen
              },
              {
                icon: isDarkMode ? <Moon className="h-5 w-5" /> : <SunMoon className="h-5 w-5" />,
                onClick: toggleDarkMode
              },
              {
                icon: <Settings className="h-5 w-5" />,
                onClick: toggleSettings
              }
            ].map((button, index) => (
              <motion.div
                key={index}
                whileHover={{ rotate: 0, scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
              >
                <Button variant="ghost" size="icon" onClick={button.onClick}>
                  {button.icon}
                </Button>
              </motion.div>
            ))}
          </div>
        </motion.div>
        {/* Editor and Output */}
        <motion.div className="flex-1 flex" variants={itemVariants}>
          {/* Code Editor */}
          <motion.div
            className="flex-1 flex flex-col overflow-hidden"
            variants={itemVariants}
          >
            <motion.div
              className="flex-1"
              ref={editorRef}
              style={{
                height: isConsoleOpen ? `calc(100vh - ${consoleHeight + 120}px)` : 'calc(100vh - 120px)',
                transition: 'height 0.3s ease'
              }}
            >
              {isLoading ? (
                renderSkeleton()
              ) : (
                <MonacoEditor
                  roomId={roomId as string}
                  language={language}
                  fontSize={fontSize}
                  value={code}
                  onChange={handleCodeChange}
                  theme={theme}
                />
              )}
            </motion.div>

            <ConsoleOutput
              isOpen={isConsoleOpen}
              onClose={() => setIsConsoleOpen(false)}
              consoleOutput={consoleOutput}
              onClear={clearConsole}
              height={consoleHeight}
              onHeightChange={setConsoleHeight}
              isSidebarOpen={isSidebarOpen}
              isDarkMode={isDarkMode}
            />
            {!isConsoleOpen && (
              <Button
                className="fixed bottom-4 right-4 bg-gray-800"
                onClick={() => setIsConsoleOpen(true)}
              >
                <Terminal className="w-4 h-4 mr-2" />
                Show Console
              </Button>
            )}
          </motion.div>


          <motion.div className="w-90 border-l max-h-full border-gray-700" variants={itemVariants}>
            <Chat
              roomId={roomId as string}
              username={username || ""}
              isOpen={isChatOpen}
              onToggle={() => setIsChatOpen(!isChatOpen)}
            />
          </motion.div>
          <AiAssistant
            isOpen={isAiPanelOpen}
            onToggle={() => setIsAiPanelOpen(!isAiPanelOpen)}
          />
        </motion.div>
      </motion.div>

      {/* Settings Panel */}
      <AnimatePresence>
        {isSettingsOpen && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 1 }}
            animate={{ opacity: 1, y: 1, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 1 }}
            transition={{ type: "spring", stiffness: 300, damping: 25 }}
            className={`absolute right-4 top-16 w-80 p-6 rounded-lg shadow-lg ${isDarkMode ? "bg-gray-800" : "bg-white"
              }`}
          >
            <h3 className="text-xl font-semibold mb-6">Settings</h3>
            <div className="space-y-6">
              <div>
                <label htmlFor="fontSize" className="block mb-2 text-sm font-medium">
                  Font Size: {fontSize}px
                </label>
                <Slider
                  id="fontSize"
                  min={10}
                  max={24}
                  step={1}
                  value={[fontSize]}
                  onValueChange={(value) => setFontSize(value[0])}
                />
              </div>
              <div>
                <label htmlFor="language" className="block mb-2 text-sm font-medium">
                  Language
                </label>
                <Select value={language} onValueChange={setLanguage}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a language" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="javascript">JavaScript</SelectItem>
                    <SelectItem value="python">Python</SelectItem>
                    <SelectItem value="java">Java</SelectItem>
                    <SelectItem value="cpp">C++</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <label htmlFor="theme" className="block mb-2 text-sm font-medium">
                  Theme
                </label>
                <Select value={theme} onValueChange={setTheme}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a theme" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="vs-dark">Dark</SelectItem>
                    {/* <SelectItem value="vs-light">Light</SelectItem> */}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {!isOutputPanelOpen && (
        <motion.button
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: 20 }}
          transition={{ duration: 0.3 }}
          className="fixed right-0 top-1/2 transform -translate-y-1/2 bg-primary text-primary-foreground p-2 rounded-l-md"
          onClick={() => setIsOutputPanelOpen(true)}
        >
          <ChevronLeft className="h-5 w-5" />
        </motion.button>
      )}

      {/* Share Dialog */}
      <Dialog open={isShareDialogOpen} onOpenChange={setIsShareDialogOpen}>
        <DialogContent
          className={`sm:max-w-[425px] bg-white border-gray-200 text-black`}>
            <DialogHeader>
            <DialogTitle>Share Room</DialogTitle>
            <DialogDescription>Copy the link below to invite others to this room.</DialogDescription>
          </DialogHeader>
          <div className="flex items-center space-x-2">
            <Input className="italic text-black bg-white" value={`${window.location.origin}/editor/${roomId}`} readOnly />
            <Button className="bg-black text-white hover:bg-gray-800" onClick={copyRoomId}>Copy Room</Button>
          </div>
          <div className="text-sm text-gray-500 mt-2">
            Room ID can be used to rejoin this session later.
          </div>
        </DialogContent>
      </Dialog>

      {/* Leave Room Dialog */}
      <Dialog open={isLeaveDialogOpen} onOpenChange={setIsLeaveDialogOpen}>
        <DialogContent 
        className={`sm:max-w-[425px] bg-white border-gray-200 text-black`}        >
          <DialogHeader>
            <DialogTitle>Leave Room</DialogTitle>
            <DialogDescription>Are you sure you want to leave this room?</DialogDescription>
          </DialogHeader>
          <div className="flex justify-end space-x-2">
            <Button variant="outline" className="bg-black text-white" onClick={() => setIsLeaveDialogOpen(false)}>
              Cancel
            </Button>
            <Button variant="destructive" className="bg-red-500 hover:bg-red-600 text-white" onClick={confirmLeaveRoom}>
              Leave
            </Button>
          </div>
        </DialogContent>
      </Dialog>
      <Toaster />
    </motion.div>
  )
}

export default function EditorPage() {
  return (
    <Suspense fallback={<div></div>}>
      <EditorPageContent />
    </Suspense>
  )
}

================
File: src/app/sso-callback/page.tsx
================
"use client";
import { useEffect } from "react";
import { useClerk } from "@clerk/nextjs";
import { useRouter } from "next/navigation";

export default function SSOCallback() {
  const { handleRedirectCallback } = useClerk();
  const router = useRouter();

  useEffect(() => {
    async function processOAuthCallback() {
      try {
        await handleRedirectCallback({
          redirectUrl: window.location.origin + "/sso-callback",
          afterSignInUrl: "/",
          afterSignUpUrl: "/"
        });
      } catch (error) {
        console.error("OAuth callback error:", error);
        router.push("/");
      }
    }
    processOAuthCallback();
  }, [handleRedirectCallback, router]);

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-900">
      <div className="w-16 h-16 border-4 border-t-blue-500 border-gray-700 rounded-full animate-spin mb-4" />
      <p className="text-gray-400 text-lg">Completing authentication...</p>
    </div>
  );
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

/* In your CSS or a global style */
.will-change-transform {
  transform: translateZ(0);
}

.debug-layout * {
  outline: 1px solid rgba(255, 0, 0, 0.2) !important;
}


@layer utilities {
  .scroll-section {
    @apply relative min-h-screen w-full;
  }
  
  .parallax-bg {
    @apply relative w-full h-full transform will-change-transform;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  
  body {
    @apply bg-background text-foreground;
  }
}

/* Add to your globals.css */

/* Smooth scroll container */
.smooth-scroll {
  @apply fixed inset-0 w-full;
  overflow: hidden;
  pointer-events: none;
}

/* Enable hardware acceleration */
.parallax-content {
  @apply relative w-full;
  transform: translateZ(0);
  will-change: transform;
}

/* Parallax sections */
.parallax-section {
  @apply relative overflow-hidden;
  transform-style: preserve-3d;
}

/* Different parallax speeds */
.parallax-slow {
  --parallax-speed: 0.3;
}

.parallax-medium {
  --parallax-speed: 0.5;
}

.parallax-fast {
  --parallax-speed: 0.7;
}

/* Depth layers */
.parallax-deep {
  transform: translateZ(-100px) scale(2);
}

.parallax-shallow {
  transform: translateZ(-50px) scale(1.5);
}

.parallax-surface {
  transform: translateZ(0) scale(1);
}

/* Premium visual effects */
.premium-blur {
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
}

.premium-shadow {
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
}

/* Smooth transition */
.smooth-transition {
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 500ms;
}

:root {
  /* Font size scale */
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.25rem;
  --font-size-2xl: 1.5rem;
  --font-size-3xl: 1.875rem;
  --font-size-4xl: 2.25rem;
  
  /* Line heights */
  --line-height-tight: 1.25;
  --line-height-normal: 1.5;
  --line-height-relaxed: 1.75;
  
  /* Font weights */
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;

  /* Letter spacing */
  --letter-spacing-tight: -0.025em;
  --letter-spacing-normal: 0;
  --letter-spacing-wide: 0.025em;
}



@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/app/landing.tsx
================
"use client";
import { useState, useRef, useEffect, lazy } from "react"
import { motion, AnimatePresence, useInView } from "framer-motion"
import { v4 as uuidV4 } from "uuid"
import { toast } from "sonner"
import {
  Sparkles,
  Code,
  Terminal,
  Zap,
  Globe,
  Users,
  Laptop,
  Server,
  GitBranch,
  Boxes,
} from "lucide-react"
import {
  FloatingHexagon,
  CodeBlock,
} from "@/components/Dashboard/Decorative"
import Header from "@/components/Dashboard/Header"
import { HoverCard } from "@/components/Dashboard/cards/HoverCard"
import { StatsCard } from "@/components/Dashboard/cards/StatsCard"
import { GlowingButton } from "@/components/Dashboard/buttons/GlowingButton"
import { FuturisticInput } from "@/components/Dashboard/buttons/FuturisticInput"
import dynamic from "next/dynamic"
import { Skeleton } from "@/components/ui/skeleton"
import DotBackgroundDemo from "./dotgrid/page";

const PremiumParallax = dynamic(
  () => import('@/components/Dashboard/animations/ParallaxScroll').then((mod) => mod.default),
);

const RevealAnimation = dynamic(
  () => import('@/components/Dashboard/animations/RevealAnimation').then((mod) => mod.RevealAnimation),
);

const LoadingScreen = dynamic(() => import('@/components/Dashboard/LoadingScreen'), {
  ssr: false,
  loading: () => <div></div>,
});

const EnhancedCursor = dynamic(
  () => import('@/components/Dashboard/Cursor').then((mod) => mod.default),
  { ssr: false }
);


const WhyCodeConnect = dynamic(
  () => import('@/components/Dashboard/cards/WhyCodeConnect'),
  {
    loading: () => (
      <div className="w-full h-96 animate-pulse bg-gray-800/50 rounded-xl">
        <Skeleton className="h-full w-full rounded-xl" />
      </div>
    ),
    ssr: true
  }
)

const CodeConnectSlider = lazy(() => import('@/components/Dashboard/Slider'));


const MoreUseCases = dynamic(
  () => import('@/components/Dashboard/cards/MoreUseCases'),
  {
    loading: () => (
      <div className="w-full h-64 animate-pulse bg-gray-800/50 rounded-xl">
        <Skeleton className="h-full w-full rounded-xl" />
      </div>
    ),
    ssr: true
  }
)

const AnimatedBackground = dynamic(
  () => import("@/components/Dashboard/animations/AnimatedBackground").then(mod => mod.AnimatedBackground),
  {
    ssr: false,
    loading: () => <div className="absolute inset-0 bg-gradient-to-b from-slate-900 to-slate-800" />
  }
);



const NeonGlow = dynamic(
  () => import('@/components/Dashboard/animations/NeonGlow').then(mod => mod.NeonGlow),
  {
    ssr: false,
    loading: () => null
  }
);

const FAQSection = dynamic(
  () => import('@/components/Dashboard/FaqSection'),
  {
    loading: () => (
      <div className="w-full h-96 animate-pulse bg-gray-800/50 rounded-xl">
        <Skeleton className="h-full w-full rounded-xl" />
      </div>
    ),
    ssr: true
  }
)

export default function CodeConnect() {
  const [roomId, setRoomId] = useState("")
  const [username, setUsername] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [pageLoading, setPageLoading] = useState(true) // Add this state
  const formRef = useRef(null)
  const isInView = useInView(formRef, { once: true })

  useEffect(() => {
    console.log("Mounted");
    return () => console.log("Unmounted");
  }, []);
  

  const handleJoin = async () => {
    if (!roomId || !username) {
      toast.error("Please enter both room ID and username")
      return
    }

    try {
      setIsLoading(true)
      const baseUrl = window.location.origin
      window.location.href = `${baseUrl}/editor/${roomId}?username=${encodeURIComponent(username)}`
    } catch (error) {
      console.error("Join error:", error)
      toast.error("Failed to join room")
      setIsLoading(false)
    }
  }

  const createNewRoom = (e: any) => {
    e.preventDefault()
    const id = uuidV4()
    setRoomId(id)
    navigator.clipboard.writeText(id).then(() => {
      toast.success("Created a new room", {
        description: "Room ID copied to clipboard!",
      })
    })
  }

  const handleInputKeyUp = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      handleJoin()
    }
  }



  return (
    <div className="overflow-hidden relative">
      <LoadingScreen />
      <EnhancedCursor />
      <PremiumParallax speed={0.2} friction={0.8} ease={0.2}>
   
        <div className="relative min-h-screen bg-gradient-to-b from-slate-900 via-slate-700 to-slate-800 text-white overflow-hidden">
          <div className="items-center justify-center text-center">
            <AnimatedBackground />
          </div>
          <NeonGlow />
          <div className="absolute inset-0 overflow-hidden">
            {[...Array(30)].map((_, i) => (
              <FloatingHexagon key={i} delay={i * 0.3} />
            ))}
          </div>

          <div className="z-10 relative">

            <RevealAnimation>
              <div className="container mx-auto px-4 py-8">
              
                <Header />
                <RevealAnimation
                  effect={["fade", "slide", "blur"]}
                  duration={0.8}
                  delay={0.2}
                >
                  <main className="z-10 flex flex-col lg:flex-row items-center justify-between gap-12">
                    <motion.div
                      className="lg:w-1/2"
                      initial={{ opacity: 0, x: -100 }}
                      animate={isInView ? { opacity: 1, x: 0 } : {}}
                      transition={{ duration: 0.8, ease: "easeOut" }}
                    >
                      <motion.h1
                        className="text-4xl lg:text-5xl font-bold mb-6 leading-tight"
                        variants={{
                          hidden: { opacity: 0, y: 50 },
                          visible: { opacity: 1, y: 0 },
                        }}
                        initial="hidden"
                        animate="visible"
                        transition={{ duration: 0.8, delay: 0.3 }}
                      >
                        Collaborate in Real-Time <br />
                        with{" "}
                        <motion.span
                          className="bg-gradient-to-r from-cyan-400 to-blue-500 text-transparent bg-clip-text"
                          animate={{
                            backgroundPosition: ["0%", "100%", "0%"],
                          }}
                          transition={{
                            duration: 10,
                            repeat: Number.POSITIVE_INFINITY,
                            repeatType: "reverse",
                          }}
                        >
                          CodeConnect
                        </motion.span>
                      </motion.h1>
                      <motion.p
                        className="text-xl text-slate-300 mb-8"
                        variants={{
                          hidden: { opacity: 0, y: 50 },
                          visible: { opacity: 1, y: 0 },
                        }}
                        initial="hidden"
                        animate="visible"
                        transition={{ duration: 0.8, delay: 0.4 }}
                      >
                        Join a room, share your code, and build amazing projects together. Experience seamless collaboration
                        like never before.
                      </motion.p>
                      <div className="grid grid-cols-2 gap-4 mb-8">
                        <StatsCard icon={Globe} title="Active Rooms" value="1,234" capacity="2k" />
                        <StatsCard icon={Users} title="Connected Devs" value="567" capacity="10k" />
                      </div>
                      <CodeBlock />
                    </motion.div>
                    <motion.div
                      ref={formRef}
                      className="lg:w-1/2 w-full max-w-md"
                      initial={{ opacity: 0, x: 100 }}
                      animate={isInView ? {
                        opacity: 1,
                        x: 0,
                      } : {}}
                      transition={{
                        duration: 1.2,
                        delay: 0.4,
                        ease: [0.22, 1, 0.36, 1]
                      }}
                    >
                      <motion.div
                        className="bg-slate-900/95 backdrop-blur-2xl rounded-2xl p-8 shadow-2xl "
                        whileHover={{
                          boxShadow: "0 0 50px 0 rgba(6, 182, 212, 0.3)",
                          scale: 1.02,
                          transition: {
                            duration: 0.4,
                            ease: "easeOut"
                          }
                        }}
                        initial={{ scale: 0.95, opacity: 0 }}
                        animate={{ scale: 1, opacity: 1 }}
                        transition={{
                          duration: 0.8,
                          delay: 0.6,
                          ease: [0.34, 1.56, 0.64, 1]
                        }}
                      >
                        <h2 className="text-2xl font-bold mb-6 text-center">Join a Room</h2>
                        <div className="space-y-6">
                          <FuturisticInput
                            label="Room ID"
                            id="room-id"
                            icon={Terminal}
                            value={roomId}
                            onChange={(e: any) => setRoomId(e.target.value)}
                            onKeyUp={handleInputKeyUp}
                            placeholder="Enter room ID"
                          />
                          <FuturisticInput
                            label="Username"
                            id="username"
                            icon={Users}
                            value={username}
                            onChange={(e: any) => setUsername(e.target.value)}
                            onKeyUp={handleInputKeyUp}
                            placeholder="Choose a username"
                          />
                          <GlowingButton
                            className="w-full"
                            onClick={async () => {
                              setIsLoading(true); // Set loading state immediately
                              await new Promise(resolve => setTimeout(resolve, 2000));
                              handleJoin();
                            }}
                            disabled={isLoading}
                          >
                            <AnimatePresence mode="wait">
                              {isLoading ? (
                                <motion.div
                                  key="loading"
                                  className="flex items-center justify-center"
                                  initial={{ opacity: 0, y: 10 }}
                                  animate={{ opacity: 1, y: 0 }}
                                  exit={{ opacity: 0, y: -10 }}
                                  transition={{
                                    duration: 0.4,
                                    ease: "easeOut"
                                  }}
                                >
                                  <motion.div
                                    animate={{
                                      rotate: 360,
                                    }}
                                    transition={{
                                      duration: 2,
                                      repeat: Number.POSITIVE_INFINITY,
                                      ease: "linear",
                                    }}
                                  >
                                    <Code className="w-5 h-5 mr-2" />
                                  </motion.div>
                                  Connecting...
                                </motion.div>
                              ) : (
                                <motion.div
                                  key="join"
                                  className="flex items-center justify-center"
                                  initial={{ opacity: 0, y: 10 }}
                                  animate={{ opacity: 1, y: 0 }}
                                  exit={{ opacity: 0, y: -10 }}
                                  transition={{
                                    duration: 0.4,
                                    ease: "easeOut"
                                  }}
                                >
                                  <Sparkles className="w-5 h-5 mr-2" />
                                  Join Room
                                </motion.div>
                              )}
                            </AnimatePresence>
                          </GlowingButton>
                        </div>
                        <p className="text-center text-sm text-slate-400 mt-6">
                          Don&apos;t have an invite?{" "}
                          <motion.button
                            onClick={createNewRoom}
                            className="text-cyan-400 hover:text-cyan-300 transition-colors relative group"
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            transition={{
                              duration: 0.2,
                              ease: "easeOut"
                            }}
                          >
                            Create New Room
                            <span className="absolute bottom-0 left-0 w-0 h-px bg-cyan-300 transition-all duration-500 ease-out group-hover:w-full" />
                          </motion.button>
                        </p>
                      </motion.div>
                    </motion.div>
                  </main>
                </RevealAnimation>
              </div>
            </RevealAnimation>

            <RevealAnimation

            >
              <motion.div>

 

              </motion.div>
              <motion.section id="features" className="mt-32 px-6 justify-center  items-center mx-auto">
                <h2 className="text-4xl font-bold text-center mb-16">Key Features</h2>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-8 w-full">
                  <HoverCard
                    icon={Laptop}
                    title="Real-time Collaboration"
                    description="Code together in real-time with multiple developers, just like you're in the same room."
                  />
                  <HoverCard
                    icon={Server}
                    title="Secure Rooms"
                    description="Create private, secure rooms for your team to collaborate without worries."
                  />
                  <HoverCard
                    icon={Zap}
                    title="Instant Sync"
                    description="Changes sync instantly across all connected devices, ensuring everyone's always on the same page."
                  />
                </div>
              </motion.section>
            </RevealAnimation>

            <RevealAnimation>
              <motion.section id="how-it-works" className="mt-32">
                <h2 className="text-4xl font-bold text-center mb-16">How It Works</h2>
                <div className="flex flex-col md:flex-row justify-center items-center space-y-8 md:space-y-0 md:space-x-12">
                  {[
                    { icon: GitBranch, title: "Create or Join", description: "Start a new room or join an existing one" },
                    { icon: Users, title: "Collaborate", description: "Work together in real-time with your team" },
                    { icon: Boxes, title: "Build", description: "Create amazing projects faster than ever" },
                  ].map((step, index) => (
                    <motion.div
                      key={step.title}
                      className="flex flex-col items-center text-center"
                      initial={{ opacity: 0, y: 50 }}
                      whileInView={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.8, delay: index * 0.2 }}
                    >
                      <div className="relative">
                        <motion.div
                          className="absolute inset-0 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full opacity-20"
                          animate={{
                            scale: [1, 1.3, 0.8],
                            opacity: [0.2, 0.1, 0.1],
                          }}
                          transition={{
                            duration: 2,
                            repeat: Number.POSITIVE_INFINITY,
                            repeatType: "reverse",
                          }}
                        />
                        <div className="relative bg-slate-800 p-6 rounded-full">
                          <step.icon className="w-10 h-10 text-cyan-400" />
                        </div>
                      </div>
                      <h3 className="mt-6 text-2xl font-semibold">{step.title}</h3>
                      <p className="mt-2 text-slate-400">{step.description}</p>
                    </motion.div>
                  ))}
                </div>
              </motion.section>
            </RevealAnimation>

            <RevealAnimation>
              <WhyCodeConnect />
            </RevealAnimation>

            <RevealAnimation>
              <MoreUseCases />
            </RevealAnimation>
            {/* 
            <RevealAnimation>
              <InteractiveDemo />
            </RevealAnimation> */}

            <RevealAnimation>
              <FAQSection />
            </RevealAnimation>

            <RevealAnimation>
              <CodeConnectSlider />
            </RevealAnimation>

            {/* <RevealAnimation> */}
            <footer className="mt-32 mb-20 text-center text-sm text-slate-400">
              <p>© 2023 CodeConnect. All rights reserved.</p>
              <p className="mt-2">
                Built with love by{" "}
                <a
                  href={"http://github.com/dhaval079"}
                  className="text-cyan-400 hover:text-cyan-300 transition-colors relative group inline-block"
                >
                  @Dhaval Rupapara
                  <span className="absolute bottom-0 left-0 w-0 h-px bg-cyan-300 transition-all duration-300 ease-out group-hover:w-full" />
                </a>
              </p>
            </footer>
            {/* </RevealAnimation> */}
          </div>
        </div>
      </PremiumParallax>
    </div>
  )
}

================
File: src/app/layout.tsx
================
import { Inter } from 'next/font/google'
import "./globals.css"
import { ThemeProvider } from "next-themes"
import { Toaster } from "sonner"
import { SocketProvider } from "@/providers/socketProvider"
import { ClerkProvider } from '@clerk/nextjs'

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" className={inter.className}>
      <body className="antialiased">
        <ClerkProvider
          appearance={{
            layout: {
              socialButtonsPlacement: "bottom",
              socialButtonsVariant: "blockButton",
            },
            elements: {
              formButtonPrimary: 'bg-blue-600 hover:bg-blue-700 text-white',
              card: 'bg-transparent border-none shadow-none',
              formField: 'gap-1',
              formFieldInput: 'bg-gray-800 border-gray-700',
              footerActionLink: 'text-blue-400 hover:text-blue-300',
              dividerLine: 'bg-gray-700',
              dividerText: 'text-gray-400',
            }
          }}
        >
          <ThemeProvider attribute="class">
            <SocketProvider>
              {children}
              <Toaster expand={false} position="top-center" richColors theme="dark" />
            </SocketProvider>
          </ThemeProvider>
        </ClerkProvider>
      </body>
    </html>
  )
}

================
File: src/app/not-found.tsx
================
"use client"
import { Suspense } from 'react'
import { useSearchParams } from 'next/navigation'
import { motion } from "framer-motion";
import Link from "next/link";

function NotFoundContent() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gradient-to-r from-gray-900 to-black text-white">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="text-center"
      >
        <motion.h1
          className="text-6xl font-bold text-gray-100"
          initial={{ scale: 0.8 }}
          animate={{ scale: 1 }}
          transition={{ duration: 0.4 }}
        >
          404
        </motion.h1>
        <p className="mt-4 text-xl text-gray-400">Oops! Page Not Found.</p>

        <motion.div
          className="mt-6"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.6 }}
        >
          <Link href="/">
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              className="px-6 py-3 rounded-lg bg-blue-600 hover:bg-blue-500 text-white font-medium transition-all duration-300 shadow-lg"
            >
              Return Home
            </motion.button>
          </Link>
        </motion.div>
      </motion.div>
    </div>
  );
}


export default function NotFound() {
  return (
    <Suspense fallback={<div></div>}>
      <NotFoundContent />
    </Suspense>
  )
}

================
File: src/app/page.tsx
================
"use client"

import { useUser } from '@clerk/nextjs';
import { useEffect, useState } from 'react';
import CodeConnect from './landing';
import AuthModal from '@/components/Auth/AuthDialog';

export default function Home() {
  const { isLoaded, isSignedIn } = useUser();
  const [showAuthModal, setShowAuthModal] = useState(false);

  useEffect(() => {
    if (isLoaded && !isSignedIn) {
      setShowAuthModal(true);
    }
  }, [isLoaded, isSignedIn]);

  return (
    <>
      <CodeConnect />
      <AuthModal
        isOpen={showAuthModal} 
        onClose={() => {
          if (isSignedIn) {
            setShowAuthModal(false);
          }
        }} 
      />
    </>
  );
}

================
File: src/components/Auth/AuthDialog.tsx
================
import { useSignIn, useSignUp } from "@clerk/nextjs";
import { motion, AnimatePresence } from "framer-motion";
import { useEffect, useState } from "react";
import AdvancedCursor from "../Dashboard/Cursor";
import { Code, Mail, Loader2, ArrowRight, Globe, Check, Atom, Codepen, CodeXml } from 'lucide-react';
import { GlowingButton } from "../Dashboard/buttons/GlowingButton";
import { FuturisticInput } from "../Dashboard/buttons/FuturisticInput";
import { toast } from "sonner";
import { reduce } from "lodash";
import { redirect } from "next/dist/server/api-utils";
import OTPInput from "../Dashboard/buttons/OTPInput";
import { withTV } from "tailwind-variants/dist/transformer.js";
import { withRouter } from "next/router";
import Image from "next/image";

const EnhancedGradientBackground = () => {
  return (
    <div className="absolute inset-0 overflow-hidden">
      <div className="absolute inset-0">
        <div className="floating-orbs" />
      </div>

      {/* Additional moving elements with bottom origination */}
      <div className="absolute inset-0">
        <div className="gradient-shape shape1" />
        <div className="gradient-shape shape2" />
        <div className="gradient-shape shape3" />
        <div className="gradient-shape shape4" />
        <div className="gradient-shape shape5" />
      </div>

      <style jsx>{`
        .floating-orbs::before,
        .floating-orbs::after {
          content: '';
          position: absolute;
          z-index: -1;
          opacity: 0.6;
          filter: blur(90px);
          border-radius: 50%;
          animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
          animation-iteration-count: infinite;
        }

        .floating-orbs::before {
          background: conic-gradient(
            from 90deg at 50% 50%,
            #ff8b7e 0deg,
            #e24e6b 160deg,
            #7ed2da 120deg,
            #8bdce0 55deg,
            transparent 360deg
          );
          width: 20vw;
          height: 20vw;
          left: 25vw;
          animation: riseAndFall 8s infinite;
        }

        .floating-orbs::after {
          background: conic-gradient(
            from 10deg at 50% 50%,
            #eb7494 0deg,
            #ae77b2 55deg,
            #97b5da 120deg,
            #0099ca 160deg,
            transparent 360deg
          );
          width: 200px;
          height: 400px;
          right: 10vw;
          animation: riseAndFloat 7s infinite;
        }

        .gradient-shape {
          position: absolute;
          border-radius: 50%;
          filter: blur(70px);
          opacity: 0.5;
        }

        .shape1 {
          background: conic-gradient(
            from 180deg at 50% 50%,
            #16abff33 0deg,
            #0885ff33 55deg,
            #54d6ff33 120deg,
            #0071ff33 160deg,
            transparent 360deg
          );
          width: 10vw;
          height: 10vw;
          left: 10vw;
          animation: ascendAndRotate 9s ease-in-out infinite;
        }

        .shape2 {
          background: conic-gradient(
            from 90deg at 50% 50%,
            #ff8b7e 0deg,
            #e24e6b 160deg,
            #7ed2da 120deg,
            #8bdce0 55deg,
            transparent 360deg
          );
          width: 15vw;
          height: 15vw;
          right: 5vw;
          animation: floatUpAndAround 8s ease-in-out infinite;
        }

        .shape3 {
          background: conic-gradient(
            from 10deg at 50% 50%,
            #eb7494 0deg,
            #ae77b2 55deg,
            #97b5da 120deg,
            #0099ca 160deg,
            transparent 360deg
          );
          width: 10vw;
          height: 10vw;
          left: 50%;
          transform: translateX(-50%);
          animation: riseAndPulse 10s ease-in-out infinite;
        }

        .shape4 {
          background: conic-gradient(
            from 45deg at 50% 50%,
            #4f46e533 0deg,
            #7c3aed33 55deg,
            #a855f733 120deg,
            #6366f133 160deg,
            transparent 360deg
          );
          width: 15vw;
          height: 15vw;
          left: 20vw;
          animation: slowRiseAndSpin 12s ease-in-out infinite;
        }

        .shape5 {
          background: conic-gradient(
            from 120deg at 50% 50%,
            #f472b633 0deg,
            #ec489933 55deg,
            #db277733 120deg,
            #bf125d33 160deg,
            transparent 360deg
          );
          width: 18vw;
          height: 18vw;
          bottom: -25vh;
          right: 15vw;
          animation: floatUpAndDrift 11s ease-in-out infinite;
        }

        @keyframes riseAndFall {
          0%, 100% {
            transform: translateY(0) scale(1);
            opacity: 0.6;
          }
          50% {
            transform: translateY(-40vh) scale(1.2);
            opacity: 0.8;
          }
        }

        @keyframes riseAndFloat {
          0%, 100% {
            transform: translate(0, 0) scale(1);
          }
          50% {
            transform: translate(-20vw, -35vh) scale(1.1);
          }
        }

        @keyframes ascendAndRotate {
          0%, 100% {
            transform: translateY(0) rotate(0deg);
          }
          50% {
            transform: translateY(-45vh) rotate(180deg);
          }
        }

        @keyframes floatUpAndAround {
          0%, 100% {
            transform: translate(0, 0) rotate(0deg);
          }
          33% {
            transform: translate(-10vw, -30vh) rotate(120deg);
          }
          66% {
            transform: translate(10vw, -40vh) rotate(240deg);
          }
        }

        @keyframes riseAndPulse {
          0%, 100% {
            transform: translateY(0) scale(1);
            opacity: 0.5;
          }
          50% {
            transform: translateY(-35vh) scale(1.3);
            opacity: 0.7;
          }
        }

        @keyframes slowRiseAndSpin {
          0%, 100% {
            transform: translateY(0) rotate(0deg) scale(1);
          }
          50% {
            transform: translateY(-25vh) rotate(240deg) scale(1.2);
          }
        }

        @keyframes floatUpAndDrift {
          0%, 100% {
            transform: translate(0, 0) rotate(0deg);
          }
          50% {
            transform: translate(-15vw, -30vh) rotate(-180deg);
          }
        }
      `}</style>
    </div>
  );
};

interface AuthModalProps {
  isOpen: boolean;
  onClose: () => void;
}

type AuthView = "sign-in" | "sign-up" | "verify-otp";

const AuthModal = ({ isOpen, onClose }: AuthModalProps) => {
  const [view, setView] = useState<AuthView>("sign-in");
  const [isLoading, setIsLoading] = useState(false);
  const [email, setEmail] = useState("");
  const [username, setUsername] = useState("");
  const [otpCode, setOtpCode] = useState("");
  const [verificationToken, setVerificationToken] = useState("");
  const { isLoaded: isSignInLoaded, signIn, setActive: setSignInActive } = useSignIn();
  const { isLoaded: isSignUpLoaded, signUp, setActive: setSignUpActive } = useSignUp();

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "unset";
    }
    return () => {
      document.body.style.overflow = "unset";
    };
  }, [isOpen]);

  const handleEmailSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!isSignInLoaded || !isSignUpLoaded) return;
    setIsLoading(true);

    try {
      if (view === "sign-in") {
        const result = await signIn.create({
          strategy: "email_code",
          identifier: email,
        });
        setVerificationToken(result.createdSessionId || "");
        setView("verify-otp");
        toast.success("OTP code sent to your email!");
      } else {
        const result = await signUp.create({
          emailAddress: email,
          username,
        });
        setVerificationToken(result.createdSessionId || "");
        setView("verify-otp");
        toast.success("OTP code sent to your email!");
      }
    } catch (error: any) {
      console.error("Auth error:", error);
      toast.error(error.errors?.[0]?.message || "Authentication failed. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };


const handleOTPVerification = async (e: React.FormEvent) => {
  e.preventDefault();
  setIsLoading(true);

  try {
    if (view === "verify-otp" && signIn) {
      const result = await signIn.attemptFirstFactor({
        strategy: "email_code",
        code: otpCode,
      });

      if (result.status === "complete") {
        await setSignInActive({ session: result.createdSessionId });
        toast.success("Successfully signed in!");
        onClose();
        window.location.href = "/";
      }
    }
  } catch (error: any) {
    console.error("OTP verification error:", error);
    toast.error("Invalid OTP code. Please try again.");
  } finally {
    setIsLoading(false);
  }
};



  // const handleOAuthSignIn = async (provider: "oauth_google" | "oauth_linkedin_oidc") => {
  //   try {
  //     setIsLoading(true);
  //     const baseUrl = window.location.origin;

  //     if (view === "sign-in") {
  //       await signIn?.authenticateWithRedirect({
  //         strategy: provider,
  //         redirectUrl: `${baseUrl}/sso-callback`,
  //         redirectUrlComplete: `${baseUrl}`,
  //         skipAccountCreation: true // Skip additional info collection
  //       });
  //     } else {
  //       await signUp?.authenticateWithRedirect({
  //         strategy: provider,
  //         redirectUrl: `${baseUrl}/sso-callback`,
  //         redirectUrlComplete: `${baseUrl}`,
  //         skipAccountCreation: true, // Skip additional info collection
  //         skipPasswordCreation: true, // Skip password creation
  //         skipSignUpVerification: true // Skip email verification
  //       });
  //     }
  //   } catch (error) {
  //     console.error("OAuth error:", error);
  //     toast.error("Failed to authenticate. Please try again.");
  //   } finally {
  //     setIsLoading(false);
  //   }
  // };


  const handleOAuthSignIn = async (provider: "oauth_google" | "oauth_linkedin_oidc") => {
    if (!isSignInLoaded || !isSignUpLoaded) {
      toast.error("Authentication not ready. Please try again.");
      return;
    }
  
    try {
      setIsLoading(true);
      const baseUrl = window.location.origin;
  
      const providerConfig: Record<"oauth_google" | "oauth_linkedin_oidc", {
        strategy: "oauth_google" | "oauth_linkedin_oidc";
        redirectUrl: string;
        redirectUrlComplete: string;
        additionalScopes?: string[];
      }> = {
        oauth_google: {
          strategy: "oauth_google",
          redirectUrl: `${baseUrl}/sso-callback`,
          redirectUrlComplete: baseUrl,
        },
        oauth_linkedin_oidc: {
          strategy: "oauth_linkedin_oidc",
          redirectUrl: `${baseUrl}/sso-callback`,
          redirectUrlComplete: baseUrl,
          additionalScopes: [
            "openid",
            "profile",
            "email",
            "w_member_social"
          ]
        }
      };
  
      const config = providerConfig[provider];
  
      if (view === "sign-in") {
        await signIn?.authenticateWithRedirect({
          ...config,
        });
      } else {
        await signUp?.authenticateWithRedirect({
          ...config,
        });
      }
    } catch (error: any) {
      console.error("OAuth error:", error);
      toast.error("Authentication failed. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AnimatePresence mode="wait">
      <AdvancedCursor />
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 z-50 flex items-center justify-center"
        >
          {/* Backdrop with enhanced blur */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="absolute inset-0 bg-black/80 backdrop-blur-lg"
            onClick={onClose}
          />

          {/* Modal */}
          <motion.div
            initial={{ scale: 0.95, opacity: 0, y: 20 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.95, opacity: 0, y: 20 }}
            transition={{ type: "spring", duration: 0.7, bounce: 0.3 }}
            className="relative w-full max-w-3xl  h-[80vh] bg-gray-900/90 rounded-2xl shadow-2xl overflow-hidden border border-gray-800"
          >
              {/* <EnhancedGradientBackground /> */}

            {/* Animated gradient background */}
            <motion.div
              className="absolute inset-0 bg-gradient-to-br from-blue-500/10 via-purple-500/10 to-pink-500/10"
              animate={{
                background: [
                  "linear-gradient(to right bottom, rgba(59,130,246,0.1), rgba(147,51,234,0.1), rgba(236,72,153,0.1))",
                  "linear-gradient(to right bottom, rgba(236,72,153,0.1), rgba(59,130,246,0.1), rgba(147,51,234,0.1))",
                ],
              }}
              transition={{ duration: 10, repeat: Infinity }}
              style={{ filter: "blur(100px)" }}
            />

            {/* Content */}
            <div className="relative h-full flex flex-col items-center justify-center p-8">
              {/* Logo and Title */}
              <motion.div
                className="flex flex-col items-center mb-8"
                initial={{ y: -20, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ duration: 0.5 }}
              >
                <motion.div
                  animate={{
                    rotate: [0, 360],
                  }}
                  transition={{
                    duration: 30,
                    repeat: Infinity,
                    ease: "linear",
                  }}
                >
                  <Code className="w-12 h-12 text-blue-500" />
                </motion.div>
                <h1 className={`mt-4 text-3xl font-bold bg-clip-text text-transparent ${
    view === "sign-in" 
      ? "bg-gradient-to-r from-cyan-500 to-purple-500" : "bg-white"
  }`}>
    {view === "verify-otp" ? "Enter OTP Code" :
    view === "sign-in" ? "Welcome Back" : "Join CodeConnect"}
  </h1>
                <p className="mt-2 text-white">
                  {view === "verify-otp" ? "Check your email for the verification code" :
                    view === "sign-in" ? "Sign in to continue your coding journey" :
                      "Create an account to start collaborating"}
                </p>
              </motion.div>

              {/* Form */}
              <motion.form
                onSubmit={view === "verify-otp" ? handleOTPVerification : handleEmailSubmit}
                className="w-full max-w-md space-y-6"
                initial={{ y: 20, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ duration: 0.5, delay: 0.2 }}
              >
                {view === "verify-otp" ? (
                  <OTPInput
                    value={otpCode}
                    onChange={(e:any) => setOtpCode(e.target.value)}
                  />
                ) : (
                  <>
                    {view === "sign-up" && (
                      <FuturisticInput
                        label="Username"
                        id="username"
                        icon={Globe}
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        placeholder="Choose a username"
                        required
                      />
                    )}

                    <FuturisticInput
                      label="Email"
                      id="email"
                      icon={Mail}
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      placeholder="Enter your email"
                      required
                    />
                  </>
                )}

                <div className="space-y-4">
                  <GlowingButton
                    className="w-full"
                    disabled={isLoading || !isSignInLoaded || !isSignUpLoaded}
                    type="submit"
                  >
                    <AnimatePresence mode="wait">
                      {isLoading ? (
                        <motion.div
                          key="loading"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          exit={{ opacity: 0 }}
                          className="flex items-center justify-center"
                        >
                          <Loader2 className="w-5 h-5 animate-spin mr-2" />
                          {view === "verify-otp" ? "Verifying..." :
                            view === "sign-in" ? "Sending OTP..." : "Creating account..."}
                        </motion.div>
                      ) : (
                        <motion.div
                          key="default"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          exit={{ opacity: 0 }}
                          className="flex items-center justify-center"
                        >
                          {view === "verify-otp" ? "Verify OTP" :
                            view === "sign-in" ? "Send OTP" : "Create Account"}
                          <ArrowRight className="ml-2 w-5 h-5" />
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </GlowingButton>

                  {view !== "verify-otp" && (
                    <>
                      <div className="relative">
                        <div className="absolute inset-0 flex items-center">
                          <div className="w-full border-t border-gray-700" />
                        </div>
                        <div className="relative flex justify-center text-sm">
                          <span className="px-2  text-gray-300">
                            Or continue with
                          </span>
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <motion.button
                          type="button"
                          onClick={() => handleOAuthSignIn("oauth_google")}
                          className="flex items-center justify-center gap-2 px-4 py-2 bg-gray-800 hover:bg-gray-700 text-white rounded-lg border border-gray-700 transition-all duration-200"
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                        >
                          <Image width={5} height={5} src="/google.svg" alt="Google" className="w-5 h-5" />
                          Google
                        </motion.button>

                        <motion.button
                          type="button"
                          onClick={() => handleOAuthSignIn("oauth_linkedin_oidc")}
                          className="flex items-center justify-center gap-2 px-4 py-2 bg-gray-800 hover:bg-gray-700 text-white rounded-lg border border-gray-700 transition-all duration-200"
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                        >
                          <Image width={5} height={5} src="/linkedin.svg" alt="LinkedIn" className="w-5 h-5" />
                          LinkedIn
                        </motion.button>
                      </div>
                    </>
                  )}
                </div>
              </motion.form>

              {/* Footer */}
              {view !== "verify-otp" && (
                <motion.div
                  className="absolute mt-4 bottom-0 left-0 right-0 p-6 border-t border-gray-800 text-center"
                  initial={{ y: 20, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  transition={{ duration: 0.5, delay: 0.4 }}
                >
                  <p className="text-gray-300 mt-4">
                    {view === "sign-in" ? (
                      <>
                        Don't have an account?{" "}
                        <button
                          type="button"
                          onClick={() => setView("sign-up")}
                          className="text-blue-400 hover:text-blue-300 transition-colors"
                        >
                          Sign up
                        </button>
                      </>
                    ) : (
                      <>
                        Already have an account?{" "}
                        <button
                          type="button"
                          onClick={() => setView("sign-in")}
                          className="text-blue-400 hover:text-blue-300 transition-colors"
                        >
                          Sign in
                        </button>
                      </>
                    )}
                  </p>
                </motion.div>
              )}
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default AuthModal;

================
File: src/components/Dashboard/animations/AnimatedBackground.tsx
================
import { useRef, useEffect } from "react"
import * as THREE from "three"

export const AnimatedBackground = () => {
  const containerRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    if (!containerRef.current) return

    const scene = new THREE.Scene()
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)
    const renderer = new THREE.WebGLRenderer({ alpha: true })

    renderer.setSize(window.innerWidth, window.innerHeight)
    containerRef.current.appendChild(renderer.domElement)

    const geometry = new THREE.IcosahedronGeometry(1, 1)
    const material = new THREE.MeshBasicMaterial({
      color: 0x06b6d4,
      wireframe: true,
      transparent: true,
      opacity: 0.4,
    })
    const icosahedron = new THREE.Mesh(geometry, material)
    scene.add(icosahedron)

    camera.position.z = 5

    const animate = () => {
      requestAnimationFrame(animate)
      icosahedron.rotation.x += 0.001
      icosahedron.rotation.y += 0.001
      renderer.render(scene, camera)
    }

    animate()

    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight
      camera.updateProjectionMatrix()
      renderer.setSize(window.innerWidth, window.innerHeight)
    }

    window.addEventListener("resize", handleResize)

    return () => {
      window.removeEventListener("resize", handleResize)
      containerRef.current?.removeChild(renderer.domElement)
    }
  }, [])

  return <div ref={containerRef} className="absolute inset-0 pointer-events-none z-10" />
}

================
File: src/components/Dashboard/animations/NeonGlow.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";

export const NeonGlow = () => {
    return (
      <motion.div
        className="fixed inset-0 pointer-events-none z-0"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 2 }}
      >
        <div className="absolute top-0 left-0 w-1/2 h-1/2 bg-blue-500 rounded-full filter blur-[150px] opacity-20" />
        <div className="absolute bottom-0 right-0 w-1/2 h-1/2 bg-purple-500 rounded-full filter blur-[150px] opacity-20" />
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-1/2 h-1/2 bg-cyan-500 rounded-full filter blur-[150px] opacity-20" />
      </motion.div>
    )
  }

================
File: src/components/Dashboard/animations/ParallaxScroll.tsx
================
import React, { useEffect, useRef } from 'react';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { motion, useScroll, useTransform, useSpring } from 'framer-motion';

// Register GSAP plugins
gsap.registerPlugin(ScrollTrigger);

interface PremiumParallaxProps {
  children: React.ReactNode;
  speed?: number;
  friction?: number;
  ease?: number;
}

export const PremiumParallax: React.FC<PremiumParallaxProps> = ({
  children,
  speed = 0.2,
  friction = 0.8,
  ease = 0.15
}) => {
  const wrapperRef = useRef<HTMLDivElement>(null);
  const contentRef = useRef<HTMLDivElement>(null);
  const smoothScrollRef = useRef({
    current: 0,
    target: 0,
    limit: 0
  });

  // Smooth scroll animation
  useEffect(() => {
    const wrapper = wrapperRef.current;
    const content = contentRef.current;
    if (!wrapper || !content) return;

    // Calculate scroll limits
    const calculateDimensions = () => {
      smoothScrollRef.current.limit = 
        content.getBoundingClientRect().height - window.innerHeight;
    };

    calculateDimensions();
    window.addEventListener('resize', calculateDimensions);

    // Initialize GSAP smooth scroll
    const smoothScroll = gsap.timeline({
      scrollTrigger: {
        trigger: wrapper,
        start: 'top top',
        end: 'bottom bottom',
        scrub: true
      }
    });

    // Add parallax effect to elements with data-speed attribute
    gsap.utils.toArray<HTMLElement>('[data-speed]').forEach(element => {
      const speedAttr = element.getAttribute('data-speed') || speed;
      const parallaxDistance = element.offsetHeight * Number(speedAttr);

      smoothScroll.to(element, {
        y: -parallaxDistance,
        ease: 'none'
      }, 0);
    });

    // Handle smooth scrolling
    let animationFrame: number;
    const updateScroll = () => {
      smoothScrollRef.current.current = gsap.utils.interpolate(
        smoothScrollRef.current.current,
        smoothScrollRef.current.target,
        ease
      );

      const scrollProgress = smoothScrollRef.current.current;
      
      gsap.set(content, {
        y: -scrollProgress,
        force3D: true
      });

      animationFrame = requestAnimationFrame(updateScroll);
    };

    // Start animation loop
    animationFrame = requestAnimationFrame(updateScroll);

    // Handle wheel events for custom scroll speed
    const handleWheel = (e: WheelEvent) => {
      e.preventDefault();
      
      const scrollTarget = smoothScrollRef.current.target + e.deltaY * friction;
      smoothScrollRef.current.target = gsap.utils.clamp(
        0,
        smoothScrollRef.current.limit,
        scrollTarget
      );
    };

    wrapper.addEventListener('wheel', handleWheel, { passive: false });

    // Cleanup
    return () => {
      cancelAnimationFrame(animationFrame);
      window.removeEventListener('resize', calculateDimensions);
      wrapper.removeEventListener('wheel', handleWheel);
      ScrollTrigger.getAll().forEach(trigger => trigger.kill());
    };
  }, [speed, friction, ease]);

  // Get scroll progress for additional effects
  const { scrollYProgress } = useScroll({
    target: wrapperRef,
    offset: ['start start', 'end end']
  });

  // Create smooth scroll progress
  const smoothProgress = useSpring(scrollYProgress, {
    stiffness: 100,
    damping: 30,
    mass: 1
  });

  // Create transform values based on scroll progress
  const scale = useTransform(smoothProgress, [0, 0.5, 1], [1, 1.05, 1]);
  const opacity = useTransform(smoothProgress, [0, 0.2, 0.8, 1], [0.8, 1, 1, 0.8]);

  return (
    <div
      ref={wrapperRef}
      className="relative w-full overflow-hidden"
      style={{
        perspective: '1000px',
        transformStyle: 'preserve-3d'
      }}
    >
      <motion.div
        ref={contentRef}
        style={{
          scale,
          opacity
        }}
        className="relative w-full transform-gpu will-change-transform"
      >
        {children}
      </motion.div>
    </div>
  );
};

// Helper component for parallax sections
export const ParallaxSection: React.FC<{
  children: React.ReactNode;
  speed?: number;
  className?: string;
}> = ({ children, speed = 0.5, className = '' }) => {
  return (
    <div
      data-speed={speed}
      className={`relative ${className}`}
    >
      {children}
    </div>
  );
};

export default PremiumParallax;

================
File: src/components/Dashboard/animations/RevealAnimation.tsx
================
"use client"

import React, { useRef, useEffect, useState, useMemo, RefObject } from "react"
import { motion, useAnimation, useReducedMotion, Variant, Variants, HTMLMotionProps, AnimationControls } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { cn } from "@/lib/utils"

type RevealDirection = "up" | "down" | "left" | "right"
type RevealEffect = "fade" | "slide" | "scale" | "rotate" | "flip" | "skew" | "blur"

interface RevealAnimationProps extends HTMLMotionProps<"div"> {
  children: React.ReactNode
  direction?: RevealDirection
  effect?: RevealEffect | RevealEffect[]
  duration?: number
  delay?: number
  stagger?: number
  threshold?: number | number[]
  rootMargin?: string
  triggerOnce?: boolean
  customVariants?: Variants
  easing?: string
  offsetDistance?: number
  scale?: number
  rotate?: number
  opacity?: number
  transformOrigin?: string
  className?: string
  skew?: number
  blur?: number
  repeatDelay?: number
  repeat?: number
  repeatType?: "loop" 
  onAnimationComplete?: () => void
  viewport?: {  amount?: number | "some" | "all" }
}

const defaultVariants: Variants = {
  hidden: { opacity: 0 },
  visible: { opacity: 1 },
}

const getDirectionOffset = (direction: RevealDirection, distance: number): Partial<Variant> => {
  switch (direction) {
    case "up": return { y: distance }
    case "down": return { y: -distance }
    case "left": return { x: distance }
    case "right": return { x: -distance }
    default: return {}
  }
}

const createVariants = (
  direction: RevealDirection,
  effect: RevealEffect[],
  offsetDistance: number,
  scale: number,
  rotate: number,
  opacity: number,
  skew: number,
  blur: number
): Variants => {
  let hidden: Variant & { scale?: number; rotate?: number; rotateY?: number; skew?: number; filter?: string } = { opacity }
  let visible: Variant & { scale?: number; rotate?: number; rotateY?: number; skew?: number; filter?: string } = { opacity: 1 }

  if (effect.includes("fade")) {
    hidden.opacity = opacity
  }
  if (effect.includes("slide")) {
    const offset = getDirectionOffset(direction, offsetDistance)
    hidden = { ...hidden, ...offset } as Variant & { scale?: number; rotate?: number; rotateY?: number; skew?: number; filter?: string }
    visible = { ...visible, x: 0, y: 0 }
  }
  if (effect.includes("scale")) {
    hidden.scale = scale
    visible.scale = 1
  }
  if (effect.includes("rotate")) {
    hidden = { ...hidden, rotate: rotate }
    visible = { ...hidden, rotate: 0 }
  }
  if (effect.includes("flip")) {
    hidden.rotateY = 180
    visible.rotateY = 0
  }
  if (effect.includes("skew")) {
    hidden.skew = skew
    visible.skew = 0
  }
  if (effect.includes("blur")) {
    hidden.filter = `blur(${blur}px)`
    visible.filter = "blur(0px)"
  }

  return { hidden, visible }
}

export const RevealAnimation: React.FC<RevealAnimationProps> = ({
  children,
  direction = "up",
  effect = ["fade", "slide"],
  duration = 0.8,
  delay = 0,
  stagger = 0.1,
  threshold = 0.2,
  rootMargin = "-100px",
  triggerOnce = true,
  customVariants,
  easing = "easeOut",
  offsetDistance = 50,
  scale = 0.9,
  rotate = 15,
  opacity = 0,
  transformOrigin = "center",
  className,
  skew = 10,
  blur = 5,
  repeatDelay = 0,
  repeat = 0,
  repeatType = "loop",
  onAnimationComplete,
  viewport,
  ...props
}) => {
  const prefersReducedMotion = useReducedMotion()
  const controls = useAnimation()
  const [ref, inView] = useInView({
    triggerOnce,
    threshold,
    rootMargin,
  })

  const [isClient, setIsClient] = useState(false)
  useEffect(() => {
    setIsClient(true)
  }, [])

  const variants = useMemo(() => 
    customVariants || createVariants(
      direction,
      Array.isArray(effect) ? effect : [effect],
      offsetDistance,
      scale,
      rotate,
      opacity,
      skew,
      blur
    ),
    [customVariants, direction, effect, offsetDistance, scale, rotate, opacity, skew, blur]
  )

  useEffect(() => {
    if (inView) {
      controls.start("visible")
    } else if (!triggerOnce) {
      controls.start("hidden")
    }
  }, [controls, inView, triggerOnce])

  const animateChildren = (child: React.ReactNode, index: number) => {
    if (React.isValidElement(child)) {
      return (
        <motion.div
          key={index}
          variants={variants}
          transition={{
            duration: isClient ? (prefersReducedMotion ? 0 : duration) : 0,
            delay: isClient ? delay + index * stagger : 0,
            ease: easing,
            repeat,
            repeatType,
            repeatDelay,
          }}
        >
          {child}
        </motion.div>
      )
    }
    return child
  }

  if (prefersReducedMotion) {
    return <>{children}</>
  }

  return (
    <motion.div
      ref={ref}
      initial="hidden"
      animate={controls}
      variants={variants}
      transition={{
        duration: isClient ? (prefersReducedMotion ? 0 : duration) : 0,
        delay: isClient ? delay : 0,
        ease: easing,
        repeat,
        repeatType,
        repeatDelay,
      }}
      style={{ 
        transformOrigin,
        willChange: "opacity, transform",
      }}
      className={cn("reveal-animation", className)}
      onAnimationComplete={onAnimationComplete}
      viewport={viewport}
      {...props}
    >
      {React.Children.map(children, animateChildren)}
    </motion.div>
  )
}

export const RevealGroup: React.FC<RevealAnimationProps & { as?: React.ElementType }> = ({ 
  children, 
  as: Component = "div",
  ...props 
}) => {
  const controls = useAnimation()
  const [ref, inView] = useInView({
    triggerOnce: props.triggerOnce,
    threshold: props.threshold,
    rootMargin: props.rootMargin,
  })

  useEffect(() => {
    if (inView) {
      controls.start("visible")
    } else if (!props.triggerOnce) {
      controls.start("hidden")
    }
  }, [controls, inView, props.triggerOnce])

  return (
    <Component ref={ref}>
      {React.Children.map(children, (child, index) => {
        if (React.isValidElement(child)) {
          return React.cloneElement(child as React.ReactElement<RevealAnimationProps>, {
            ...props,
            animate: controls,
            delay: (props.delay || 0) + index * (props.stagger || 0.1),
          })
        }
        return child
      })}
    </Component>
  )
}

export const useRevealAnimation = (options: Omit<RevealAnimationProps, 'children'>): [React.RefObject<HTMLElement>, AnimationControls] => {
  const controls = useAnimation()
  const ref = useRef<HTMLElement>(null)
  const { ref: inViewRef, inView } = useInView({
    triggerOnce: options.triggerOnce,
    threshold: options.threshold,
    rootMargin: options.rootMargin
  })

  useEffect(() => {
    if (inView) {
      controls.start("visible")
    } else if (!options.triggerOnce) {
      controls.start("hidden")
    }
  }, [controls, inView, options.triggerOnce])

  // Combine refs
  useEffect(() => {
    if (ref.current) {
      inViewRef(ref.current)
    }
  }, [inViewRef])

  return [ref as RefObject<HTMLElement>, controls]
}

================
File: src/components/Dashboard/animations/WaveLoader.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";


export default function WaveLoader() {
    return (
      <svg viewBox="0 0 100 100" className="w-full h-full">
        {[0, 1, 2, 3].map((index) => (
          <motion.circle
            key={index}
            cx="50"
            cy="50"
            r="48"
            fill="none"
            stroke={`rgba(96, 165, 250, ${0.1 + index * 0.2})`}
            strokeWidth="4"
            initial={{ scale: 0, opacity: 0 }}
            animate={{
              scale: [0, 1, 1],
              opacity: [1, 0.5, 0],
            }}
            transition={{
              duration: 2,
              repeat: Number.POSITIVE_INFINITY,
              delay: index * 0.4,
              ease: "easeInOut",
            }}
          />
        ))}
      </svg>
    )
  }

================
File: src/components/Dashboard/buttons/FuturisticInput.tsx
================
"use client"

import type React from "react"
import { useState } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { cn } from "@/lib/utils"

interface FuturisticInputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label: string
  icon: React.FC<React.SVGProps<SVGSVGElement>>
}

export const FuturisticInput: React.FC<FuturisticInputProps> = ({ label, icon: Icon, className, ...props }) => {
  const [isFocused, setIsFocused] = useState(false)
  const [isHovered, setIsHovered] = useState(false)

  return (
    <div className="space-y-2 relative w-full">
      <label className="text-sm font-medium text-cyan-300" htmlFor={props.id}>
        {label}
      </label>

      <div className="relative group" onMouseEnter={() => setIsHovered(true)} onMouseLeave={() => setIsHovered(false)}>
        {/* Text Input */}
        <input
          {...props}
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          className={cn(
            `
            w-full bg-slate-900/80 
            border-3 border-cyan-500/30 
            text-cyan-50 placeholder:text-slate-500 
            rounded-lg px-2 py-2 pl-12
            outline-none transition-all duration-300 
            hover:border-cyan-400/50
            focus:border-cyan-400 focus:ring-3 focus:ring-cyan-400/30
          `,
            className,
          )}
        />

        {/* Input Icon */}
        <Icon className="absolute left-3 top-1/2 -translate-y-1/2 text-cyan-400 w-6 h-6 pointer-events-none" />

        {/* Animated border */}
        <AnimatePresence>
          {(isHovered || isFocused) && (
            <motion.div
              className="absolute inset-0 rounded-lg pointer-events-none"
              initial={{ opacity: 0, scale: 0.98 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.98 }}
              transition={{ duration: 0.3 }}
            >
              <motion.div
                className="absolute inset-0 rounded-lg border-2 border-cyan-400"
                initial={{ pathLength: 0 }}
                animate={{ pathLength: 1 }}
                transition={{ duration: 1.5, ease: "easeInOut" }}
                style={{
                  strokeDasharray: "0 1",
                }}
              />
            </motion.div>
          )}
        </AnimatePresence>

        {/* Focus and hover effects */}
        <AnimatePresence>
          {isFocused && (
            <motion.div
              className="absolute inset-0 rounded-lg pointer-events-none"
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              transition={{ duration: 0.2 }}
            >
              {/* Pulsing glow */}
              <motion.div
                className="absolute inset-0 rounded-lg"
                initial={{ boxShadow: "0 0 0 0 rgba(6,182,212,0.6)" }}
                animate={{
                  boxShadow: [
                    "0 0 0 0 rgba(6,182,212,0.6)",
                    "0 0 25px 4px rgba(6,182,212,0.8)",
                    "0 0 0 0 rgba(6,182,212,0.6)",
                  ],
                }}
                transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY, repeatType: "loop" }}
              />
            </motion.div>
          )}
        </AnimatePresence>

        {/* Neon-like glow on hover (behind input) */}
        <motion.div
          className="absolute inset-0 rounded-lg pointer-events-none z-[-1]"
          initial={{ opacity: 0 }}
          animate={{ opacity: isHovered ? 1 : 0 }}
          transition={{ duration: 0.5, ease: "easeInOut" }}
          style={{
            boxShadow: "0 0 30px 5px rgba(6,182,212,0.4), inset 0 0 20px 2px rgba(6,182,212,0.3)",
          }}
        />

      </div>
    </div>
  )
}

================
File: src/components/Dashboard/buttons/GlowingButton.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon, LucideIcon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";

export const GlowingButton: React.FC<{
  children: React.ReactNode;
  className?: string;
  onClick?: () => void;
  disabled?: boolean;
} & Omit<HTMLMotionProps<"button">, "children" | "className" | "onClick" | "disabled">> = ({ children, className, onClick, disabled, ...props }) => {
  const buttonRef = useRef(null)
  const [isHovered, setIsHovered] = useState(false)

  return (
    <motion.button
      ref={buttonRef}
      className={cn(
        "relative overflow-hidden px-6 py-3 rounded-full bg-gradient-to-r from-cyan-500 to-blue-500  text-white font-medium",
        "shadow-lg shadow-cyan-500/20 hover:shadow-cyan-500/40 transition-all duration-300",
        disabled ? "opacity-50 cursor-not-allowed" : "",
        className,
      )}
      onClick={onClick}
      disabled={disabled}
      whileHover={!disabled ? { scale: 1.05 } : {}}
      whileTap={!disabled ? { scale: 0.95 } : {}}
      onHoverStart={() => !disabled && setIsHovered(true)}
      onHoverEnd={() => !disabled && setIsHovered(false)}
      {...props}
    >
      <motion.div
        className="absolute inset-0 bg-gradient-to-r from-cyan-400 to-blue-400"
        initial={{ x: "-100%" }}
        animate={{ x: isHovered ? "0%" : "-100%" }}
        transition={{ duration: 0.5 }}
      />
      <span className="relative z-10">{children}</span>
    </motion.button>
  )
}

================
File: src/components/Dashboard/buttons/OTPInput.tsx
================
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Globe } from 'lucide-react';

interface OTPInputProps {
  value: string;
  onChange: (event: { target: { value: string } }) => void;
  label?: string;
}

const OTPInput = ({ value, onChange, label = "OTP Code" }: OTPInputProps) => {
  const [otp, setOtp] = useState(new Array(6).fill(''));
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);
  const [focusedIndex, setFocusedIndex] = useState<number | null>(null);

  useEffect(() => {
    // Update parent component's value
    onChange({ target: { value: otp.join('') } });
  }, [otp, onChange]);

  const handleChange = (element:any, index:any) => {
    if (isNaN(element.value)) return;

    const newOtp = [...otp];
    newOtp[index] = element.value.substring(element.value.length - 1);
    setOtp(newOtp);

    // Move to next input if current field is filled
    if (element.value && index < 5 && inputRefs.current[index + 1]) {
      inputRefs.current[index + 1]?.focus();
    }
  };

  const handleKeyDown = (e:any, index:any) => {
    // Move to previous input on backspace
    if (e.key === 'Backspace' && !otp[index] && index > 0) {
      inputRefs.current[index - 1]?.focus();
    }
    // Handle paste event
    if (e.key === 'v' && e.ctrlKey) {
      e.preventDefault();
      const pastedData = e.clipboardData?.getData('text');
      if (pastedData?.length === 6 && !isNaN(pastedData)) {
        const otpArray = pastedData.split('');
        setOtp(otpArray);
        inputRefs.current[5]?.focus();
      }
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center space-x-1 ml-6">
        <Globe className="w-5 h-5 text-cyan-400" />
        <label className="text-sm font-medium text-cyan-300">
          {label}
        </label>
      </div>
      
      <div className="flex justify-between px-8 py-4">
        {otp.map((digit, index) => (
          <div key={index} className="relative">
            <motion.input
              ref={el => { inputRefs.current[index] = el }}
              value={digit}
              onChange={e => handleChange(e.target, index)}
              onKeyDown={e => handleKeyDown(e, index)}
              onFocus={() => setFocusedIndex(index)}
              onBlur={() => setFocusedIndex(null)}
              maxLength={1}
              className="w-12 h-14 text-center text-xl font-bold text-white 
                         bg-slate-800/50 border-2 border-cyan-500/20 rounded-lg 
                         outline-none transition-all duration-300
                         focus:border-cyan-500 focus:ring-2 focus:ring-cyan-500/30"
              type="text"
              inputMode="numeric"
              autoComplete="one-time-code"
            />
            
            {/* Animated border effect */}
            <AnimatePresence>
              {focusedIndex === index && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  className="absolute inset-0 rounded-lg pointer-events-none"
                  transition={{ duration: 0.2 }}
                >
                  <motion.div
                    className="absolute inset-0 rounded-lg"
                    initial={{ boxShadow: '0 0 0 0 rgba(6,182,212,0.6)' }}
                    animate={{
                      boxShadow: [
                        '0 0 0 0 rgba(6,182,212,0.6)',
                        '0 0 12px 2px rgba(6,182,212,0.8)',
                        '0 0 0 0 rgba(6,182,212,0.6)',
                      ],
                    }}
                    transition={{ duration: 1.5, repeat: Infinity }}
                  />
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        ))}
      </div>
    </div>
  );
};

export default OTPInput;

================
File: src/components/Dashboard/cards/FeatureCard.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon, LucideIcon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";

interface FeatureCardProps {
  icon: LucideIcon;
  title: string;
  description: string;
}

export const FeatureCard = ({ icon: Icon, title, description }: FeatureCardProps) => {
  const controls = useAnimation()
  const [isHovered, setIsHovered] = useState(false)

  useEffect(() => {
    if (isHovered) {
      controls.start({
        rotate: [0, 10, -10, 0],
        transition: { duration: 0.5 },
      })
    }
  }, [isHovered, controls])

  return (
    <motion.div
      className="bg-slate-800/50 rounded-xl p-6 flex flex-col items-center text-center cursor-pointer"
      whileHover={{ scale: 1.05, boxShadow: "0 0 30px rgba(6, 182, 212, 0.2)" }}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
    >
      <motion.div className="bg-cyan-500/20 p-3 rounded-full mb-4" animate={controls}>
        <Icon className="w-8 h-8 text-cyan-400" />
      </motion.div>
      <h3 className="text-xl font-bold mb-2">{title}</h3>
      <p className="text-slate-400">{description}</p>
    </motion.div>
  )
}

================
File: src/components/Dashboard/cards/HoverCard.tsx
================
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon, LucideIcon } from "lucide-react"

interface HoverCardProps {
icon?: LucideIcon
title: string
  description: string
}

export const HoverCard = ({ icon: Icon, title, description }: HoverCardProps) => {
  return (
    <motion.div
      className="bg-slate-800/50 backdrop-blur-xl rounded-xl p-6 shadow-lg"
      whileHover={{ scale: 1.05, boxShadow: "0px 0px 30px 0px rgba(6, 182, 212, 0.4)" }}
      transition={{ duration: 1.2 }}
    >
      <div className="flex items-center mb-4">
        {Icon && <Icon className="w-8 h-8 text-cyan-400 mr-3" />}
        <h3 className="text-xl font-semibold">{title}</h3>
      </div>
      <p className="text-slate-300">{description}</p>
    </motion.div>
  )
}

================
File: src/components/Dashboard/cards/MoreUseCases.tsx
================
"use client"

import { useRef, useEffect } from 'react'
import { motion, useAnimation, useInView, useScroll, useTransform } from "framer-motion"
import { NeonGlow } from '../animations/NeonGlow'
import { HoverCard } from './HoverCard'

const useCases = [
    {
        title: "Remote Pair Programming",
        description: "Work with your teammates on live coding projects in real-time.",
    },
    {
        title: "Live Coding Interviews",
        description:
            "Assess candidates with actual coding tasks, track their thought process, and communicate via chat.",
    },
    {
        title: "Coding Bootcamps & Education",
        description:
            "Engage students by coding together, explaining concepts visually, and sharing snippets instantly.",
    },
    {
        title: "Hackathons & Team Challenges",
        description: "Organize competitive coding sessions where teams can collaborate dynamically.",
    },
    {
        title: "Freelancers & Consultants",
        description:
            "Work with clients on live projects, debug issues, and showcase solutions interactively.",
    },
]

export default function MoreUseCases() {
    const controls = useAnimation()
    const ref = useRef(null)
    const inView = useInView(ref, { once: true })
    const { scrollYProgress } = useScroll()
    const y = useTransform(scrollYProgress, [0, 1], ["0%", "5%"])

    useEffect(() => {
        if (inView) {
            controls.start("visible")
        }
    }, [controls, inView])

    const staggerVariants = {
        hidden: { opacity: 0, y: 50 },
        visible: (i: number) => ({
            opacity: 1,
            y: 0,
            transition: {
                delay: i * 0.1,
                duration: 0.5,
                ease: "easeOut",
            },
        }),
    }

    return (
        <motion.section 
            id="use-cases" 
            className="mt-32 relative overflow-hidden p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 1 }}
            ref={ref}
        >
            <motion.div 
                className="absolute inset-0"
                style={{ y }}
            />
            <motion.h2 
                className="text-4xl font-bold text-center mb-16"
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.2 }}
            >
                <motion.span
                    initial={{ display: "inline-block" }}
                    animate={{ rotateX: [0, 90, 0] }}
                    transition={{ duration: 1.5, delay: 1, ease: "easeInOut" }}
                >
                    More Use Cases
                </motion.span>
            </motion.h2>
            <div className="max-w-4xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-8">
                {useCases.map((useCase, index) => (
                    <motion.div
                        key={useCase.title}
                        className="bg-slate-800/50 backdrop-blur-xl rounded-xl p-6"
                        variants={staggerVariants}
                        initial="hidden"
                        animate={controls}
                        custom={index}
                        whileHover={{ scale: 1.02, transition: { duration: 0.5 } }}
                        whileTap={{ scale: 0.98 }}
                    >
                        <h3 className="text-2xl font-semibold mb-2">{useCase.title}</h3>
                        <p className="text-slate-300">{useCase.description}</p>
                    </motion.div>
                ))}
            </div>
        </motion.section>
    )
}

================
File: src/components/Dashboard/cards/RoadmapItem.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon, LucideIcon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";


interface RoadmapItemProps {
    icon: LucideIcon;
    title: string;
    description: string;
  }
  
  export const RoadmapItem: React.FC<RoadmapItemProps> = ({ icon: Icon, title, description }) => (
    <motion.div
      className="flex items-start space-x-4"
      initial={{ opacity: 0, x: -20 }}
      whileInView={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="bg-cyan-500/20 p-2 rounded-full"></div>
    </motion.div>
  )

================
File: src/components/Dashboard/cards/StatsCard.tsx
================
import { useAnimation } from "framer-motion"
import { motion } from "framer-motion"
import { LucideIcon } from "lucide-react"
import { useState, useEffect } from "react"

export const StatsCard = ({ 
  icon: Icon, 
  title, 
  value, 
  capacity = "10k" 
}: { 
  icon: LucideIcon
  title: string
  value: string | number
  capacity?: string
}) => {
  const controls = useAnimation()
  const [isHovered, setIsHovered] = useState(false)

  useEffect(() => {
    if (isHovered) {
      controls.start({
        scale: [1, 1.1, 1],
        transition: { duration: 0.3, times: [0, 0.5, 1] },
      })
    }
  }, [isHovered, controls])

  return (
    <motion.div
      className="bg-slate-800/50 opacity-85 rounded-xl p-4 flex items-center space-x-4 cursor-pointer"
      whileHover={{ boxShadow: "0px 0px 30px 0px rgba(6, 182, 212, 0.4)" }}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
    >
      <motion.div className="bg-cyan-500/20 p-2 rounded-lg" animate={controls}>
        <Icon className="w-6 h-6 text-cyan-400" />
      </motion.div>
      <div>
        <div className="flex items-center gap-2">
          <p className="text-sm text-slate-400">{title}</p>
          <span className="text-xs italic text-slate-500">Capacity</span>
        </div>
        <motion.p
          className="text-2xl font-bold text-white"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          {value}
        </motion.p>
      </div>
    </motion.div>
  )
}

export default StatsCard

================
File: src/components/Dashboard/cards/WhyCodeConnect.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { CheckCircle2, Code, Hexagon, LucideIcon, Users, Zap } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";
import { HoverCard } from "./HoverCard"

export default function WhyCodeConnect() { 
    return (
        <motion.section id="why-codeconnect" className="mt-32 p-4">
        <h2 className="text-4xl font-bold text-center mb-16">Why CodeConnect?</h2>
        <div className="max-w-4xl mx-auto bg-slate-800/50 backdrop-blur-xl rounded-2xl p-8 shadow-2xl shadow-cyan-500/10">
          <p className="text-lg text-slate-300 mb-6">
            CodeConnect is built for developers, by developers. Whether you're working remotely, teaching, or
            conducting interviews, our platform enables smoother, faster, and more interactive coding sessions. We
            remove the friction from pair programming by ensuring low latency, secure connections, and real-time
            updates, making remote collaboration as effective as in-person coding.
          </p>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <HoverCard
              icon={Zap}
              title="Zero Latency"
              description="Built with WebRTC for ultra-fast peer-to-peer connections."
            />
            <HoverCard
              icon={Users}
              title="Seamless Collaboration"
              description="Join a room instantly and start coding together."
            />
            <HoverCard
              icon={CheckCircle2}
              title="Secure & Private"
              description="All rooms are encrypted to ensure data privacy."
            />
            <HoverCard
              icon={Code}
              title="Developer-Friendly"
              description="Powered by modern web technologies like React, WebRTC, and CodeMirror."
            />
          </div>
        </div>
      </motion.section>
    );
}

================
File: src/components/Dashboard/Cursor.tsx
================
"use client"

import type React from "react"
import { useEffect, useRef, useState, useCallback } from "react"
import { gsap } from "gsap"
import { debounce } from "lodash"
import { MoveLeftIcon } from "lucide-react"

interface CursorConfig {
  mode: 'default' | 'highlight' | 'drag' | 'text' | 'link'
  color: string
  scale: number
}

const EnhancedCursor: React.FC = () => {
  const cursorOuterRef = useRef<HTMLDivElement>(null)
  const cursorInnerRef = useRef<HTMLDivElement>(null)
  const trailsRef = useRef<HTMLDivElement[]>([])
  const [isHovering, setIsHovering] = useState(false)
  const [isClicking, setIsClicking] = useState(false)
  const [isMobileDevice, setIsMobileDevice] = useState(false)
  const [cursorMode, setCursorMode] = useState<CursorConfig['mode']>('default')
  const rafRef = useRef<number | undefined>(undefined)
  const mousePosition = useRef({ x: 0, y: 0 })
  const lastScrollPosition = useRef({ x: 0, y: 0 })

  const cursorConfigs: Record<CursorConfig['mode'], CursorConfig> = {
    default: { mode: 'default', color: 'rgba(6, 182, 212, 0.3)', scale: 1 },
    highlight: { mode: 'highlight', color: 'rgba(147, 51, 234, 0.2)', scale: 1.5 },
    drag: { mode: 'drag', color: 'rgba(147, 51, 234, 0.4)', scale: 1.2 },
    text: { mode: 'text', color: 'rgba(59, 130, 246, 0.4)', scale: 0.8 },
    link: { mode: 'link', color: 'rgba(16, 185, 129, 0.4)', scale: 1.3 }
  }

  // Enhanced device detection
  const checkDevice = useCallback(() => {
    const isMobile =
      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
      (window.matchMedia && window.matchMedia("(max-width: 768px)").matches) ||
      (window.matchMedia && window.matchMedia("(hover: none)").matches) ||
      "ontouchstart" in window ||
      navigator.maxTouchPoints > 0

    setIsMobileDevice(isMobile)
    document.body.classList.toggle("is-mobile-device", isMobile)
  }, [])

  // Enhanced cursor movement with momentum and trails
  const handleMouseMove = useCallback(
    debounce((e: MouseEvent) => {
      const { clientX, clientY } = e
      mousePosition.current = { x: clientX, y: clientY }

      if (cursorOuterRef.current && cursorInnerRef.current) {
        if (!rafRef.current) {
          rafRef.current = requestAnimationFrame(() => {
            const scrollX = window.scrollX - lastScrollPosition.current.x
            const scrollY = window.scrollY - lastScrollPosition.current.y
            
            // Update cursor position with scroll compensation
            gsap.to(cursorOuterRef.current, {
              x: clientX + scrollX,
              y: clientY + scrollY,
              duration: 1,
              ease: "power3.out",
            })
            
            gsap.to(cursorInnerRef.current, {
              x: clientX + scrollX,
              y: clientY + scrollY,
              duration: 0.8,
              ease: "power3.out",
            })

            // Animate trails with delay
            trailsRef.current.forEach((trail, index) => {
              gsap.to(trail, {
                x: clientX + scrollX,
                y: clientY + scrollY,
                duration: 1 + index * 0.2,
                ease: "power3.out",
                opacity: 1 - (index * 0.2),
              })
            })

            rafRef.current = undefined
          })
        }
      }

      // Dynamic tilt based on movement and velocity
      const speed = Math.sqrt(e.movementX ** 2 + e.movementY ** 2)
      const maxTilt = speed * 0.5 // More dramatic tilt at higher speeds
      const tiltX = gsap.utils.clamp(-maxTilt, maxTilt, e.movementY * 2)
      const tiltY = gsap.utils.clamp(-maxTilt, maxTilt, -e.movementX * 2)

      if (cursorOuterRef.current) {
        gsap.to(cursorOuterRef.current, {
          rotateX: tiltX,
          rotateY: tiltY,
          duration: 0.8,
          ease: "power2.out"
        })
      }
    }, 5),
    []
  )

  // Enhanced click animations
  const handleMouseDown = useCallback(() => {
    setIsClicking(true)
    const config = cursorConfigs[cursorMode]
    
    gsap.to([cursorOuterRef.current, cursorInnerRef.current], {
      scale: config.scale * 0.8,
      duration: 0.2,
      ease: "power2.inOut"
    })

    // Create ripple effect
    const ripple = document.createElement('div')
    ripple.className = 'absolute w-8 h-8 bg-cyan-400/20 rounded-full pointer-events-none'
    ripple.style.left = `${mousePosition.current.x}px`
    ripple.style.top = `${mousePosition.current.y}px`
    document.body.appendChild(ripple)

    gsap.to(ripple, {
      scale: 3,
      opacity: 0,
      duration: 1,
      ease: "power2.out",
      onComplete: () => ripple.remove()
    })
  }, [cursorMode])

  const handleMouseUp = useCallback(() => {
    setIsClicking(false)
    const config = cursorConfigs[cursorMode]
    
    gsap.to([cursorOuterRef.current, cursorInnerRef.current], {
      scale: config.scale,
      duration: 0.3,
      ease: "elastic.out(1, 0.3)"
    })
  }, [cursorMode])

  // Enhanced element interactions
  const handleElementsHover = useCallback(() => {
    const interactiveElements = document.querySelectorAll(
      "button, a, input, textarea, [data-cursor-interact], [contenteditable='true']"
    )

    const handleEnter = (e: Event) => {
      const element = e.target as HTMLElement
      setIsHovering(true)
      
      // Determine cursor mode based on element type
      let newMode: CursorConfig['mode'] = 'default'
      if (element.tagName === 'A' || element.hasAttribute('data-cursor-link')) {
        newMode = 'link'
      } else if (element.tagName === 'BUTTON') {
        newMode = 'highlight'
      } else if (element.hasAttribute('contenteditable') || element.tagName === 'TEXTAREA') {
        newMode = 'text'
      } else if (element.hasAttribute('data-cursor-drag')) {
        newMode = 'drag'
      }
      
      setCursorMode(newMode)
      const config = cursorConfigs[newMode]

      gsap.to(cursorOuterRef.current, {
        scale: config.scale,
        backgroundColor: config.color,
        duration: 0.3,
        ease: "power2.out"
      })
      
      gsap.to(cursorInnerRef.current, {
        scale: config.scale * 0.5,
        backgroundColor: config.color,
        duration: 0.5,
        ease: "power2.out"
      })

      // Add magnetic effect for specific elements
      if (element.hasAttribute('data-cursor-magnetic')) {
        const rect = element.getBoundingClientRect()
        const centerX = rect.left + rect.width / 2
        const centerY = rect.top + rect.height / 2
        
        gsap.to([cursorOuterRef.current, cursorInnerRef.current], {
          x: centerX,
          y: centerY,
          duration: 0.5,
          ease: "power3.out"
        })
      }
    }

    const handleLeave = () => {
      setIsHovering(false)
      setCursorMode('default')
      const config = cursorConfigs.default

      gsap.to([cursorOuterRef.current, cursorInnerRef.current], {
        scale: config.scale,
        backgroundColor: config.color,
        duration: 0.3,
        ease: "power2.out"
      })
    }

    interactiveElements.forEach((element) => {
      element.addEventListener("mouseenter", handleEnter)
      element.addEventListener("mouseleave", handleLeave)
    })

    return () => {
      interactiveElements.forEach((element) => {
        element.removeEventListener("mouseenter", handleEnter)
        element.removeEventListener("mouseleave", handleLeave)
      })
    }
  }, [])

  // Handle scroll position updates
  const handleScroll = useCallback(() => {
    lastScrollPosition.current = {
      x: window.scrollX,
      y: window.scrollY
    }
  }, [])

  useEffect(() => {
    checkDevice()
    window.addEventListener("resize", checkDevice)
    window.addEventListener("scroll", handleScroll)

    if (!isMobileDevice) {
      // Initialize parallax rotation effect
      const rotateTl = gsap.timeline({ repeat: -1, defaults: { ease: "none" } })
      rotateTl.to(cursorOuterRef.current, {
        rotate: 360,
        duration: 8,
        ease: "none",
      })

      // Create cursor trails
      const trailCount = 3
      for (let i = 0; i < trailCount; i++) {
        const trail = document.createElement('div')
        trail.className = 'fixed pointer-events-none z-[9998] w-6 h-6 rounded-full bg-cyan-400/20 backdrop-blur-sm transform'
        document.body.appendChild(trail)
        trailsRef.current.push(trail)
      }

      // Add event listeners
      window.addEventListener("mousemove", handleMouseMove)
      window.addEventListener("mousedown", handleMouseDown)
      window.addEventListener("mouseup", handleMouseUp)

      // Initialize interactions
      const cleanupHover = handleElementsHover()

      // Cleanup function
      return () => {
        window.removeEventListener("resize", checkDevice)
        window.removeEventListener("scroll", handleScroll)
        window.removeEventListener("mousemove", handleMouseMove)
        window.removeEventListener("mousedown", handleMouseDown)
        window.removeEventListener("mouseup", handleMouseUp)
        cleanupHover()
        rotateTl.kill()
        if (rafRef.current) {
          cancelAnimationFrame(rafRef.current)
        }
        trailsRef.current.forEach(trail => trail.remove())
      }
    }
  }, [handleMouseMove, handleMouseDown, handleMouseUp, handleElementsHover, isMobileDevice, checkDevice, handleScroll])

  if (isMobileDevice) return null

  return (
    <>
      {/* Outer cursor */}
      <div
        ref={cursorOuterRef}
        className="fixed pointer-events-none z-[9999] mix-blend-difference w-12 h-12 -ml-6 -mt-6 transform will-change-transform"
      >
        <div className="absolute inset-0">
          {[...Array(4)].map((_, i) => (
            <div
              key={`ring-${i}`}
              className="absolute inset-0 rounded-full border border-cyan-400/40"
              style={{
                transform: `rotate(${i * 90}deg)`,
                animation: `spin${i + 1} 4s linear infinite`,
              }}
            />
          ))}
        </div>
        
        {/* Cursor mode indicator */}
        <div className="absolute inset-0 flex items-center justify-center">
          {cursorMode === 'drag' && <MoveLeftIcon className="w-4 h-4 text-cyan-400/50" />}
        </div>
      </div>

      {/* Inner cursor */}
      <div
        ref={cursorInnerRef}
        className="fixed w-4 h-4 pointer-events-none z-[9999] rounded-full bg-cyan-400/30 backdrop-blur-sm -ml-2 -mt-2 transform will-change-transform mix-blend-difference"
      >
        <div
          className={`absolute top-1/2 left-1/2 w-1 h-1 -ml-0.5 -mt-0.5 rounded-full bg-cyan-400 transition-transform duration-200 ease-in-out ${
            isClicking ? "scale-150" : "scale-100"
          }`}
        />
      </div>

      <style jsx global>{`
        @media (hover: hover) {
          * {
            cursor: none !important;
          }
        }

        .is-mobile-device * {
          cursor: auto !important;
        }

        @keyframes spin1 {
          0% { transform: rotate(0deg) scale(1); }
          50% { transform: rotate(180deg) scale(1.2); }
          100% { transform: rotate(360deg) scale(1); }
        }

        @keyframes spin2 {
          0% { transform: rotate(90deg) scale(1.1); }
          50% { transform: rotate(270deg) scale(1); }
          100% { transform: rotate(450deg) scale(1.1); }
        }

        @keyframes spin3 {
          0% { transform: rotate(180deg) scale(1.2); }
          50% { transform: rotate(360deg) scale(1); }
          100% { transform: rotate(540deg) scale(1.2); }
        }

        @keyframes spin4 {
          0% { transform: rotate(270deg) scale(1); }
          50% { transform: rotate(450deg) scale(1.1); }
          100% { transform: rotate(630deg) scale(1); }
        }

        @media (pointer: coarse) {
          .cursor-outer,
          .cursor-inner {
            display: none !important;
          }
          
          button, 
          a, 
          input[type="button"] {
            min-height: 44px;
            min-width: 44px;
            padding: 12px;
          }

          .interactive:active {
            transform: scale(0.98);
          }
        }

        .cursor-magnetic {
          transition: transform 0.3s cubic-bezier(0.75, -0.27, 0.3, 1.33);
        }

        .cursor-magnetic:hover {
          transform: scale(1.1);
        }

        [data-cursor-interact]:hover {
          transition: transform 0.2s ease;
          transform: scale(1.05);
        }

        /* Enhanced hover effects for different cursor modes */
        [data-cursor-mode="link"]:hover {
          color: rgb(16, 185, 129);
          transition: color 0.3s ease;
        }

        [data-cursor-mode="highlight"]:hover {
          background-color: rgba(255, 102, 0, 0.1);
          transition: background-color 0.3s ease;
        }

        [data-cursor-mode="drag"]:hover {
          cursor: grab !important;
        }

        [data-cursor-mode="drag"]:active {
          cursor: grabbing !important;
          transform: scale(0.98);
        }

        /* Custom animations for cursor trails */
        @keyframes fadeTrail {
          0% { opacity: 0.3; transform: scale(1); }
          100% { opacity: 0; transform: scale(0.8); }
        }

        /* Smooth scroll behavior */
        html {
          scroll-behavior: smooth;
        }

        /* Improved focus styles */
        :focus-visible {
          outline: 2px solid rgb(6, 182, 212);
          outline-offset: 2px;
        }

        /* Performance optimizations */
        .will-change-transform {
          will-change: transform;
          transform: translateZ(0);
          backface-visibility: hidden;
        }

        /* Reduced motion preferences */
        @media (prefers-reduced-motion: reduce) {
          *, 
          *::before,
          *::after {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
            scroll-behavior: auto !important;
          }
        }
      `}</style>

      {/* Enhanced accessibility features */}
      <div aria-hidden="true" className="sr-only">
        Custom cursor indicator - current mode: {cursorMode}
      </div>
    </>
  )
}

export default EnhancedCursor

================
File: src/components/Dashboard/Decorative.tsx
================
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";


export const FloatingHexagon = ({ delay = 0 }) => (
  <motion.div
    className="absolute"
    style={{
      top: `${Math.random() * 100}%`,
      left: `${Math.random() * 100}%`,
    }}
    initial={{ opacity: 0, scale: 0 }}
    animate={{
      opacity: [0.1, 0.3, 0.1],
      scale: [1, 1.2, 1],
      rotate: [0, 360],
    }}
    transition={{
      duration: 20,
      delay,
      repeat: Number.POSITIVE_INFINITY,
      ease: "linear",
    }}
  >
    <Hexagon className="w-8 h-8 text-cyan-500/10" />
  </motion.div>
)

export const CodeBlock = () => {
    const codeLines = [
        "const room = new CodeRoom();",
        "room.onJoin((user) => {",
        "    console.log(`${user} joined`);",
        "});",
        "",
        "room.onMessage((msg) => {",
        "    collaborators.push(msg);",
        "});",
    ]

    return (
        <motion.div
            className="bg-slate-800/70 rounded-lg p-4 font-mono text-sm text-cyan-300 overflow-hidden relative whitespace-pre"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.5 }}
        >
            {codeLines.map((line, index) => (
                <motion.div
                    key={index}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                >
                    {line}
                </motion.div>
            ))}
            <motion.div
                className="absolute top-0 left-0 w-full h-full bg-gradient-to-r from-cyan-500/10 to-blue-500/10"
                animate={{
                    opacity: [0.5, 0.8, 0.5],
                }}
                transition={{
                    duration: 2,
                    repeat: Number.POSITIVE_INFINITY,
                    repeatType: "reverse",
                }}
            />
        </motion.div>
    )
}

export const AnimatedLogo = () => (
  <motion.div
    className="relative w-12 h-12"
    animate={{
      rotate: [0, 360],
    }}
    transition={{
      duration: 20,
      repeat: Number.POSITIVE_INFINITY,
      ease: "linear",
    }}
  >
    <motion.div
      className="absolute inset-0"
      animate={{
        scale: [1, 1.2, 1],
        opacity: [0.7, 1, 0.7],
      }}
      transition={{
        duration: 3,
        repeat: Number.POSITIVE_INFINITY,
        repeatType: "reverse",
      }}
    >
      <Hexagon className="w-full h-full text-cyan-400" />
    </motion.div>
    <motion.div
      className="absolute inset-0"
      animate={{
        rotate: [0, -360],
      }}
      transition={{
        duration: 40,
        repeat: Number.POSITIVE_INFINITY,
        ease: "linear",
      }}
    >
      <Hexagon className="w-full h-full text-blue-400 opacity-50" />
    </motion.div>
  </motion.div>
)

export const PulsingCircle = () => (
  <div className="relative">
    <motion.div
      className="absolute inset-0 bg-cyan-500 rounded-full"
      animate={{
        scale: [1, 1.5, 1],
        opacity: [0.5, 0, 0.5],
      }}
      transition={{
        duration: 2,
        repeat: Number.POSITIVE_INFINITY,
        repeatType: "loop",
      }}
    />
    <div className="relative bg-cyan-500 w-3 h-3 rounded-full" />
  </div>
)

================
File: src/components/Dashboard/FaqSection.tsx
================
"use client"

import { motion, AnimatePresence } from "framer-motion"
import { Plus, Minus } from "lucide-react"
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"

const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.2,
    },
  },
}

const itemVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      type: "spring",
      stiffness: 100,
      damping: 15,
    },
  },
}

const faqData = [
  {
    question: "Do I need to install anything first?",
    answer: "No, CodeConnect runs entirely in your browser. No installation required!",
  },
  {
    question: "What programming languages does CodeConnect support?",
    answer: "We currently support JavaScript, Python, Java, and C++ with full syntax highlighting and error checking.",
  },
  {
    question: "Will my code be saved if I close the browser?",
    answer: "Your code is temporary and not saved on our servers. Make sure to copy or download before closing.",
  },
  {
    question: "Can I customize the editor appearance?",
    answer: "Yes! You can customize the font size, switch themes, and adjust the layout to your liking.",
  },
  {
    question: "How can I use the AI assistant effectively?",
    answer: "The AI assistant can help debug code, explain segments, suggest optimizations, answer questions, and generate examples—all while being contextually aware of your codebase.",
  },
] as const

export default function FAQSection() {
  return (
    <section className="py-16 px-4 md:px-6 lg:px-8 max-w-5xl mx-auto">
      <motion.div
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true, margin: "-100px" }}
        variants={containerVariants}
        className="text-center mb-12"
      >
        <motion.span
          variants={itemVariants}
          className="text-orange-400 font-medium mb-4 block"
        >
          FREQUENTLY ASKED QUESTIONS
        </motion.span>
        <motion.h2
          variants={itemVariants}
          className="text-4xl md:text-5xl font-bold text-white"
        >
          You ask? We{" "}
          <span className="italic font-serif text-slate-300">answer</span>
        </motion.h2>
      </motion.div>

      <motion.div
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        viewport={{ once: true, margin: "-100px" }}
        transition={{ duration: 0.4 }}
        className="bg-slate-800/50 backdrop-blur-xl rounded-2xl shadow-lg p-6 md:p-8"
      >
        <Accordion type="single" collapsible className="space-y-4">
          <AnimatePresence>
            {faqData.map((faq, index) => (
              <motion.div
                key={`item-${index + 1}`}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true, margin: "-50px" }}
                transition={{
                  delay: index * 0.1,
                  type: "spring",
                  stiffness: 100,
                  damping: 15,
                }}
              >
                <AccordionItem value={`item-${index + 1}`} className="border-none">
                  <AccordionTrigger className="flex justify-between items-center w-full py-4 text-left text-lg font-semibold text-white hover:no-underline">
                    {({ isExpanded }) => (
                      <>
                        <span>{faq.question}</span>
                        <motion.div
                          className="shrink-0 ml-4 p-2 rounded-full border border-slate-700"
                          animate={{ rotate: isExpanded ? 180 : 0 }}
                          transition={{ type: "spring", stiffness: 200, damping: 20 }}
                        >
                          {isExpanded ? (
                            <Minus className="h-4 w-4 text-orange-400" />
                          ) : (
                            <Plus className="h-4 w-4 text-slate-400" />
                          )}
                        </motion.div>
                      </>
                    )}
                  </AccordionTrigger>

                  <AccordionContent className="text-slate-300 pt-2 pb-4 italic">
                    <motion.div
                      initial={{ opacity: 0, y: -10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ type: "spring", stiffness: 150, damping: 15 }}
                    >
                      "{faq.answer}"
                    </motion.div>
                  </AccordionContent>
                </AccordionItem>
              </motion.div>
            ))}
          </AnimatePresence>
        </Accordion>
      </motion.div>
    </section>
  )
}

================
File: src/components/Dashboard/Header.tsx
================
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Menu, X } from 'lucide-react';
import { AnimatedLogo } from './Decorative';
import UserProfile from './UserProfile';

export const MobileNav = () => {
  const [isOpen, setIsOpen] = useState(false);

  const menuItems = ["Features", "How It Works", "FAQ"];

  const menuVariants = {
    closed: {
      opacity: 0,
      scale: 0.95,
      transition: {
        staggerChildren: 0.05,
        staggerDirection: -1
      }
    },
    open: {
      opacity: 1,
      scale: 1,
      transition: {
        staggerChildren: 0.05,
        delayChildren: 0.2
      }
    }
  };

  const itemVariants = {
    closed: { opacity: 0, x: -20 },
    open: { opacity: 1, x: 0 }
  };

  return (
    <>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="lg:hidden relative z-50 p-2 text-white top-0"
      >
        <AnimatePresence mode="wait">
          {isOpen ? (
            <motion.div
              key="close"
              initial={{ opacity: 0, rotate: -45 }}
              animate={{ opacity: 1, rotate: 0 }}
              exit={{ opacity: 0, rotate: 45 }}
              transition={{ duration: 0.2 }}
            >
              <X className="w-6 h-6" />
            </motion.div>
          ) : (
            <motion.div
              key="menu"
              initial={{ opacity: 0, rotate: 45 }}
              animate={{ opacity: 1, rotate: 0 }}
              exit={{ opacity: 0, rotate: -45 }}
              transition={{ duration: 0.2 }}
            >
              <Menu className="w-6 h-6" />
            </motion.div>
          )}
        </AnimatePresence>
      </button>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 z-40 lg:hidden"
          >
            <motion.div
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.95 }}
              transition={{ duration: 0.3 }}
              className="absolute inset-0 bg-slate-900/90 backdrop-blur-xl"
            >
              <motion.nav
                variants={menuVariants}
                initial="closed"
                animate="open"
                exit="closed"
                className="flex flex-col items-center mt-28 justify-top h-full space-y-8"
              >
                {menuItems.map((item) => (
                  <motion.a
                    key={item}
                    href={`#${item.toLowerCase().replace(/\s+/g, "-")}`}
                    variants={itemVariants}
                    onClick={() => setIsOpen(false)}
                    className="text-2xl font-medium text-white relative group"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    {item}
                    <motion.div
                      className="absolute bottom-0 left-0 w-0 h-0.5 bg-gradient-to-r from-cyan-400 to-blue-500 group-hover:w-full"
                      transition={{ duration: 0.3 }}
                      layoutId={`underline-${item}`}
                    />
                  </motion.a>
                ))}
              </motion.nav>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

// Modified header section
const Header = () => {
  return (
    <motion.header
      className="flex items-center justify-between mb-16"
      initial={{ opacity: 0, y: -50 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.8, ease: "easeOut" }}
    >
      <motion.div
        className="flex items-center space-x-2"
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <AnimatedLogo />
        <motion.span
          className="text-3xl font-bold bg-gradient-to-r from-cyan-400 to-blue-500 text-transparent bg-clip-text"
          animate={{
            backgroundPosition: ["0%", "100%", "0%"],
          }}
          transition={{
            duration: 3,
            repeat: Infinity,
            repeatType: "reverse",
          }}
        >
          CodeConnect
        </motion.span>
      </motion.div>
      
      <div className="flex items-center">
        {/* Desktop Navigation */}
        <motion.nav
        className="hidden lg:flex items-center space-x-6"
        variants={{
          hidden: { opacity: 0, y: -20 },
          visible: {
            opacity: 1,
            y: 0,
            transition: {
              staggerChildren: 0.1,
            },
          },
        }}
        initial="hidden"
        animate="visible"
      >
          {["Features", "How It Works", "FAQ"].map((item) => (
            <motion.a
              key={item}
              href={`#${item.toLowerCase().replace(/\s+/g, "-")}`}
              className="text-slate-300 hover:text-white transition-colors relative"
              variants={{
                hidden: { opacity: 0, y: -20 },
                visible: { opacity: 1, y: 0 },
              }}
              whileHover={{ scale: 1.1 }}
            >
              {item}
              <motion.div
                className="absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-cyan-400 to-blue-500"
                initial={{ scaleX: 0 }}
                whileHover={{ scaleX: 1 }}
                transition={{ duration: 0.3 }}
              />
            </motion.a>
          ))}

        <div className="ml-4">
          <UserProfile />
        </div>
        </motion.nav>
        
        {/* Mobile Navigation */}
        <div className="lg:hidden flex items-center gap-4">
        <UserProfile />
        <MobileNav />
      </div>      </div>
    </motion.header>
  );
};

export default Header;

================
File: src/components/Dashboard/LoadinAnimation.tsx
================
import React, { useEffect, useState, useMemo, memo, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface ModernLoaderProps {
  onComplete?: () => void;
  duration?: number;
  entranceDelay?: number;
}

// Performance optimization: Move constants outside component
const RADIUS = 90;
const STROKE_WIDTH = 2;
const CIRCUMFERENCE = 2 * Math.PI * RADIUS;
const PULSING_LAYERS = 4;
const SUBTLE_CIRCLES = 3;
const ORBITING_DOTS = 12;

// Precompute static arrays
const pulsingLayers = Array.from({ length: PULSING_LAYERS });
const subtleCircles = Array.from({ length: SUBTLE_CIRCLES });
const orbitingDots = Array.from({ length: ORBITING_DOTS }, (_, i) => {
  const angle = (i * 2 * Math.PI) / ORBITING_DOTS;
  return {
    top: 50 + 40 * Math.sin(angle),
    left: 50 + 40 * Math.cos(angle),
    delay: i * 0.15,
  };
});

// Optimized progress hook with RAF throttling
function useProgress(duration: number, start: boolean, onComplete?: () => void): number {
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    if (!start) return;
    
    let lastTimestamp: number;
    let animationFrame: number;

    const updateProgress = (timestamp: number) => {
      if (!lastTimestamp) lastTimestamp = timestamp;
      const elapsed = timestamp - lastTimestamp;
      const newProgress = Math.min((elapsed / duration) * 100, 100);
      
      setProgress(newProgress);

      if (newProgress < 100) {
        animationFrame = requestAnimationFrame(updateProgress);
      } else {
        onComplete?.();
      }
    };

    animationFrame = requestAnimationFrame(updateProgress);
    return () => cancelAnimationFrame(animationFrame);
  }, [duration, onComplete, start]);

  return progress;
}

// Memoized gradient component
const ProgressGradient = memo(() => (
  <defs>
    <linearGradient id="progressGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stopColor="#14b8a6">
        <animate
          attributeName="stop-color"
          values="#14b8a6; #0ea5e9; #14b8a6"
          dur="2s"
          repeatCount="indefinite"
        />
      </stop>
      <stop offset="100%" stopColor="#0ea5e9">
        <animate
          attributeName="stop-color"
          values="#0ea5e9; #14b8a6; #0ea5e9"
          dur="2s"
          repeatCount="indefinite"
        />
      </stop>
    </linearGradient>
  </defs>
));

// Main optimized component
export const ModernLoader: React.FC<ModernLoaderProps> = memo(
  ({ onComplete, duration = 3000, entranceDelay = 1000 }) => {
    const [isVisible, setIsVisible] = useState(false);
    const [startProgress, setStartProgress] = useState(false);

    // Handle entrance animation
    useEffect(() => {
      const showTimer = setTimeout(() => setIsVisible(true), entranceDelay);
      const progressTimer = setTimeout(() => setStartProgress(true), entranceDelay + 500);
      
      return () => {
        clearTimeout(showTimer);
        clearTimeout(progressTimer);
      };
    }, [entranceDelay]);

    // Progress logic with delayed start
    const progress = useProgress(duration, startProgress, onComplete);

    // Memoize stroke offset calculation
    const strokeDashoffset = useMemo(
      () => CIRCUMFERENCE - (progress / 100) * CIRCUMFERENCE,
      [progress]
    );

    // Entrance animation variants
    const containerVariants = {
      hidden: { y: 50, opacity: 0 },
      visible: { 
        y: 0, 
        opacity: 1,
        transition: { 
          duration: 0.8,
          ease: [0.16, 1, 0.3, 1], // Custom bezier curve for smooth entrance
        }
      },
      exit: { 
        y: 50, 
        opacity: 0,
        transition: { duration: 0.5 }
      }
    };

    return (
      <AnimatePresence>
        {isVisible && (
          <motion.div
            className="relative flex items-center justify-center w-68 h-68"
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
          >
            {/* Optimized background with reduced blur */}
            <div className="absolute inset-0 bg-gradient-to-br from-teal-800/30 to-blue-800/30 backdrop-blur-sm rounded-full" />

            {/* Pulsing layers with reduced repaints */}
            {pulsingLayers.map((_, i) => (
              <motion.div
                key={i}
                className="absolute inset-0 rounded-full"
                initial={{ boxShadow: '0 0 0 rgba(56, 189, 248, 0)' }}
                animate={{ boxShadow: '0 0 60px rgba(56, 189, 248, 0.2)' }}
                transition={{
                  duration: 1.5,
                  repeat: Infinity,
                  repeatType: 'reverse',
                  delay: i * 0.2,
                }}
              />
            ))}

            {/* Optimized SVG with reduced nodes */}
            <motion.svg
              className="transform -rotate-90 w-56 h-56"
              viewBox={`0 0 ${(RADIUS + STROKE_WIDTH) * 2} ${(RADIUS + STROKE_WIDTH) * 2}`}
              animate={{ rotate: 360 }}
              transition={{ repeat: Infinity, duration: 8, ease: 'linear' }}
            >
              {subtleCircles.map((_, i) => (
                <circle
                  key={i}
                  cx={RADIUS + STROKE_WIDTH}
                  cy={RADIUS + STROKE_WIDTH}
                  r={RADIUS - i * 4}
                  className="stroke-teal-600/30"
                  fill="none"
                  strokeWidth={0.5}
                />
              ))}

              <motion.circle
                cx={RADIUS + STROKE_WIDTH}
                cy={RADIUS + STROKE_WIDTH}
                r={RADIUS}
                fill="none"
                stroke="url(#progressGradient)"
                strokeWidth={STROKE_WIDTH}
                strokeDasharray={CIRCUMFERENCE}
                strokeDashoffset={strokeDashoffset}
                strokeLinecap="round"
              />

              <ProgressGradient />
            </motion.svg>

            {/* Optimized percentage display */}
            <motion.div 
              className="absolute flex flex-col items-center justify-center"
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.2, duration: 0.3 }}
            >
              <div className="relative flex items-baseline">
                <motion.span
                  className="text-7xl text-opacity-55 italic font-thin text-transparent bg-clip-text bg-gradient-to-r from-teal-400 to-blue-400"
                >
                  {Math.round(progress)}
                </motion.span>
                <span className="text-3xl font-light text-teal-300/80 ml-1">
                  %
                </span>
              </div>

              <div className="text-base text-slate-300/80 mt-3 font-light tracking-wider">
                <span className="italic">Loading</span>
                <motion.span
                  animate={{ opacity: [0, 1, 0] }}
                  transition={{ duration: 0.8, repeat: Infinity }}
                >
                  ...
                </motion.span>
              </div>
            </motion.div>

            {/* Optimized orbiting dots with reduced repaints */}
            {orbitingDots.map((dot, i) => (
              <motion.div
                key={i}
                className="absolute w-1.5 h-1.5 rounded-full"
                style={{
                  top: `${dot.top}%`,
                  left: `${dot.left}%`,
                  background: 'radial-gradient(circle, rgba(45, 212, 191, 0.6) 0%, rgba(45, 212, 191, 0) 70%)',
                }}
                animate={{ scale: [0, 1.2, 0], opacity: [0, 1, 0] }}
                transition={{ 
                  duration: 2, 
                  repeat: Infinity, 
                  delay: dot.delay,
                  ease: 'easeInOut'
                }}
              />
            ))}
          </motion.div>
        )}
      </AnimatePresence>
    );
  }
);

================
File: src/components/Dashboard/LoadingScreen.tsx
================
// components/LoadingScreen.tsx
"use client"
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ModernLoader } from './LoadinAnimation';

export default function LoadingScreen() {
  const [isVisible, setIsVisible] = useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsVisible(false);
    }, 6000);
    return () => clearTimeout(timer);
  }, []);

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div 
          initial={{ opacity: 1 }}
          exit={{ opacity: 1 }}
          className="fixed inset-0 bg-gradient-to-b from-slate-900 to-slate-900 flex items-center justify-center z-50"
        >
          <ModernLoader onComplete={() => setIsVisible(false)} />
        </motion.div>
      )}
    </AnimatePresence>
  );
}

================
File: src/components/Dashboard/ScrollToTop.tsx
================
// "use client";
// import React, { useState, useEffect } from 'react';
// import { ArrowUp } from 'lucide-react';

// const ScrollToTop = () => {
//   const [isVisible, setIsVisible] = useState(false);
//   const [isHovered, setIsHovered] = useState(false);

//   // Show button when page is scrolled up to given distance
//   const toggleVisibility = () => {
//     if (window.pageYOffset > 300) {
//       setIsVisible(true);
//     } else {
//       setIsVisible(false);
//     }
//   };

//   // Smooth scroll to top with easing
//   const scrollToTop = () => {
//     window.scrollTo({
//       top: 0,
//       behavior: 'smooth'
//     });
//   };

//   useEffect(() => {
//     window.addEventListener('scroll', toggleVisibility);
//     return () => {
//       window.removeEventListener('scroll', toggleVisibility);
//     };
//   }, []);

//   return (
//     <div className={`
//       fixed
//       bottom-8
//       right-8
//       transition-all
//       duration-500
//       ease-in-out
//       transform
//       ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-20 opacity-0 pointer-events-none'}
//     `}>
//       <button
//         onClick={scrollToTop}
//         onMouseEnter={() => setIsHovered(true)}
//         onMouseLeave={() => setIsHovered(false)}
//         className={`
//           group
//           relative
//           p-4
//           bg-gray-900
//           hover:bg-gray-800
//           text-gray-300
//           hover:text-white
//           rounded-full
//           shadow-lg
//           cursor-pointer
//           transition-all
//           duration-300
//           ease-in-out
//           hover:shadow-2xl
//           focus:outline-none
//           focus:ring-2
//           focus:ring-purple-500
//           focus:ring-opacity-50
//           z-50
//         `}
//         aria-label="Scroll to top"
//       >
//         {/* Pulse effect background */}
//         <span className={`
//           absolute
//           inset-0
//           rounded-full
//           bg-purple-500
//           opacity-20
//           transition-transform
//           duration-300
//           ease-in-out
//           ${isHovered ? 'scale-125' : 'scale-0'}
//         `}></span>
        
//         {/* Main icon */}
//         <ArrowUp className={`
//           w-6
//           h-6
//           transform
//           transition-all
//           duration-300
//           ease-in-out
//           ${isHovered ? 'translate-y-0 scale-110' : 'translate-y-1'}
//           group-hover:animate-bounce
//         `} />
        
//         {/* Glow effect */}
//         <div className={`
//           absolute
//           inset-0
//           rounded-full
//           bg-purple-500
//           filter
//           blur-xl
//           opacity-0
//           transition-opacity
//           duration-300
//           group-hover:opacity-20
//         `}></div>
//       </button>
      
//       {/* Tooltip */}
//       <div className={`
//         absolute
//         bottom-full
//         left-1/2
//         transform
//         -translate-x-1/2
//         mb-2
//         px-3
//         py-1
//         bg-gray-900
//         text-white
//         text-sm
//         rounded-md
//         shadow-lg
//         transition-all
//         duration-300
//         ${isHovered ? 'opacity-100 -translate-y-1' : 'opacity-0 translate-y-1 pointer-events-none'}
//       `}>
//         Back to top
//       </div>
//     </div>
//   );
// };

// export default ScrollToTop;

================
File: src/components/Dashboard/Slider.tsx
================
"use client"

import React, { useState } from 'react'
import { motion, AnimatePresence } from "framer-motion"

const phrases = ["Code Together", "Build Faster", "Ship Better", "Scale Higher", "Dream Bigger"]

export const CodeConnectSlider = () => {
  const [isHovered, setIsHovered] = useState(false)

  return (
    <div 
      className="w-full overflow-hidden bg-slate-900/50 py-32 relative group"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* Subtle background pulse */}
      <motion.div
        className="absolute inset-0 opacity-10"
        animate={{
          opacity: [0.1, 0.15, 0.1],
        }}
        transition={{
          duration: 4,
          repeat: Number.POSITIVE_INFINITY,
          ease: "easeInOut",
        }}
      />

      {/* Main text slider */}
      <div className="relative">
        <motion.div
          className="whitespace-nowrap"
          animate={{
            x: [0, -1920],
          }}
          transition={{
            x: {
              repeat: Number.POSITIVE_INFINITY,
              repeatType: "loop",
              duration: isHovered ? 35 : 25, // Slower base speed with smoother hover transition
              ease: "linear",
            },
          }}
        >
          <div className="inline-flex items-center">
            {[...phrases, ...phrases].map((text, i) => (
              <motion.div
                key={i}
                className="mx-4 inline-flex items-center text-[120px] font-bold tracking-tighter"
                whileHover={{
                  scale: 1.02,
                  transition: {
                    type: "spring",
                    stiffness: 200,
                    damping: 15
                  }
                }}
              >
                <motion.span
                  className="bg-gradient-to-r from-white via-white to-white/50 bg-clip-text text-transparent"
                  initial={{ opacity: 0.9 }}
                  whileHover={{
                    opacity: 1,
                    transition: {
                      duration: 0.2
                    }
                  }}
                >
                  {text}
                </motion.span>
                <motion.span
                  className="mx-8 text-slate-600"
                  animate={{
                    opacity: [0.3, 0.5],
                  }}
                  transition={{
                    duration: 2,
                    repeat: Number.POSITIVE_INFINITY,
                    repeatType: "reverse",
                    ease: "easeInOut"
                  }}
                >
                  /
                </motion.span>
              </motion.div>
            ))}
          </div>
        </motion.div>
      </div>

      {/* Subtle edge fading */}
      <div className="absolute top-0 left-0 w-40 h-full bg-gradient-to-r from-slate-900/50 to-transparent pointer-events-none" />
      <div className="absolute top-0 right-0 w-40 h-full bg-gradient-to-l from-slate-900/50 to-transparent pointer-events-none" />
    </div>
  )
}

export default CodeConnectSlider

================
File: src/components/Dashboard/UserProfile.tsx
================
import { useUser } from "@clerk/nextjs";
import { useClerk } from "@clerk/nextjs";
import { useEffect, useState } from "react";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Input } from "@/components/ui/input";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { LogOut, UserCircle, Settings, Camera, Edit, Bell } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { toast } from "sonner";
import { GlowingButton } from "../Dashboard/buttons/GlowingButton";
import { FuturisticInput } from "../Dashboard/buttons/FuturisticInput";
import Image from "next/image";

const UserProfile = () => {
  const { user } = useUser();
  const { signOut } = useClerk();

  const [showProfileDialog, setShowProfileDialog] = useState(false);
  const [showSettingsDialog, setShowSettingsDialog] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [profileData, setProfileData] = useState({
    fullName: user?.fullName || user?.username || '',
    username: user?.username || '',
  });
  const [isLoading, setIsLoading] = useState(false);

  if (!user) return null;

  const fullName = user.fullName || user.username || 'User';
  const fallbackText = fullName[0].toUpperCase();
  
  const handleSignOut = async () => {
    try {
      await signOut();
      toast.success("Signed out successfully");
    } catch (error) {
      toast.error("Failed to sign out");
    }
  };

  const handleProfileUpdate = async () => {
    setIsLoading(true);
    try {
      await user.update({
        firstName: profileData.fullName.split(' ')[0],
        lastName: profileData.fullName.split(' ').slice(1).join(' '),
        username: profileData.username,
      });
      toast.success("Profile updated successfully");
      setIsEditing(false);
    } catch (error) {
      toast.error("Failed to update profile");
    } finally {
      setIsLoading(false);
    }
  };

  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    try {
      setIsLoading(true);
      await user.setProfileImage({ file });
      toast.success("Profile image updated");
    } catch (error) {
      toast.error("Failed to update profile image");
    } finally {
      setIsLoading(false);
    }
  };


interface ProfileDialogProps {
  isOpen: boolean;
  onClose: () => void;
  user: any;  // Using any for now, can be typed properly with Clerk types
}

const getUserData = (user: any) => {
  // Check if user has external accounts
  const externalAccounts = user?.externalAccounts || [];
  const linkedInAccount = externalAccounts.find(
    (account: any) => account.provider.toLowerCase() === 'linkedin'
  );

  // If LinkedIn account exists, use its data
  if (linkedInAccount) {
    // Try to get data from externalProfile first
    const externalProfile = linkedInAccount.externalProfile || {};
    return {
      firstName: externalProfile.firstName || linkedInAccount.firstName || user.firstName || "",
      lastName: externalProfile.lastName || linkedInAccount.lastName || user.lastName || "",
      profileImageUrl: externalProfile.imageUrl || linkedInAccount.imageUrl || user.imageUrl,
      email: user.primaryEmailAddress?.emailAddress,
      username: linkedInAccount.username || user.username || "",
      provider: "LinkedIn"
    };
  }

  // Default to regular user data
  return {
    firstName: user.firstName || "",
    lastName: user.lastName || "",
    profileImageUrl: user.imageUrl,
    email: user.primaryEmailAddress?.emailAddress,
    username: user.username || "",
    provider: "Email"
  };
};

const ProfileDialog = ({ isOpen, onClose, user }: ProfileDialogProps) => {
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  
  // Get user data including LinkedIn profile if available
  const userData = getUserData(user);
  const [firstName, setFirstName] = useState(userData.firstName);
  const [lastName, setLastName] = useState(userData.lastName);

  useEffect(() => {
    const newUserData = getUserData(user);
    setFirstName(newUserData.firstName);
    setLastName(newUserData.lastName);
  }, [user]);

  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    try {
      setIsLoading(true);
      await user.setProfileImage({ file });
      toast.success("Profile image updated!");
    } catch (error) {
      console.error('Image upload error:', error);
      toast.error("Failed to update profile image");
    } finally {
      setIsLoading(false);
    }
  };

  const handleProfileUpdate = async () => {
    try {
      setIsLoading(true);
      await user.update({
        firstName,
        lastName,
      });
      toast.success("Profile updated successfully!");
      setIsEditing(false);
    } catch (error) {
      console.error('Profile update error:', error);
      toast.error("Failed to update profile");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px] bg-gradient-to-br from-gray-900 to-gray-800 border-gray-800">
        <DialogHeader>
          <DialogTitle className="text-white text-xl">Profile Settings</DialogTitle>
        </DialogHeader>
        
        <div className="py-4">
          <div className="flex flex-col items-center space-y-6">
            {/* Avatar with upload */}
            <div className="relative group">
              <Avatar className="h-24 w-24 ring-4 ring-offset-4 ring-offset-gray-900 ring-blue-500/50 group-hover:ring-blue-500 transition-all duration-300">
                <AvatarImage src={userData.profileImageUrl} alt={`${userData.firstName} ${userData.lastName}`} />
                <AvatarFallback className="bg-gradient-to-br from-blue-500 to-purple-500 text-2xl">
                  {userData.firstName?.[0]?.toUpperCase()}
                </AvatarFallback>
              </Avatar>
              
              {userData.provider !== "LinkedIn" && (
                <label className="absolute bottom-0 right-0 p-2 bg-blue-500 rounded-full text-white opacity-0 group-hover:opacity-100 transition-all duration-300 cursor-pointer hover:bg-blue-600">
                  <Camera className="h-4 w-4" />
                  <input 
                    type="file" 
                    className="hidden" 
                    accept="image/*"
                    onChange={handleImageUpload}
                    disabled={isLoading}
                  />
                </label>
              )}
            </div>

            {/* Profile Info */}
            <div className="w-full space-y-6 relative">
              {isEditing ? (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className="space-y-6"
                >
                  {/* Modern First Name Input */}
                  <div className="relative group">
                    <input
                      type="text"
                      value={firstName}
                      onChange={(e) => setFirstName(e.target.value)}
                      placeholder=" "
                      disabled={isLoading}
                      className="w-full h-12 px-4 text-white bg-gray-800/50 rounded-lg border-2 border-gray-700 
                               focus:border-blue-500 transition-all duration-300 outline-none peer
                               group-hover:border-blue-400"
                    />
                    <label className="absolute left-2 top-2 px-2 text-sm text-gray-400 
                                   transition-all duration-300 pointer-events-none
                                   peer-focus:-translate-y-7 peer-focus:text-blue-500
                                   peer-[:not(:placeholder-shown)]:-translate-y-7"
                    >
                      First Name
                    </label>
                  </div>

                  {/* Modern Last Name Input */}
                  <div className="relative group">
                    <input
                      type="text"
                      value={lastName}
                      onChange={(e) => setLastName(e.target.value)}
                      placeholder=" "
                      disabled={isLoading}
                      className="w-full h-12 px-4 text-white bg-gray-800/50 rounded-lg border-2 border-gray-700 
                               focus:border-blue-500 transition-all duration-300 outline-none peer
                               group-hover:border-blue-400"
                    />
                    <label className="absolute left-2 top-2 px-2 text-sm text-gray-400 
                                   transition-all duration-300 pointer-events-none
                                   peer-focus:-translate-y-7 peer-focus:text-blue-500
                                   peer-[:not(:placeholder-shown)]:-translate-y-7"
                    >
                      Last Name
                    </label>
                  </div>

                  {/* Action Buttons */}
                  <div className="flex gap-4">
                    {/* Cancel Button */}
                    <motion.button
                      onClick={() => setIsEditing(false)}
                      disabled={isLoading}
                      className="flex-1 h-12 relative group"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <div className="absolute inset-0 bg-gradient-to-r from-gray-600 to-gray-700 rounded-lg opacity-75" />
                      <div className="relative h-full flex items-center justify-center bg-black/20 rounded-lg px-6">
                        <span className="text-white font-medium">Cancel</span>
                      </div>
                    </motion.button>

                    {/* Save Button */}
                    <motion.button
                      onClick={handleProfileUpdate}
                      disabled={isLoading}
                      className="flex-1 h-12 relative group"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <div className="absolute inset-0 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg opacity-75" />
                      <div className="relative h-full flex items-center justify-center bg-black/20 rounded-lg px-6">
                        <span className="text-white font-medium">
                          {isLoading ? (
                            <motion.div
                              animate={{ rotate: 360 }}
                              transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                              className="w-5 h-5 border-2 border-white border-t-transparent rounded-full"
                            />
                          ) : (
                            "Save Changes"
                          )}
                        </span>
                      </div>
                    </motion.button>
                  </div>
                </motion.div>
              ) : (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className="space-y-6 rounded-lg"
                >
                  <div className="flex flex-col items-center space-y-2">
                    <h3 className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-400">
                      {`${userData.firstName} ${userData.lastName}`}
                    </h3>
                    <p className="text-gray-400">{userData.email}</p>
                    {userData.provider === "LinkedIn" && (
                      <div className="flex items-center space-x-2 bg-blue-500/10 px-3 py-1 rounded-full">
                        <Image src="/linkedin.svg" alt="LinkedIn" className="w-4 h-4" />
                        <span className="text-sm text-blue-400">LinkedIn Account</span>
                      </div>
                    )}
                  </div>

                  {userData.provider !== "LinkedIn" && (
                    <motion.button
                      onClick={() => setIsEditing(true)}
                      className="rounded-2xl w-full h-12 relative group"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <div className="absolute inset-0 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-xl" />
                      <div className="absolute inset-0 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl
                                   opacity-0 group-hover:opacity-20 transition-opacity duration-300" />
                      <div className="relative h-full flex items-center justify-center gap-2 bg-gray-800/50 
                                  rounded-xl border border-gray-700 group-hover:border-blue-500/50 
                                   transition-colors duration-300">
                        <Edit className="w-4 h-4 text-blue-400" />
                        <span className="text-white font-medium">Edit Profile</span>
                      </div>
                    </motion.button>
                  )}
                </motion.div>
              )}
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

  

  const SettingsDialog = () => (
    <Dialog open={showSettingsDialog} onOpenChange={setShowSettingsDialog}>
      <DialogContent className="sm:max-w-[425px] bg-gradient-to-br from-gray-900 to-gray-800 border-gray-800">
        {/* <AdvancedCursor /> */}
        <DialogHeader>
          <DialogTitle className="text-white text-xl">Account Settings</DialogTitle>
        </DialogHeader>
        <div className="py-4 space-y-4">
          {/* Notification Settings */}
          <div className="space-y-4">
            <div 
              className="flex items-center justify-between p-4 bg-gray-800/50 rounded-xl hover:bg-gray-700/50 cursor-pointer transition-all duration-300"
              onClick={() => toast.info("Notification settings coming soon!")}
            >
              <div className="flex items-center space-x-3">
                <Bell className="h-5 w-5 text-blue-400" />
                <div>
                  <h4 className="text-white font-medium">Notifications</h4>
                  <p className="text-sm text-gray-400">Manage your alerts and notifications</p>
                </div>
              </div>
            </div>

            {/* Add more settings sections here */}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );

  return (
    <>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <motion.button
            className="outline-none"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Avatar className="h-9 w-9 cursor-pointer ring-2 ring-offset-2 ring-offset-gray-900 transition-all duration-300 ring-blue-500/50 hover:ring-blue-500">
              <AvatarImage 
                src={user.imageUrl} 
                alt={fullName}
              />
              <AvatarFallback className="bg-gradient-to-br from-blue-500 to-purple-500 text-white">
                {fallbackText}
              </AvatarFallback>
            </Avatar>
          </motion.button>
        </DropdownMenuTrigger>
        
        <DropdownMenuContent 
          className="w-64 mt-2 p-2 bg-gradient-to-br from-gray-900 to-gray-800 border-gray-800 shadow-xl"
          align="end"
        >
          <DropdownMenuLabel className="px-2 py-2">
            <div className="flex items-center space-x-3">
              <Avatar className="h-10 w-10">
                <AvatarImage src={user.imageUrl} alt={fullName} />
                <AvatarFallback className="bg-gradient-to-br from-blue-500 to-purple-500">
                  {fallbackText}
                </AvatarFallback>
              </Avatar>
              <div className="flex flex-col">
                <span className="text-sm font-semibold text-white">{fullName}</span>
                <span className="text-xs text-gray-400">{user.primaryEmailAddress?.emailAddress}</span>
              </div>
            </div>
          </DropdownMenuLabel>
          
          <DropdownMenuSeparator className="bg-gray-700/50 my-2" />
          
          <DropdownMenuItem 
            className="flex items-center space-x-2 px-2 py-2 hover:bg-red-800/50 rounded-lg cursor-help text-white transition-colors duration-200"
            onClick={() => setShowProfileDialog(true)}
          >
            <UserCircle className="h-4 w-4 text-blue-400" />
            <span>Profile</span>
          </DropdownMenuItem>
          
          <DropdownMenuItem 
            className="flex items-center space-x-2 px-2 py-2 hover:bg-red-800/50 rounded-lg cursor-help text-white transition-colors duration-200"
            onClick={() => setShowSettingsDialog(true)}
          >
            <Settings className="h-4 w-4 text-blue-400" />
            <span>Settings</span>
          </DropdownMenuItem>
          
          <DropdownMenuSeparator className="bg-gray-700/50 my-2" />
          
          <DropdownMenuItem           
            className="flex items-center space-x-2 px-2 py-2 hover:bg-red-500/10 rounded-lg cursor-help text-red-400 hover:text-red-300 transition-colors duration-200"
            onClick={handleSignOut}
          >
            <LogOut className="h-4 w-4" type="button"/>
            <span>Sign out</span>
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      {/* Dialogs */}
<ProfileDialog 
  isOpen={showProfileDialog}
  onClose={() => setShowProfileDialog(false)}
  user={user}
/>      <SettingsDialog />
    </>
  );
};

export default UserProfile;

================
File: src/components/Editor/AiAssistant.tsx
================
"use client";
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Bot, Send, ChevronRight, Copy, Check, Loader2, SendIcon, BotOffIcon, BotIcon } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Input } from '@/components/ui/input';
import OpenAI from 'openai';
import { FuturisticInput } from '../Dashboard/buttons/FuturisticInput';
import { PlaceholdersAndVanishInput } from '../ui/placeholders-and-vanish-input';
const { GoogleGenerativeAI } = require("@google/generative-ai");

const messageAnimations = {
  initial: {
    opacity: 0,
    y: 20,
    scale: 0.95
  },
  animate: {
    opacity: 1,
    y: 0,
    scale: 1,
    transition: {
      duration: 0.3,
      ease: "easeOut"
    }
  },
  exit: {
    opacity: 0,
    scale: 0.95,
    transition: {
      duration: 0.2
    }
  }
};

const CodeBlock = ({ code, language }: { code: string; language: string }) => {
  const [copied, setCopied] = React.useState(false);
  const [isHovered, setIsHovered] = React.useState(false);

  const copyCode = async () => {
    await navigator.clipboard.writeText(code);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <div
      className="relative my-2 rounded-lg overflow-hidden bg-gray-900 border border-gray-700"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div className="flex items-center justify-between px-4 py-2 bg-gray-800">
        <span className="text-xs text-gray-400">
          {language || 'code'}
        </span>
        <Button
          variant="ghost"
          size="sm"
          onClick={copyCode}
          className="h-8 px-2 hover:bg-gray-700"
        >
          {copied ? (
            <Check className="h-4 w-4 text-green-400" />
          ) : (
            <Copy className="h-4 w-4 text-gray-400" />
          )}
        </Button>
      </div>
      <pre className="p-4 overflow-x-auto">
        <code className="text-sm text-gray-300 font-mono whitespace-pre-wrap break-words">
          {code}
        </code>
      </pre>
    </div>
  );
};

interface MessagePart {
  type: 'text' | 'code';
  content: string;
  language?: string;
}

const formatMessage = (content: string): MessagePart[] => {
  const parts: MessagePart[] = [];
  let currentText = '';
  let inCodeBlock = false;
  let currentCode = '';
  let language = '';

  // Handle null or undefined content
  if (!content) {
    return [{ type: 'text', content: '' }];
  }

  // Fix malformed markdown bullet points and asterisks
  let fixedContent = content;

  // Fix incomplete or malformed markdown patterns
  // Handle asterisks that might be used for bold/italic but aren't properly paired
  const asteriskRegex = /\*\*(?!\s*\*\*)(.*?)(?<!\s*\*\*)\*\*/g;
  fixedContent = fixedContent.replace(asteriskRegex, '<strong>$1</strong>');

  // Handle single asterisks for italic
  const italicRegex = /\*(?!\s*\*)(.*?)(?<!\s*\*)\*/g;
  fixedContent = fixedContent.replace(italicRegex, '<em>$1</em>');

  // Fix bullet points that might be malformed
  fixedContent = fixedContent.replace(/^\s*\*\s+/gm, '• ');

  const lines = fixedContent.split('\n');

  for (const line of lines) {
    // Check for code block markers
    if (line.trim().startsWith('```')) {
      if (inCodeBlock) {
        // End of code block
        parts.push({ type: 'code', content: currentCode.trim(), language });
        currentCode = '';
        language = '';
        inCodeBlock = false;
      } else {
        // Start of code block
        if (currentText) {
          parts.push({ type: 'text', content: currentText.trim() });
          currentText = '';
        }
        language = line.slice(3).trim();
        inCodeBlock = true;
      }
      continue;
    }

    if (inCodeBlock) {
      currentCode += line + '\n';
    } else {
      currentText += line + '\n';
    }
  }

  // Handle unclosed code blocks
  if (inCodeBlock && currentCode) {
    parts.push({ type: 'code', content: currentCode.trim(), language });
  }

  // Add remaining text
  if (currentText) {
    parts.push({ type: 'text', content: currentText.trim() });
  }

  return parts;
};

export const MessageContent = ({ content }: { content: string }) => {
  const parts = formatMessage(content);

  return (
    <div className="space-y-3">
      {parts.map((part, index) => {
        if (part.type === 'code') {
          return (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{
                duration: 0.4,
                delay: index * 0.1,
                ease: "easeOut"
              }}
            >
              <CodeBlock
                code={part.content}
                language={part.language ?? 'text'}
              />
            </motion.div>
          );
        }

        // Process regular text with improved styling and animations
        const paragraphs = part.content.split('\n\n');

        return (
          <React.Fragment key={index}>
            {paragraphs.map((paragraph, pIndex) => (
              <motion.p
                key={`${index}-${pIndex}`}
                className="text-sm leading-relaxed whitespace-pre-wrap break-words"
                initial={{ opacity: 0, y: 5 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{
                  duration: 0.3,
                  delay: (index * 0.1) + (pIndex * 0.05),
                  ease: "easeOut"
                }}
                dangerouslySetInnerHTML={{
                  __html: paragraph
                    // Replace asterisk bullet points with proper bullet points
                    .replace(/^\s*\*\s+/gm, '• ')
                    // Ensure any remaining HTML tags are properly escaped
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    // Then un-escape our specifically added HTML tags
                    .replace(/&lt;strong&gt;/g, '<strong>')
                    .replace(/&lt;\/strong&gt;/g, '</strong>')
                    .replace(/&lt;em&gt;/g, '<em>')
                    .replace(/&lt;\/em&gt;/g, '</em>')
                }}
              />
            ))}
          </React.Fragment>
        );
      })}
    </div>
  );
};

const MessageContainer = React.forwardRef<HTMLDivElement, React.PropsWithChildren<{}>>(
  ({ children }, ref) => (
    <ScrollArea className="flex-1 p-4">
      <div className="space-y-6" ref={ref}>
        {children}
      </div>
    </ScrollArea>
  )
);

MessageContainer.displayName = 'MessageContainer';

const openai = new OpenAI({
  dangerouslyAllowBrowser: true,
  baseURL: "https://openrouter.ai/api/v1",
  apiKey: "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",
  defaultHeaders: {
    "HTTP-Referer": "",
    "X-Title": "CodeConnect"
  }
});

// client = genai.Client(api_key="AIzaSyCF6mKRofVaWa-4RC6hjYQtijNqxOZSt58")

const EmptyState = () => {
  return (
    <motion.div
      className="flex flex-col items-center justify-center  h-full py-48 px-4 text-center"
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      {/* <motion.div
        className="w-32 h-32 rounded-full bg-gradient-to-br from-blue-700 via-blue-500 to-blue-400 flex items-center justify-center relative overflow-hidden shadow-xl"
        animate={{
          scale: [1, 1.05, 0.98, 1.05, 1],
          rotate: [0, 2, 0, -2, 0],
        }}
        transition={{
          duration: 10,
          repeat: Infinity,
          repeatType: "loop",
          ease: "easeInOut"
        }}
      >
        <motion.div
          className="absolute inset-0 rounded-full bg-gradient-to-r from-indigo-600/40 via-blue-300/30 to-sky-400/40"
          style={{
            backgroundSize: "400% 100%"
          }}
          animate={{
            backgroundPosition: ["0% center", "100% center", "0% center"]
          }}
          transition={{
            duration: 8,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />

        <motion.div
          className="absolute inset-0 rounded-full bg-gradient-to-tr from-blue-800/30 via-cyan-400/25 to-blue-500/30"
          style={{
            backgroundSize: "200% 200%",
            mixBlendMode: "soft-light"
          }}
          animate={{
            backgroundPosition: ["0% 0%", "100% 100%", "0% 0%"]
          }}
          transition={{
            duration: 7,
            repeat: Infinity,
            ease: "easeInOut",
            repeatType: "reverse"
          }}
        />

        <motion.div
          className="absolute inset-0 rounded-full"
          animate={{
            boxShadow: [
              "0 0 0 0 rgba(59, 130, 246, 0)",
              "0 0 0 10px rgba(59, 130, 246, 0.15)",
              "0 0 0 20px rgba(59, 130, 246, 0.1)",
              "0 0 0 30px rgba(59, 130, 246, 0.05)",
              "0 0 0 0 rgba(59, 130, 246, 0)"
            ]
          }}
          transition={{
            duration: 4,
            repeat: Infinity,
            repeatType: "loop"
          }}
        />

        <motion.div
          className="absolute w-full h-full rounded-full bg-gradient-to-r from-blue-200/30 via-transparent to-blue-200/30"
          animate={{
            rotate: [0, 360]
          }}
          transition={{
            duration: 15,
            repeat: Infinity,
            ease: "linear"
          }}
        />

        <div className="relative w-full h-full">
          {[...Array(12)].map((_, i) => (
            <motion.div
              key={i}
              className="absolute rounded-full bg-blue-100"
              style={{
                width: `${1 + Math.random() * 2}px`,
                height: `${1 + Math.random() * 2}px`,
                left: `${20 + Math.random() * 60}%`,
                top: `${20 + Math.random() * 60}%`,
                filter: "blur(0.5px)"
              }}
              animate={{
                y: [Math.random() * -18, Math.random() * 18, Math.random() * -18],
                x: [Math.random() * -18, Math.random() * 18, Math.random() * -18],
                opacity: [0.5, 0.9, 0.5],
                scale: [0.8, 1.6, 0.8]
              }}
              transition={{
                duration: 4 + Math.random() * 4,
                repeat: Infinity,
                delay: Math.random() * 2
              }}
            />
          ))}
        </div>

        <motion.div
          className="relative z-10 w-16 h-16 rounded-full bg-gradient-to-br from-white/60 via-blue-200/40 to-blue-300/20"
          animate={{
            opacity: [0.6, 0.8, 0.6],
            scale: [0.9, 1.1, 0.9]
          }}
          transition={{
            duration: 3,
            repeat: Infinity
          }}
        />

        <motion.div
          className="absolute inset-0 rounded-full"
          style={{
            background: "radial-gradient(circle at 50% 50%, rgba(219, 234, 254, 0.4) 0%, transparent 70%)"
          }}
          animate={{
            opacity: [0.5, 0.7, 0.5]
          }}
          transition={{
            duration: 2,
            repeat: Infinity,
            repeatType: "mirror"
          }}
        />

        {[...Array(3)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-32 h-2 bg-blue-300/30"
            style={{
              borderRadius: "2px",
              filter: "blur(2px)",
              transformOrigin: "center",
              rotate: `${i * 60}deg`
            }}
            animate={{
              rotate: [`${i * 60}deg`, `${i * 60 + 180}deg`, `${i * 60 + 360}deg`],
              opacity: [0, 0.3, 0]
            }}
            transition={{
              duration: 8,
              repeat: Infinity,
              delay: i * 1.5,
              ease: "easeInOut"
            }}
          />
        ))}
      </motion.div> */}

<motion.div
  className="w-32 h-32 rounded-full bg-gradient-to-br from-blue-500 via-blue-400 to-cyan-500 flex items-center justify-center relative overflow-hidden shadow-xl"
  animate={{
    scale: [1, 1.05, 0.98, 1.05, 1],
    rotate: [0, 2, 0, -2, 0],
  }}
  transition={{
    duration: 10,
    repeat: Infinity,
    repeatType: "loop",
    ease: "easeInOut"
  }}
>
  {/* Main background shimmer effect */}
  <motion.div
    className="absolute inset-0 rounded-full bg-gradient-to-r from-white/30 via-blue-200/20 to-white/30"
    style={{
      backgroundSize: "400% 100%"
    }}
    animate={{
      backgroundPosition: ["0% center", "100% center", "0% center"]
    }}
    transition={{
      duration: 8,
      repeat: Infinity,
      ease: "easeInOut"
    }}
  />
  
  {/* Diagonal flowing gradient */}
  <motion.div
    className="absolute inset-0 rounded-full bg-gradient-to-tr from-blue-100/20 via-white/25 to-blue-100/20"
    style={{
      backgroundSize: "200% 200%",
      mixBlendMode: "soft-light"
    }}
    animate={{
      backgroundPosition: ["0% 0%", "100% 100%", "0% 0%"]
    }}
    transition={{
      duration: 7,
      repeat: Infinity,
      ease: "easeInOut",
      repeatType: "reverse"
    }}
  />
  
  {/* Enhanced pulse rings */}
  <motion.div
    className="absolute inset-0 rounded-full"
    animate={{
      boxShadow: [
        "0 0 0 0 rgba(255, 255, 255, 0)",
        "0 0 0 10px rgba(255, 255, 255, 0.1)",
        "0 0 0 20px rgba(255, 255, 255, 0.05)",
        "0 0 0 30px rgba(255, 255, 255, 0.02)",
        "0 0 0 0 rgba(255, 255, 255, 0)"
      ]
    }}
    transition={{
      duration: 4,
      repeat: Infinity,
      repeatType: "loop"
    }}
  />
  
  {/* Inner rotating glow */}
  <motion.div
    className="absolute w-full h-full rounded-full bg-gradient-to-r from-white/40 via-transparent to-white/40"
    animate={{
      rotate: [0, 360]
    }}
    transition={{
      duration: 15,
      repeat: Infinity,
      ease: "linear"
    }}
  />
  
  {/* Snowflake-like particles */}
  <div className="relative w-full h-full">
    {[...Array(12)].map((_, i) => (
      <motion.div
        key={i}
        className="absolute rounded-full bg-white"
        style={{
          width: `${1 + Math.random() * 2}px`,
          height: `${1 + Math.random() * 2}px`,
          left: `${20 + Math.random() * 60}%`,
          top: `${20 + Math.random() * 60}%`,
          filter: "blur(0.5px)"
        }}
        animate={{
          y: [Math.random() * -18, Math.random() * 18, Math.random() * -18],
          x: [Math.random() * -18, Math.random() * 18, Math.random() * -18],
          opacity: [0.5, 0.9, 0.5],
          scale: [0.8, 1.6, 0.8]
        }}
        transition={{
          duration: 4 + Math.random() * 4,
          repeat: Infinity,
          delay: Math.random() * 2
        }}
      />
    ))}
  </div>
  
  {/* Center orb with subtle pulsing */}
  <motion.div
    className="relative z-10 w-16 h-16 rounded-full bg-gradient-to-br from-white/60 via-white/40 to-white/10"
    animate={{
      opacity: [0.6, 0.8, 0.6],
      scale: [0.9, 1.1, 0.9]
    }}
    transition={{
      duration: 3,
      repeat: Infinity
    }}
  />
  
  {/* Inner light source */}
  <motion.div
    className="absolute inset-0 rounded-full"
    style={{
      background: "radial-gradient(circle at 50% 50%, rgba(255,255,255,0.4) 0%, transparent 70%)"
    }}
    animate={{
      opacity: [0.5, 0.7, 0.5]
    }}
    transition={{
      duration: 2,
      repeat: Infinity,
      repeatType: "mirror"
    }}
  />
  
  {/* Extra lightbeam effect */}
  <motion.div
    className="absolute w-32 h-4 bg-white/20"
    style={{ 
      borderRadius: "2px",
      filter: "blur(2px)",
      transformOrigin: "center" 
    }}
    animate={{
      rotate: [0, 180, 360],
      opacity: [0, 0.3, 0]
    }}
    transition={{
      duration: 6,
      repeat: Infinity,
      ease: "easeInOut"
    }}
  />
</motion.div>
      <h3 className="text-xl  text-white mt-2 tracking-wide drop-shadow-sm transition-all duration-300 hover:scale-105">Ask anything</h3>        <p className="text-gray-400 text-sm max-w-xs">
        {/* I can help with coding questions, explain concepts, assist in bugs and errors. */}
      </p>

      <motion.div
        className="grid grid-cols-2 gap-2 mt-6"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.3, duration: 0.5 }}
      >
        {/* <SuggestionChip text="How to use React hooks?" />
        <SuggestionChip text="Explain async/await" />
        <SuggestionChip text="Best coding practices" />
        <SuggestionChip text="CSS Grid vs Flexbox" /> */}
      </motion.div>
    </motion.div>
  );
};

interface AiAssistantProps {
  isOpen: boolean;
  onToggle: () => void;
}

const AiAssistant = ({ isOpen, onToggle }: AiAssistantProps) => {
  interface Message {
    type: 'user' | 'assistant';
    content: string;
    timestamp: string;
  }
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const scrollRef = useRef<HTMLDivElement>(null);
  const [userHasScrolled, setUserHasScrolled] = useState(false);
  const endOfMessagesRef = useRef<HTMLDivElement>(null);


  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTo({ top: scrollRef.current.scrollHeight, behavior: 'smooth' });
    }
  }, [messages]);

  const askAI = async (question: any) => {
    try {
      setIsLoading(true);

      // const completion = await openai.chat.completions.create({
      //   model: "google/gemini-flash-1.5-8b-exp",
      //   // max_tokens: 1000,
      //   // temperature: 0.7,
      //   messages: [
      //     {
      //       role: "user",
      //       content: question
      //     }
      //   ]
      // });

      const genAI = new GoogleGenerativeAI("AIzaSyCF6mKRofVaWa-4RC6hjYQtijNqxOZSt58");
      const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

      const prompt = question;

      const result = await model.generateContent(prompt);
      console.log(result.response.text());

      // console.log('OpenRouter response:', completion);

      // const responseContent = completion?.choices?.[0]?.message?.content;
      // if (responseContent) {
      //   return responseContent;
      // }

      const responseContent = result.response.text();
      console.log("ResponseContent is : ", responseContent);
      if (responseContent) {
        return responseContent;
      }

      throw new Error('Invalid response format from AI service');
    } catch (error) {
      console.error('AI request error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  // Replace your handleSubmit function in the AiAssistant component with this version:

  const scrollToBottom = () => {
    try {
      // Try finding the ScrollArea viewport directly
      const scrollAreaViewport = document.querySelector('[data-radix-scroll-area-viewport]');
      if (scrollAreaViewport) {
        scrollAreaViewport.scrollTop = scrollAreaViewport.scrollHeight;
        return;
      }

      // Fallback: try using the ref directly
      if (scrollRef.current) {
        scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
      }
    } catch (error) {
      console.error("Error scrolling to bottom:", error);
    }
  };

  useEffect(() => {
    // Delay to ensure rendering is complete
    setTimeout(scrollToBottom, 100);
  }, [messages, isLoading]);

  const handleSubmit = async (e: any) => {
    if (e && typeof e.preventDefault === 'function') {
      e.preventDefault();
      e.stopPropagation();
    }

    if (!input.trim() || isLoading) return;

    const currentInput = input;
    setInput('');

    const userMessage: Message = {
      type: 'user' as const,
      content: currentInput,
      timestamp: new Date().toISOString()
    };

    setMessages(prev => [...prev, userMessage]);

    try {
      setIsLoading(true);
      const aiResponse = await askAI(currentInput);

      const aiMessage: Message = {
        type: 'assistant',
        content: aiResponse,
        timestamp: new Date().toISOString()
      };

      setMessages(prev => [...prev, aiMessage]);
    } catch (error) {
      console.error('Error in AI response:', error);

      const errorMessage: Message = {
        type: 'assistant',
        content: "I apologize, but I'm having trouble right now. Please try again in a moment.",
        timestamp: new Date().toISOString()
      };

      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
    setTimeout(scrollToBottom, 100);
  };

  const placeholders = [
    "What's the first rule of Fight Club?",
    "Who is Tyler Durden?",
    "Where is Andrew Laeddis Hiding?",
    "Write a Javascript method to reverse a string",
    "How to assemble your own PC?",
  ];

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    console.log(e.target.value);
  };



  // Add this SuggestionChip component right after the EmptyState component

  const SuggestionChip = ({ text }: { text: string }) => {
    const [isHovered, setIsHovered] = useState(false);

    return (
      <motion.div
        className="bg-gray-700/50 backdrop-blur-sm rounded-full px-3 py-2 text-xs text-gray-300 cursor-pointer border border-gray-700"
        whileHover={{
          scale: 1.03,
          backgroundColor: "rgba(59, 130, 246, 0.15)",
          borderColor: "rgba(59, 130, 246, 0.3)"
        }}
        whileTap={{ scale: 0.97 }}
        onHoverStart={() => setIsHovered(true)}
        onHoverEnd={() => setIsHovered(false)}
      >
        <motion.span
          animate={{ color: isHovered ? "rgb(147, 197, 253)" : "rgb(209, 213, 219)" }}
          transition={{ duration: 0.2 }}
        >
          {text}
        </motion.span>
      </motion.div>
    );
  };


  useEffect(() => {
    if (endOfMessagesRef.current) {
      endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages, isLoading]);

  // Add this effect to detect manual scrolling
  // useEffect(() => {
  //   const handleScroll = () => {
  //     if (scrollRef.current) {
  //       const scrollElement = scrollRef.current.querySelector('[data-radix-scroll-area-viewport]') || scrollRef.current;
  //       const isScrolledToBottom =
  //         Math.abs(scrollElement.scrollHeight - scrollElement.clientHeight - scrollElement.scrollTop) < 50;

  //       setUserHasScrolled(!isScrolledToBottom);
  //     }
  //   };

  //   const scrollElement = scrollRef.current?.querySelector('[data-radix-scroll-area-viewport]') || scrollRef.current;
  //   if (scrollElement) {
  //     scrollElement.addEventListener('scroll', handleScroll);
  //     return () => scrollElement.removeEventListener('scroll', handleScroll);
  //   }
  // }, []);

  // // Modify your scroll effect to respect user scrolling
  // useEffect(() => {
  //   if (scrollRef.current && (!userHasScrolled || messages[messages.length - 1]?.type === 'user')) {
  //     // Only auto-scroll if user hasn't scrolled up OR if the latest message is from the user
  //     setTimeout(() => {
  //       const scrollContainer = scrollRef.current;
  //       if (scrollContainer) {
  //         const scrollElement = scrollContainer.querySelector('[data-radix-scroll-area-viewport]') || scrollContainer;
  //         scrollElement.scrollTop = scrollElement.scrollHeight;
  //       }
  //     }, 100);
  //   }
  // }, [messages, isLoading, userHasScrolled]);

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ x: 320, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          exit={{ x: 320, opacity: 0 }}
          transition={{ type: "spring", stiffness: 300, damping: 30 }}
          className="h-full border-l border-gray-700 bg-gray-800/95 backdrop-blur-sm flex flex-col fixed right-0 top-0 bottom-0 w-80 z-50"
        >
          <motion.div
            className="p-4 border-b border-gray-700 flex items-center justify-between"
            initial={{ y: -20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.2 }}
          >
            <div className="flex items-center space-x-2">
              <motion.div
                animate={{
                  rotate: [0, -10, 10, -10, 0],
                  scale: [1, 1.1, 1]
                }}
                transition={{
                  duration: 0.5,
                  ease: "easeInOut",
                  times: [0, 0.2, 0.5, 0.8, 1]
                }}
              >
                <Bot className="w-5 h-5 text-blue-400" />
              </motion.div>
              <span className="font-semibold text-white">AI Assistant</span>
            </div>
            <Button
              variant="ghost"
              size="icon"
              onClick={onToggle}
              className="hover:bg-gray-700"
            >
              <motion.div
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
              >
                <ChevronRight className="w-5 h-5" />
              </motion.div>
            </Button>
          </motion.div>

          <MessageContainer>
            <AnimatePresence>
              {messages.length > 0 ? (
                <>
                  {messages.map((message, index) => (
                    <motion.div
                      key={index}
                      variants={messageAnimations}
                      initial="initial"
                      animate="animate"
                      exit="exit"
                      className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <motion.div
                        className={`max-w-[90%] rounded-2xl p-4 ${message.type === 'user'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-700/70 backdrop-blur-sm text-gray-100'
                          }`}
                        whileHover={{ scale: 1.01 }}
                      >
                        <MessageContent content={message.content} />
                        <motion.span
                          className="text-xs opacity-50 mt-2 block"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 0.5 }}
                          transition={{ delay: 0.5 }}
                        >
                          {new Date(message.timestamp).toLocaleTimeString()}
                        </motion.span>
                      </motion.div>
                    </motion.div>
                  ))}
                  {/* Add this div for scrolling to the bottom */}
                  <div ref={endOfMessagesRef} />
                </>
              ) : (
                <EmptyState />
              )}
            </AnimatePresence>
            {isLoading && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: 10 }}
                className="flex justify-start mt-4"
              >
                <div className="bg-gray-700/70 backdrop-blur-sm rounded-lg p-3 flex items-center space-x-2">
                  <Loader2 className="w-4 h-4 animate-spin text-blue-400" />
                  <span className="text-sm text-gray-300">AI is thinking...</span>
                </div>
              </motion.div>
            )}
          </MessageContainer>

          <motion.div
            className="p-4 border-t border-gray-700"
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.3 }}
          >
            <PlaceholdersAndVanishInput
              placeholders={placeholders}
              onChange={(e) => setInput(e.target.value)}
              onSubmit={handleSubmit}
            />
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default AiAssistant;

================
File: src/components/Editor/Chat.tsx
================
"use client"

import React, { useState, useEffect, useRef } from "react"
import { motion, AnimatePresence, useMotionValue, useSpring, useReducedMotion, useTransform } from "framer-motion"
import { Send, Paperclip, X, MessageSquare, Video, Image } from 'lucide-react'
import { ScrollArea } from "@/components/ui/scroll-area"
import { Button } from "@/components/ui/button"
import { ACTIONS } from "@/lib/actions"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { useSocket } from "@/providers/socketProvider"
import { MessageBubble } from "./MessageBubble"

interface Message {
  id: string
  content: string
  sender: string
  timestamp: number
  attachments?: { type: "image" | "video" | "audio"; url: string }[]
}

interface ChatProps {
  roomId: string
  username: string
  isOpen: boolean
  onToggle: () => void
}

export const Chat = ({ roomId, username, isOpen, onToggle }: ChatProps) => {
  const [messages, setMessages] = useState<Message[]>([])
  const [newMessage, setNewMessage] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const [showAttachmentModal, setShowAttachmentModal] = useState(false)
  const { socket } = useSocket()
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)
  const hasInitialized = useRef(false)
  const scrollAreaRef = useRef<HTMLDivElement>(null)
  const [isFocused, setIsFocused] = useState(false)
  const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  // Convert username to lowercase at component level
  const normalizedUsername = username.toLowerCase()

  const charLimit = 1000
  const prefersReducedMotion = useReducedMotion()
  const cursorX = useMotionValue(0)
  const cursorY = useMotionValue(0)
  const springConfig = { damping: 25, stiffness: 300 }
  const cursorXSpring = useSpring(cursorX, springConfig)
  const cursorYSpring = useSpring(cursorY, springConfig)

  // Calculate character limit percentage with spring physics
  const charPercentage = Math.min((newMessage.length / charLimit) * 100, 100)
  const isNearLimit = charPercentage > 80
  const progressWidth = useMotionValue(0)
  const smoothProgressWidth = useSpring(progressWidth, { damping: 20, stiffness: 100 })

  // Update progress width when message changes
  useEffect(() => {
    progressWidth.set(charPercentage)
  }, [charPercentage, progressWidth])

  // Track mouse position for hover effects
  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (inputRef.current) {
        const rect = inputRef.current.getBoundingClientRect()
        cursorX.set(e.clientX - rect.left)
        cursorY.set(e.clientY - rect.top)
      }
    }

    window.addEventListener("mousemove", handleMouseMove)
    return () => window.removeEventListener("mousemove", handleMouseMove)
  }, [cursorX, cursorY])

  useEffect(() => {
    if (newMessage.length > 0) {
      setIsTyping(true)

      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current)
      }

      typingTimeoutRef.current = setTimeout(() => {
        setIsTyping(false)
      }, 800)
    } else {
      setIsTyping(false)
    }

    return () => {
      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current)
      }
    }
  }, [newMessage])


  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' })
    }
  }

  useEffect(() => {
    const timeoutId = setTimeout(scrollToBottom, 100)
    return () => clearTimeout(timeoutId)
  }, [messages])

  useEffect(() => {
    if (!socket) return

    const handleSyncMessages = ({ messages: syncedMessages }: { messages: Message[] }) => {
      if (!hasInitialized.current) {
        // Normalize existing usernames
        const normalizedMessages = syncedMessages.map(msg => ({
          ...msg,
          sender: msg.sender.toLowerCase()
        }))
        setMessages(normalizedMessages)
        hasInitialized.current = true
        setTimeout(scrollToBottom, 100)
      }
    }

    const handleReceiveMessage = (message: Message) => {
      // Normalize incoming message username
      const normalizedMessage = {
        ...message,
        sender: message.sender.toLowerCase()
      }

      setMessages((prev) => {
        if (prev.some((m) => m.id === normalizedMessage.id)) return prev
        return [...prev, normalizedMessage].sort((a, b) => a.timestamp - b.timestamp)
      })
      setTimeout(scrollToBottom, 100)
    }

    const handleTypingStart = ({ username: typingUser }: { username: string }) => {
      if (typingUser.toLowerCase() !== normalizedUsername) {
        setIsTyping(true)
      }
    }

    const handleTypingStop = ({ username: typingUser }: { username: string }) => {
      if (typingUser.toLowerCase() !== normalizedUsername) {
        setIsTyping(false)
      }
    }

    socket.on(ACTIONS.SYNC_MESSAGES, handleSyncMessages)
    socket.on(ACTIONS.RECEIVE_MESSAGE, handleReceiveMessage)

    return () => {
      socket.off(ACTIONS.SYNC_MESSAGES)
      socket.off(ACTIONS.RECEIVE_MESSAGE)
      hasInitialized.current = false
    }
  }, [socket, normalizedUsername])

  const sendMessage = (e: React.FormEvent) => {
    e.preventDefault()
    if (!newMessage.trim()) return

    const message: Message = {
      id: `${Date.now()}-${Math.random()}`,
      content: newMessage.trim(),
      sender: normalizedUsername,
      timestamp: Date.now(),
    }

    socket?.emit(ACTIONS.SEND_MESSAGE, { roomId, message })
    setTimeout(() => {
      setNewMessage("")
    }, 50)
  }

  const handleAttachment = (type: "image" | "video", url: string) => {
    const message: Message = {
      id: `${Date.now()}-${Math.random()}`,
      content: type === "image" ? "Image attachment" : "Video attachment",
      sender: normalizedUsername,
      timestamp: Date.now(),
      attachments: [{ type, url }],
    }

    socket?.emit(ACTIONS.SEND_MESSAGE, { roomId, message })
    setShowAttachmentModal(false)
  }

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === "/" && (e.metaKey || e.ctrlKey)) {
        e.preventDefault()
        inputRef.current?.focus()
      }
    }

    window.addEventListener("keydown", handleKeyDown)
    return () => window.removeEventListener("keydown", handleKeyDown)
  }, [])

  // Dynamic gradient based on typing state and message length
  const gradientColors = isNearLimit
    ? "linear-gradient(90deg, #3b82f6, #8b5cf6, #ec4899, #3b82f6)"
    : isTyping
      ? "linear-gradient(90deg, #3b82f6, #8b5cf6, #6366f1, #3b82f6)"
      : "linear-gradient(90deg, #3b82f6, #8b5cf6)"

  // Particle effect for typing
  const Particles = () => {
    if (prefersReducedMotion || !isTyping) return null

    return (
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(6)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 rounded-full bg-blue-400/30"
            initial={{
              x: "50%",
              y: "50%",
              opacity: 0,
              scale: 0,
            }}
            animate={{
              x: [null, `${40 + Math.random() * 60}%`],
              y: [null, `${Math.random() * 100}%`],
              opacity: [0, 0.7, 0],
              scale: [0, 1 + Math.random(), 0],
            }}
            transition={{
              duration: 1 + Math.random() * 2,
              repeat: Number.POSITIVE_INFINITY,
              repeatType: "loop",
              delay: Math.random() * 2,
              ease: "easeInOut",
            }}
          />
        ))}
      </div>
    )
  }

  return (
    <>
      <AnimatePresence>
        {!isOpen && (
          <Button
            variant="ghost"
            size="icon"
            onClick={onToggle}
            className="fixed bottom-4 right-4 z-50 rounded-full bg-blue-600 shadow-lg hover:bg-blue-700"
          >
            <MessageSquare className="h-5 w-5 text-white" />
          </Button>
        )}
      </AnimatePresence>

      <AnimatePresence mode="wait">
        {isOpen && (
          <motion.div
            initial={{ x: '100%', opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            exit={{ x: '100%', opacity: 0 }}
            transition={{ type: 'spring', damping: 20 }}
            className="fixed right-0 top-0 h-full w-80 border-l border-gray-700 bg-gray-800/95 backdrop-blur-sm"
          >
            <TooltipProvider>
              <div className="flex flex-col h-full bg-gradient-to-br from-gray-900 to-gray-800 rounded-lg shadow-xl">
                <motion.div className="flex-none flex items-center justify-center gap-4 py-5 border-b border-gray-700 bg-gray-800/95">
                  <h2 className="text-lg font-semibold text-gray-100">Chat</h2>
                  <div className="text-sm text-gray-400">
                    ({messages.length} message{messages.length !== 1 ? "s" : ""})
                  </div>
                </motion.div>

                <div className="flex-1 relative overflow-hidden">
                  {messages.length === 0 ? (
                    <motion.div
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      className="absolute inset-0 flex items-center justify-center text-gray-400"
                    >
                      <div className="text-center">
                        <p className="text-xl mb-2">No messages yet</p>
                        <p className="text-sm">Start a conversation by sending a message</p>
                      </div>
                    </motion.div>
                  ) : (
                    <ScrollArea
                      ref={scrollAreaRef}
                      className="h-[calc(100vh-13rem)] absolute inset-0"
                    >
                      <div className="flex flex-col space-y-4 p-4 min-h-full">
                        <AnimatePresence initial={false}>
                          {messages.map((message) => (
                            <MessageBubble
                              key={message.id}
                              message={message}
                              isOwnMessage={message.sender === normalizedUsername}
                            />
                          ))}
                        </AnimatePresence>
                        <div ref={messagesEndRef} />
                      </div>
                    </ScrollArea>
                  )}
                </div>

                <motion.div
                  className="flex-none border-t p-3 text-black border-gray-800/50 bg-gray-900/95 backdrop-blur-lg"
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2 }}
                >
                  <form onSubmit={sendMessage} className="relative">
                    <div className="relative flex items-center">
                      {/* Enhanced 3D gradient border with parallax effect */}
                      <motion.div
                        className="absolute -inset-0.5 rounded-3xl opacity-0 blur-md z-0"
                        style={{
                          background: gradientColors,
                          boxShadow: "0 0 20px rgba(59, 130, 246, 0.3)",
                          x: useTransform(cursorXSpring, [0, 300], prefersReducedMotion ? [0, 0] : [-2, 2]),
                          y: useTransform(cursorYSpring, [0, 60], prefersReducedMotion ? [0, 0] : [-1, 1]),
                        }}
                        animate={{
                          opacity: isFocused ? 0.95 : isTyping ? 0.8 : 0,
                        }}
                        transition={{
                          opacity: { duration: 0.4, ease: "easeOut" },
                          background: { duration: 3, repeat: Number.POSITIVE_INFINITY, repeatType: "reverse" },
                        }}
                      />

                      {/* Glass effect container with subtle 3D transform */}
                      <motion.div
                        className="relative w-full z-10 rounded-3xl overflow-hidden backdrop-blur-sm shadow-lg"
                        style={{
                          perspective: 1000,
                          x: useTransform(cursorXSpring, [0, 300], prefersReducedMotion ? [0, 0] : [-1, 1]),
                          y: useTransform(cursorYSpring, [0, 60], prefersReducedMotion ? [0, 0] : [-0.5, 0.5]),
                        }}
                      >
                        {/* Smooth progress indicator with spring physics */}
                        <motion.div
                          className={`absolute bottom-0 left-0 h-0.5 ${isNearLimit ? "bg-gradient-to-r from-blue-500 via-amber-500 to-amber-500" : "bg-blue-500"
                            } ${newMessage.length >= charLimit ? "bg-gradient-to-r from-amber-500 to-red-500" : ""}`}
                          style={{ width: smoothProgressWidth.get() + "%" }}
                          transition={{ type: "spring", stiffness: 100, damping: 15 }}
                        />

                        <div className="relative flex items-center">
                          {/* Particle effects container */}
                          <Particles />

                          {/* Enhanced input field with better styling */}
                          <input
                            ref={inputRef}
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value.slice(0, charLimit))}
                            onFocus={() => setIsFocused(true)}
                            onBlur={() => setIsFocused(false)}
                            placeholder="Type a message..."
                            className="w-full bg-slate-800/90 text-white rounded-3xl px-5 py-4 pr-14 focus:outline-none border border-slate-700/80 placeholder:text-slate-400/70 relative z-10 text-md shadow-inner transition-all duration-200"
                            autoComplete="off"
                            maxLength={charLimit}
                          />

                          {/* Enhanced send button with 3D effects */}
                          <AnimatePresence mode="wait">
                            {newMessage.trim() ? (
                              <motion.button
                                key="send-active"
                                type="submit"
                                className="absolute right-3 top-1/2 transform -translate-y-1/2 p-2 rounded-full z-20"
                                style={{
                                  background: "linear-gradient(135deg, #4f46e5, #3b82f6)",
                                  boxShadow: "0 4px 10px rgba(59, 130, 246, 0.3), 0 1px 3px rgba(0, 0, 0, 0.1)",
                                }}
                                initial={{ scale: 0.8, opacity: 0, y: "-50%", rotate: -45 }}
                                animate={{
                                  scale: 1,
                                  opacity: 1,
                                  y: "-50%",
                                  rotate: 0,
                                  transition: { type: "spring", stiffness: 500, damping: 15 },
                                }}
                                exit={{
                                  scale: 0.8,
                                  opacity: 0,
                                  y: "-50%",
                                  rotate: 45,
                                  transition: { duration: 0.15, ease: "easeOut" },
                                }}
                                whileHover={{
                                  scale: 1.1,
                                  boxShadow: "0 8px 20px rgba(59, 130, 246, 0.4), 0 2px 5px rgba(0, 0, 0, 0.1)",
                                }}
                                whileTap={{
                                  scale: 0.92,
                                  boxShadow: "0 2px 5px rgba(59, 130, 246, 0.3), 0 1px 2px rgba(0, 0, 0, 0.1)",
                                }}
                                aria-label="Send message"
                              >
                                <motion.div
                                  className="relative"
                                  whileHover={{ rotate: prefersReducedMotion ? 0 : 15 }}
                                  transition={{ type: "spring", stiffness: 700, damping: 15 }}
                                >
                                  <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="16"
                                    height="16"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    stroke="currentColor"
                                    strokeWidth="2.5"
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    className="text-white"
                                  >
                                    <path d="M22 2L11 13"></path>
                                    <path d="M22 2L15 22L11 13L2 9L22 2Z"></path>
                                  </svg>

                                  {/* Subtle glow effect */}
                                  <motion.div
                                    className="absolute inset-0 rounded-full bg-white/20 blur-sm"
                                    initial={{ opacity: 0, scale: 0.8 }}
                                    animate={{ opacity: [0, 0.5, 0], scale: [0.8, 1.2, 0.8] }}
                                    transition={{
                                      duration: 2,
                                      repeat: Number.POSITIVE_INFINITY,
                                      repeatType: "loop",
                                      ease: "easeInOut",
                                    }}
                                  />
                                </motion.div>
                              </motion.button>
                            ) : (
                              <motion.div
                                key="send-inactive"
                                className="absolute right-3 top-1/2 transform -translate-y-1/2 p-2 rounded-full bg-slate-700/50 text-slate-500 z-20"
                                initial={{ scale: 0.8, opacity: 0, y: "-50%" }}
                                animate={{
                                  scale: 1,
                                  opacity: 0.7,
                                  y: "-50%",
                                  transition: { type: "spring", stiffness: 500, damping: 15 },
                                }}
                                exit={{
                                  scale: 0.8,
                                  opacity: 0,
                                  y: "-50%",
                                  transition: { duration: 0.15, ease: "easeOut" },
                                }}
                              >
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  stroke="currentColor"
                                  strokeWidth="2"
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                >
                                  <path d="M22 2L11 13"></path>
                                  <path d="M22 2L15 22L11 13L2 9L22 2Z"></path>
                                </svg>
                              </motion.div>
                            )}
                          </AnimatePresence>
                        </div>
                      </motion.div>
                    </div>

                    {/* Enhanced character counter with spring physics */}
                    <div className="relative h-6 mt-1 ml-2">
                      <AnimatePresence>
                        {newMessage.length > 0 && (
                          <motion.div
                            className={`absolute left-0 text-xs font-medium ${isNearLimit ? "text-amber-400" : "text-slate-400"
                              } ${newMessage.length >= charLimit ? "text-red-400" : ""}`}
                            initial={{ opacity: 0, y: -10, scale: 0.9 }}
                            animate={{
                              opacity: 0.9,
                              y: 0,
                              scale: 1,
                              transition: { type: "spring", stiffness: 500, damping: 30 },
                            }}
                            exit={{
                              opacity: 0,
                              y: -5,
                              scale: 0.95,
                              transition: { duration: 0.2, ease: "easeOut" },
                            }}
                          >
                            <div className="flex items-center gap-1.5">
                              {isTyping && (
                                <motion.div
                                  className="flex space-x-1"
                                  initial={{ opacity: 0, width: 0 }}
                                  animate={{
                                    opacity: 1,
                                    width: "auto",
                                    transition: { duration: 0.2 },
                                  }}
                                  exit={{
                                    opacity: 0,
                                    width: 0,
                                    transition: { duration: 0.2 },
                                  }}
                                >
                                  {[0, 0.2, 0.4].map((delay, i) => (
                                    <motion.div
                                      key={i}
                                      className="w-1 h-1 rounded-full bg-blue-400"
                                      animate={{
                                        y: prefersReducedMotion ? 0 : [0, -3, 0],
                                        opacity: [0.5, 1, 0.5],
                                      }}
                                      transition={{
                                        y: { duration: 0.6, repeat: Number.POSITIVE_INFINITY, delay },
                                        opacity: { duration: 0.6, repeat: Number.POSITIVE_INFINITY, delay },
                                      }}
                                    />
                                  ))}
                                </motion.div>
                              )}

                              <motion.span
                                animate={{
                                  color: isNearLimit
                                    ? newMessage.length >= charLimit
                                      ? "#f87171" // red-400
                                      : "#fbbf24" // amber-400
                                    : "#94a3b8", // slate-400
                                }}
                                transition={{ duration: 0.3 }}
                              >
                                {newMessage.length}/{charLimit}
                              </motion.span>
                            </div>
                          </motion.div>
                        )}
                      </AnimatePresence>
                    </div>

                    {/* Enhanced keyboard shortcut hints */}
                    <AnimatePresence>
                      {isFocused && (
                        <motion.div
                          className="absolute right-3 -bottom-6 text-xs text-slate-500 flex items-center gap-1.5"
                          initial={{ opacity: 0, y: -5 }}
                          animate={{
                            opacity: 0.7,
                            y: 0,
                            transition: { type: "spring", stiffness: 500, damping: 30, delay: 0.1 },
                          }}
                          exit={{
                            opacity: 0,
                            y: -5,
                            transition: { duration: 0.2 },
                          }}
                        >
                          <span className="px-1.5 py-0.5 bg-slate-800/50 rounded text-[10px] border border-slate-700/50">
                            Enter
                          </span>
                          <span>to send</span>
                        </motion.div>
                      )}
                    </AnimatePresence>

                    {/* Global keyboard shortcut hint */}
                    <AnimatePresence>
                      {!isFocused && !isTyping && (
                        <motion.div
                          className="absolute left-3 -bottom-6 text-xs text-slate-500 flex items-center gap-1.5"
                          initial={{ opacity: 0 }}
                          animate={{
                            opacity: 0.5,
                            transition: { delay: 1, duration: 0.3 },
                          }}
                          exit={{ opacity: 0 }}
                        >
                          <span className="px-1 py-0.5 bg-slate-800/50 rounded text-[10px] border border-slate-700/50">
                            {navigator.platform.includes("Mac") ? "⌘" : "Ctrl"}
                          </span>
                          <span className="px-1 py-0.5 bg-slate-800/50 rounded text-[10px] border border-slate-700/50">/</span>
                          <span>to focus</span>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </form>
                  {showAttachmentModal && (
                    <AttachmentModal
                      onClose={() => setShowAttachmentModal(false)}
                      onAttach={handleAttachment}
                    />
                  )}

                  {/* Add the keyframe animation for the gradient */}
                  <style jsx global>{`
    @keyframes gradient-x {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }
    .animate-gradient-x {
      background-size: 200% 200%;
      animation: gradient-x 3s linear infinite;
    }
  `}</style>
                </motion.div>

              </div>
            </TooltipProvider>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  )
}

interface AttachmentModalProps {
  onClose: () => void
  onAttach: (type: "image" | "video", url: string) => void
}

const AttachmentModal: React.FC<AttachmentModalProps> = ({ onClose, onAttach }) => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null)

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      setSelectedFile(file)
    }
  }

  const handleAttach = () => {
    if (selectedFile) {
      const type = selectedFile.type.startsWith("image/") ? "image" : "video"
      const url = URL.createObjectURL(selectedFile)
      onAttach(type, url)
    }
  }

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center"
      >
        <motion.div
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0.9, opacity: 0 }}
          className="bg-gray-800 p-6 rounded-lg shadow-xl"
        >
          <h3 className="text-lg font-semibold mb-4 text-gray-100">Attach File</h3>
          <div className="flex flex-col gap-4">
            <input
              type="file"
              accept="image/*,video/*"
              onChange={handleFileChange}
              className="hidden"
              id="file-input"
            />
            <label
              htmlFor="file-input"
              className="flex items-center justify-center gap-2 p-4 border-2 border-dashed border-gray-600 rounded-lg cursor-pointer hover:bg-gray-700 transition-colors duration-200"
            >
              {selectedFile ? (
                <span className="text-gray-300">{selectedFile.name}</span>
              ) : (
                <>
                  <Image className="w-6 h-6 text-gray-400" />
                  <Video className="w-6 h-6 text-gray-400" />
                  <span className="text-gray-400">Choose an image or video</span>
                </>
              )}
            </label>
            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={onClose} className="text-gray-300 border-gray-600 hover:bg-gray-700">
                Cancel
              </Button>
              <Button onClick={handleAttach} disabled={!selectedFile} className="bg-blue-600 hover:bg-blue-700">
                Attach
              </Button>
            </div>
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  )
}


const TypingIndicator: React.FC = () => {
  const dotVariants = {
    initial: { y: 0 },
    animate: { y: [0, -5, 0] },
  }

  return (
    <div className="flex space-x-1 mt-2">
      {[0, 1, 2].map((dot) => (
        <motion.div
          key={dot}
          className="w-2 h-2 bg-blue-400 rounded-full"
          variants={dotVariants}
          initial="initial"
          animate="animate"
          transition={{
            duration: 0.6,
            repeat: Number.POSITIVE_INFINITY,
            repeatType: "loop",
            delay: dot * 0.2,
          }}
        />
      ))}
    </div>
  )
}

================
File: src/components/Editor/Client.tsx
================
"use client"

import React, { useState, useEffect, useRef } from "react"
import { motion, AnimatePresence, useAnimation, useInView } from "framer-motion"
import { createAvatar } from "@dicebear/core"
import { Sparkles, MessageSquare, Zap, Activity } from 'lucide-react'
import type { Style } from '@dicebear/core';
import { 
  lorelei, 
  bottts, 
  pixelArt, 
  adventurer,
  micah,
  openPeeps,
  avataaars,
  bigSmile,
  funEmoji,
  notionists,
  personas
} from '@dicebear/collection';
import Image from "next/image"

// Define avatar style type
type AvatarStyle = Style<{
  backgroundColor?: string[];
  seed: string;
}>;

// Background colors that work well with all styles
const commonBackgroundColors = [
  "b6e3f4",  // Light Blue
  "c0aede",  // Soft Purple
  "d1d4f9",  // Periwinkle
  "ffd5dc",  // Light Pink
  "ffdfbf"   // Light Peach
];

// Organized avatar styles with balance between masculine, feminine, and neutral options
const avatarStyles = [
  // Feminine-leaning styles
  lorelei as unknown as AvatarStyle,         // Artistic feminine
  notionists as unknown as AvatarStyle,      // Professional feminine
  personas as unknown as AvatarStyle,        // Modern feminine
  
  // Masculine-leaning styles
  adventurer as unknown as AvatarStyle,      // Adventure game masculine
  avataaars as unknown as AvatarStyle,       // Professional masculine
  bigSmile as unknown as AvatarStyle,        // Friendly masculine

  // Gender-neutral styles
  bottts as unknown as AvatarStyle,          // Robot/neutral
  pixelArt as unknown as AvatarStyle,        // Pixel art/neutral
  micah as unknown as AvatarStyle,           // Abstract/neutral
  openPeeps as unknown as AvatarStyle,       // Modern/neutral
  funEmoji as unknown as AvatarStyle         // Emoji/neutral
];

// Configuration for avatar creation
const avatarConfig = {
  backgroundColor: commonBackgroundColors
};

export { 
  avatarStyles, 
  avatarConfig,
  type AvatarStyle 
};

interface ClientProps {
  user: string
  isActive: boolean
  isTyping: boolean
  lastActive: string
  messageCount: number
  mood: "happy" | "neutral" | "busy" | null
}

const moodColors = {
  happy: "#4ade80",
  neutral: "#60a5fa",
  busy: "#f87171"
} as const

const moodEmojis = {
  happy: "😊",
  neutral: "😐",
  busy: "😓"
} as const

// const avatarStyles = [
//   bottts as unknown as AvatarStyle,
//   lorelei as unknown as AvatarStyle,
//   micah as unknown as AvatarStyle,
//   pixelArt as unknown as AvatarStyle,
//   adventurer as unknown as AvatarStyle,
// ];

const TypingAnimation = () => {
  return (
    <div className="flex space-x-1">
      {[0, 1, 2].map((dot) => (
        <motion.div
          key={dot}
          className="w-2 h-2 bg-blue-400 rounded-full"
          initial={{ y: 0 }}
          animate={{
            y: [0, -6, 0],
            transition: {
              duration: 0.6,
              repeat: Infinity,
              delay: dot * 0.2,
            },
          }}
        />
      ))}
    </div>
  )
}

export const Client: React.FC<ClientProps> = ({ 
  user, 
  isActive, 
  isTyping, 
  lastActive, 
  messageCount, 
  mood 
}) => {
  const [avatar, setAvatar] = useState("")
  const controls = useAnimation()
  const ref = useRef(null)
  const isInView = useInView(ref, { once: true })

  useEffect(() => {
    // Get consistent avatar style for user
    const styleIndex = user
      .split('')
      .reduce((acc, char) => acc + char.charCodeAt(0), 0) % avatarStyles.length;
    const style = avatarStyles[styleIndex];
    
    const avatarSvg = createAvatar(style, {
      seed: user,
      backgroundColor: ["b6e3f4", "c0aede", "d1d4f9", "ffd5dc", "ffdfbf"],
    }).toDataUri()
    
    setAvatar(avatarSvg)
  }, [user])

  useEffect(() => {
    if (isInView) {
      controls.start("visible")
    }
  }, [controls, isInView])

  const cardVariants = {
    hidden: { opacity: 0, y: 50 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.6,
        ease: "easeOut",
        when: "beforeChildren",
        staggerChildren: 0.1,
      },
    },
  } as const

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.6, ease: "easeOut" },
    },
  } as const

  return (
    <motion.div
      ref={ref}
      className="relative flex items-center overflow-y-scroll space-x-4 p-6 rounded-xl bg-gradient-to-r from-slate-800/50 to-slate-700/50 hover:from-slate-700/50 hover:to-slate-600/50 transition-all duration-300 shadow-lg overflow-hidden"
      variants={cardVariants}
      initial="hidden"
      animate={controls}
      whileHover={{ scale: 1.03 }}
    >
      <motion.div className="relative z-10" variants={itemVariants}>
        <AnimatePresence>
          {isActive && (
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{
                scale: [1, 1.1, 1],
                opacity: [0.5, 1, 0.5],
              }}
              exit={{ scale: 0.8, opacity: 0 }}
              transition={{
                duration: 1.5,
                repeat: Infinity,
                ease: "easeInOut",
              }}
              className="absolute -inset-2 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 opacity-75 blur-lg"
            />
          )}
        </AnimatePresence>

        <motion.div
          className="relative rounded-full overflow-hidden"
          whileHover={{ scale: 1.1, rotate: 360 }}
          transition={{ type: "spring", stiffness: 300, damping: 10 }}
        >
          <Image width={16} height={16} src={avatar || "/placeholder.svg"} alt={user} className="w-16 h-16" />
        </motion.div>
      </motion.div>

      <div className="flex flex-col min-w-0 flex-1 z-10">
        <motion.div className="flex items-center space-x-2 mb-1" variants={itemVariants}>
          <motion.span
            className="font-medium text-white truncate text-lg"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.2 }}
          >
            {user}
          </motion.span>
          {isActive && (
            <motion.span
              className="text-xs bg-gradient-to-r from-cyan-500 via-blue-500 to-indigo-500 text-white px-2 py-1 rounded-full flex items-center space-x-1"
              initial={{ opacity: 0, scale: 0 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.4, type: "spring" }}
            >
              <Sparkles size={12} />
              <span>Active</span>
            </motion.span>
          )}
        </motion.div>

        <AnimatePresence mode="wait">
          {isTyping ? (
            <motion.div
              key="typing"
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="text-sm text-blue-400 flex items-center space-x-2"
              variants={itemVariants}
            >
              <MessageSquare size={14} />
              <span>typing</span>
              <TypingAnimation />
            </motion.div>
          ) : (
            <motion.div
              key="last-active"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 10 }}
              className="text-sm text-gray-400 flex items-center space-x-1"
              variants={itemVariants}
            >
              <Zap size={14} />
              <span>Last active: {lastActive}</span>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      <motion.div
        className="absolute top-2 right-2 bg-gray-700 rounded-full px-2 py-1 text-xs text-white flex items-center space-x-1"
        initial={{ opacity: 0, scale: 0, rotate: -45 }}
        animate={{ opacity: 1, scale: 1, rotate: 0 }}
        transition={{ delay: 0.6, type: "spring" }}
        whileHover={{ scale: 1.1, rotate: 5 }}
        variants={itemVariants}
      >
        <MessageSquare size={12} />
        <span>{messageCount}</span>
      </motion.div>

      <motion.div
        className="absolute bottom-2 right-2 flex items-center space-x-2"
        initial={{ opacity: 0, scale: 0 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ delay: 0.8, type: "spring" }}
        variants={itemVariants}
      >
        <Activity size={16} style={{ color: mood ? moodColors[mood] : '#9ca3af' }} />
        <span className="text-sm" style={{ color: mood ? moodColors[mood] : '#9ca3af' }}>
          {mood ? moodEmojis[mood] : ''}
        </span>
      </motion.div>
    </motion.div>
  )
}

export default Client

================
File: src/components/Editor/ConsoleOutput.tsx
================
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronDown, ChevronRight, X, Copy, Trash } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';

interface ConsoleOutputProps {
  isOpen: boolean;
  onClose: () => void;
  consoleOutput: Array<{ type: string; content: string }>;
  onClear: () => void;
  isSidebarOpen: boolean;
  height: number;
  onHeightChange: (height: number) => void;
  isDarkMode: boolean;
}

const ConsoleOutput = ({ 
  isOpen, 
  onClose, 
  consoleOutput, 
  onClear,
  isSidebarOpen,
  height,
  onHeightChange,
  isDarkMode
}: ConsoleOutputProps) => {
  const [isDragging, setIsDragging] = useState(false);
  const dragStartY = useRef(0);
  const dragStartHeight = useRef(height);
  const containerRef = useRef(null);

  useEffect(() => {
    const handleMouseMove = (e:any) => {
      if (!isDragging) return;
      
      const deltaY = dragStartY.current - e.clientY;
      const maxHeight = window.innerHeight * 0.8; // Maximum 80% of viewport height
      const newHeight = Math.min(Math.max(150, dragStartHeight.current + deltaY), maxHeight);
      onHeightChange(newHeight);
    };

    const handleMouseUp = () => {
      setIsDragging(false);
    };

    if (isDragging) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [isDragging, onHeightChange]);

  const handleDragStart = (e:any) => {
    dragStartY.current = e.clientY;
    dragStartHeight.current = height;
    setIsDragging(true);
  };

  return (
    <AnimatePresence>
      {isOpen && (
       <motion.div
       ref={containerRef}
       initial={{ height: 0, opacity: 0 }}
       animate={{ height, opacity: 1 }}
       exit={{ height: 0, opacity: 0 }}
       transition={{ type: "spring", bounce: 0.2, duration: 0.5 }}
       className={`fixed bottom-0 ${isSidebarOpen ? 'left-80' : 'left-0'} right-0 ${
         isDarkMode 
           ? 'bg-gray-800 border-t border-gray-700' 
           : 'bg-white border-t border-gray-200'
       }`}
       style={{ zIndex: 0 }}
     >
       {/* Drag Handle */}
       <div
         className="absolute -top-3 left-0 right-0 h-3 cursor-ns-resize flex items-center justify-center"
         onMouseDown={handleDragStart}
       >
         <div className={`w-20 h-1 ${
           isDarkMode 
             ? 'bg-gray-600 hover:bg-gray-500' 
             : 'bg-gray-300 hover:bg-gray-400'
         } rounded-full transition-colors`} />
       </div>
     
       <div className="h-full flex flex-col">
         {/* Console Header */}
         <div className={`flex items-center justify-between px-4 py-2 border-b ${
           isDarkMode 
             ? 'border-gray-700' 
             : 'border-gray-200'
         }`}>
           <div className="flex items-center space-x-2">
             <Button 
               variant="ghost" 
               size="sm"
               onClick={onClose}
               className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}
             >
               <ChevronDown className="h-4 w-4" />
             </Button>
             <span className={`text-base font-medium ${
               isDarkMode ? 'text-white' : 'text-gray-900'
             }`}>Console Output</span>
           </div>
           <div className="flex items-center space-x-2">
             <Button
               variant="ghost"
               size="sm"
               onClick={onClear}
               className={`hover:text-black ${
                 isDarkMode ? 'text-gray-400' : 'text-gray-500'
               }`}
             >
               <Trash className="h-4 w-4" />
             </Button>
             <Button
               variant="ghost"
               size="sm"
               onClick={onClose}
               className={`hover:text-black ${
                 isDarkMode ? 'text-gray-400' : 'text-gray-500'
               }`}
             >
               <X className="h-4 w-4" />
             </Button>
           </div>
         </div>
     
         {/* Console Content */}
         <ScrollArea className={`flex-1 p-4 font-mono ${
           isDarkMode ? 'text-gray-200' : 'text-gray-800'
         }`}>
           <motion.div layout className="space-y-2">
             {consoleOutput.map((log, index) => (
               <ConsoleEntry key={index} log={log} isDarkMode={isDarkMode} />
             ))}
             {consoleOutput.length === 0 && (
               <div className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>
                 No console output (run code)
               </div>
             )}
           </motion.div>
         </ScrollArea>
       </div>
     </motion.div>
      )}
    </AnimatePresence>
  );
};

interface ConsoleLog {
  type: string;
  content: string;
}
interface ConsoleEntryProps {
  log: ConsoleLog;
  isDarkMode: boolean;
}

const ConsoleEntry = ({ log, isDarkMode }: ConsoleEntryProps) => {
  const [isCopied, setIsCopied] = useState(false);

  const copyContent = async () => {
    await navigator.clipboard.writeText(log.content);
    setIsCopied(true);
    setTimeout(() => setIsCopied(false), 2000);
  };

  const contentLines = log.content.split('\n');

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      className={cn(
        "group rounded px-2 py-1 flex items-start space-x-2",
        log.type === 'error' 
          ? 'bg-red-500/10 text-red-400' 
          : log.type === 'warn' 
            ? 'bg-yellow-500/10 text-yellow-400'
            : isDarkMode
              ? 'bg-gray-700/50 text-gray-200'
              : 'bg-gray-100/50 text-gray-700'
      )}
    >
      <div className="mt-1">
        {log.type === 'error' ? '⚠️' : log.type === 'warn' ? '⚡' : '→'}
      </div>
      <div className="flex-1 break-all whitespace-pre-wrap">
        {contentLines.map((line, i) => (
          <React.Fragment key={i}>
            {line}
            {i < contentLines.length - 1 && <br />}
          </React.Fragment>
        ))}
      </div>
      <Button
        variant="ghost"
        size="sm"
        className="opacity-0 group-hover:opacity-100 transition-opacity"
        onClick={copyContent}
      >
        {isCopied ? (
          <motion.span
            initial={{ scale: 0.5 }}
            animate={{ scale: 1 }}
            className="text-green-400"
          >
            ✓
          </motion.span>
        ) : (
          <Copy className="h-4 w-4" />
        )}
      </Button>
    </motion.div>
  );
};

export default ConsoleOutput;

================
File: src/components/Editor/MessageBubble.tsx
================
import React from "react"
import { motion } from "framer-motion"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import Image from "next/image"
import { createAvatar } from '@dicebear/core';
import { lorelei, bottts, pixelArt, adventurer } from '@dicebear/collection';
import type { Style } from '@dicebear/core';

interface Message {
  id: string
  content: string
  sender: string
  timestamp: number
  attachments?: { type: "image" | "video" | "audio"; url: string }[]
}

interface MessageBubbleProps {
  message: Message
  isOwnMessage: boolean
}

// Define specific types for our avatar configurations
type AvatarStyle = Style<{
  backgroundColor?: string[];
  seed: string;
}>;

interface AvatarStyleConfig {
  style: AvatarStyle;
  config: {
    backgroundColor: string[];
  };
}

const getAvatarUrl = (seed: string) => {
  const styles: AvatarStyleConfig[] = [
    {
      style: lorelei as unknown as AvatarStyle,
      config: {
        backgroundColor: ["b6e3f4", "c0aede", "d1d4f9", "ffd5dc", "ffdfbf"],
      }
    },
    {
      style: bottts as unknown as AvatarStyle,
      config: {
        backgroundColor: ["b6e3f4", "c0aede", "d1d4f9"],
      }
    },
    {
      style: pixelArt as unknown as AvatarStyle,
      config: {
        backgroundColor: ["b6e3f4", "c0aede", "d1d4f9"],
      }
    },
    {
      style: adventurer as unknown as AvatarStyle,
      config: {
        backgroundColor: ["b6e3f4", "c0aede", "d1d4f9"],
      }
    }
  ];

  // Get consistent style for user
  const styleIndex = seed
    .split('')
    .reduce((acc, char) => acc + char.charCodeAt(0), 0) % styles.length;
  const { style, config } = styles[styleIndex];

  // Create avatar with specific configuration
  const avatar = createAvatar(style, {
    seed,
    backgroundColor: config.backgroundColor,
  });

  return avatar.toDataUri();
};

export const MessageBubble: React.FC<MessageBubbleProps> = ({ message, isOwnMessage }) => {
  const bubbleVariants = {
    initial: { opacity: 0, scale: 0.8, y: 20 },
    animate: { opacity: 1, scale: 1, y: 0 },
    exit: { opacity: 0, scale: 0.8, y: -20 },
  } as const;

  const attachmentVariants = {
    initial: { opacity: 0, scale: 0.9 },
    animate: { opacity: 1, scale: 1 },
  } as const;

  const avatarVariants = {
    initial: { scale: 0.8, rotate: -10 },
    animate: { scale: 1, rotate: 0 },
    hover: { scale: 1.1, rotate: 10 },
  } as const;

  return (
    <motion.div
      layout
      initial="initial"
      animate="animate"
      exit="exit"
      variants={bubbleVariants}
      transition={{ type: "spring", stiffness: 500, damping: 30 }}
      className={`flex ${isOwnMessage ? "justify-end" : "justify-start"} mb-4`}
    >
      <div className={`flex ${isOwnMessage ? "flex-row-reverse" : "flex-row"} items-end group`}>
        <motion.div
          variants={avatarVariants}
          initial="initial"
          animate="animate"
          whileHover="hover"
          className="relative"
        >
          <Avatar className="w-8 h-8 ring-2 ring-offset-2 ring-offset-background transition-all duration-300
            ring-blue-500/50 group-hover:ring-blue-500">
            <AvatarImage src={getAvatarUrl(message.sender)} />
            <AvatarFallback className="bg-gradient-to-br from-blue-500 to-purple-500">
              {message.sender[0].toUpperCase()}
            </AvatarFallback>
          </Avatar>
          <motion.div
            className="absolute inset-0 bg-blue-500/20 rounded-full blur-md"
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.3 }}
          />
        </motion.div>

        <motion.div
          className={`max-w-[70%] break-words rounded-2xl px-4 py-2 ${
            isOwnMessage 
              ? "bg-gradient-to-br from-blue-600 to-blue-700 text-white ml-2" 
              : "bg-gradient-to-br from-gray-700 to-gray-800 text-gray-100 mr-2"
          } shadow-lg`}
          whileHover={{ scale: 1.02 }}
          transition={{ type: "spring", stiffness: 400, damping: 10 }}
        >
          <p className="text-sm">{message.content}</p>
          {message.attachments && message.attachments.length > 0 && (
            <motion.div
              className="mt-2"
              initial="initial"
              animate="animate"
              variants={attachmentVariants}
              transition={{ delay: 0.2 }}
            >
              {message.attachments.map((attachment, index) => (
                <React.Fragment key={index}>
                  {attachment.type === "image" && (
                    <div className="relative rounded-lg overflow-hidden shadow-lg">
                      <Image
                        src={attachment.url || "/placeholder.svg"}
                        alt="Image attachment"
                        width={200}
                        height={150}
                        className="rounded-lg object-cover transition-transform duration-300 hover:scale-105"
                      />
                    </div>
                  )}
                  {attachment.type === "video" && (
                    <video 
                      src={attachment.url} 
                      controls 
                      className="rounded-lg w-full max-w-[200px] shadow-lg" 
                    />
                  )}
                  {attachment.type === "audio" && (
                    <audio 
                      src={attachment.url} 
                      controls 
                      className="w-full rounded-lg shadow-lg" 
                    />
                  )}
                </React.Fragment>
              ))}
            </motion.div>
          )}
          <div className="text-xs text-gray-400 mt-1">
            {new Date(message.timestamp).toLocaleTimeString()}
          </div>
        </motion.div>
      </div>
    </motion.div>
  )
}

================
File: src/components/Editor/monaco-editor.tsx
================
import { useRef, useEffect } from 'react';
import Editor, { loader } from '@monaco-editor/react';
import { useSocket } from '@/providers/socketProvider';
import { ACTIONS } from '@/lib/actions';
import type { editor } from 'monaco-editor';

interface MonacoEditorProps {
  roomId: string;
  language?: string;
  theme?: string;
  fontSize?: number;
  value?: string;
  onChange?: (value: string) => void;
}

// One Dark Pro theme definition with proper types
const oneDarkPro: editor.IStandaloneThemeData = {
  base: 'vs-dark',
  inherit: true,
  rules: [
    { token: '', foreground: 'abb2bf' },
    { token: 'variable', foreground: 'e06c75' },
    { token: 'variable.predefined', foreground: 'e06c75' },
    { token: 'variable.parameter', foreground: 'abb2bf' },
    { token: 'keyword', foreground: 'c678dd' },
    { token: 'keyword.control', foreground: 'c678dd' },
    { token: 'keyword.operator', foreground: 'c678dd' },
    { token: 'storage', foreground: 'c678dd' },
    { token: 'storage.type', foreground: 'c678dd' },
    { token: 'constant', foreground: 'd19a66' },
    { token: 'constant.numeric', foreground: 'd19a66' },
    { token: 'constant.character', foreground: 'd19a66' },
    { token: 'constant.language', foreground: 'd19a66' },
    { token: 'support', foreground: '61afef' },
    { token: 'support.function', foreground: '61afef' },
    { token: 'support.constant', foreground: 'd19a66' },
    { token: 'support.type', foreground: '56b6c2' },
    { token: 'support.class', foreground: 'e5c07b' },
    { token: 'string', foreground: '98c379' },
    { token: 'comment', foreground: '5c6370', fontStyle: 'italic' },
    { token: 'function', foreground: '61afef' },
    { token: 'function.declaration', foreground: '61afef' },
    { token: 'entity.name.type', foreground: 'e5c07b' },
    { token: 'entity.name.class', foreground: 'e5c07b' },
    { token: 'entity.name.function', foreground: '61afef' },
    { token: 'punctuation.definition.string', foreground: '98c379' },
    { token: 'punctuation.definition.variable', foreground: 'e06c75' },
    { token: 'punctuation.definition.string.begin', foreground: '98c379' },
    { token: 'punctuation.definition.string.end', foreground: '98c379' },
    { token: 'punctuation.definition.parameters', foreground: 'abb2bf' },
    { token: 'punctuation.definition.heading', foreground: '61afef' },
    { token: 'punctuation.definition.identity', foreground: '61afef' },
    { token: 'meta.brace', foreground: 'abb2bf' },
    { token: 'meta.delimiter.period', foreground: 'abb2bf' },
    { token: 'meta.selector', foreground: '98c379' },
    { token: 'invalid', foreground: 'ffffff', background: 'e05252' }
  ],
  colors: {
    'editor.background': '#282c34',
    'editor.foreground': '#abb2bf',
    'editor.lineHighlightBackground': '#2c313c',
    'editor.selectionBackground': '#3e4451',
    'editor.findMatchBackground': '#42557b',
    'editor.findMatchHighlightBackground': '#314365',
    'editorCursor.foreground': '#528bff',
    'editorWhitespace.foreground': '#3b4048',
    'editorIndentGuide.background': '#3b4048',
    'editorIndentGuide.activeBackground': '#c8c8c859',
    'editor.selectionHighlightBorder': '#222218',
    'editorLineNumber.foreground': '#495162',
    'editorLineNumber.activeForeground': '#abb2bf',
    'editorBracketMatch.background': '#515a6b',
    'editorBracketMatch.border': '#515a6b',
    'tab.activeBackground': '#282c34',
    'tab.inactiveBackground': '#21252b',
    'tab.border': '#181a1f',
    'tab.activeBorder': '#528bff'
  }
};

const MonacoEditor = ({ 
  roomId, 
  language = 'javascript',
  fontSize = 14,
  value,
  onChange 
}: MonacoEditorProps) => {
  const editorRef = useRef<editor.IStandaloneCodeEditor | null>(null);
  const { socket } = useSocket();
  const searchParams = new URLSearchParams(window.location.search);
  const currentUsername = searchParams.get('username');

  // Define Monaco theme before editor mounts
  useEffect(() => {
    const defineTheme = async () => {
      const monaco = await loader.init();
      monaco.editor.defineTheme('onedarkpro', oneDarkPro);
    };
    defineTheme();
  }, []);

  const handleEditorChange = (value: string | undefined) => {
    if (!value || !currentUsername) return;
    
    // Emit code change
    socket?.emit(ACTIONS.CODE_CHANGE, {
      roomId,
      code: value,
    });

    // Emit typing event with username
    socket?.emit(ACTIONS.TYPING, {
      roomId,
      username: currentUsername
    });
    
    onChange?.(value);
  };

  const handleEditorDidMount = (editor: editor.IStandaloneCodeEditor, monaco: typeof import('monaco-editor')) => {
    editorRef.current = editor;
    monaco.editor.setTheme('onedarkpro');
  };

  const options: editor.IStandaloneEditorConstructionOptions = {
    fontSize,
    minimap: { enabled: true },
    scrollBeyondLastLine: false,
    wordWrap: 'on',
    autoClosingBrackets: 'always',
    autoClosingQuotes: 'always',
    formatOnPaste: true,
    formatOnType: true,
    fontFamily: 'JetBrains Mono, monospace',
    fontLigatures: true,
    cursorBlinking: 'smooth',
    smoothScrolling: true,
    cursorSmoothCaretAnimation: 'on',
    renderLineHighlight: 'all',
    contextmenu: true,
    mouseWheelZoom: true,
    lineNumbers: 'on',
    // renderIndentGuides: true,
    automaticLayout: true,
    padding: { top: 16, bottom: 16 }
  };

  return (
    <Editor
      height="100%"
      defaultLanguage={language}
      language={language}
      theme="onedarkpro"
      value={value}
      options={options}
      onChange={handleEditorChange}
      onMount={handleEditorDidMount}
      className="w-full h-full min-h-[300px] border border-gray-700 rounded-lg overflow-hidden"
    />
  );
};

export default MonacoEditor;

================
File: src/components/Editor/TypingIndicator.tsx
================
// src/components/TypingIndicator.tsx
'use client';

import { motion } from 'framer-motion';

interface TypingIndicatorProps {
  activeUser: string | null;
}

export const TypingIndicator = ({ activeUser }: TypingIndicatorProps) => {
  if (!activeUser) return null;

  return (
    <motion.div 
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="flex items-center space-x-2 py-2 px-4 rounded-lg bg-slate-800/50"
    >
      <span className="text-sm text-white/90">{activeUser} is typing</span>
      <div className="flex space-x-1">
        {[...Array(3)].map((_, i) => (
          <motion.div
            key={i}
            className="w-1.5 h-1.5 bg-blue-400 rounded-full"
            animate={{
              y: ["0%", "-50%", "0%"],
            }}
            transition={{
              duration: 0.6,
              repeat: Infinity,
              delay: i * 0.2,
            }}
          />
        ))}
      </div>
    </motion.div>
  );
};

export default TypingIndicator;

================
File: src/components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item 
    ref={ref} 
    className={cn("border-b", className)} 
    {...props} 
  />
))
AccordionItem.displayName = "AccordionItem"

type BaseProps = Omit<React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>, 'children'>;

interface AccordionTriggerProps extends BaseProps {
  children: React.ReactNode | ((props: { isExpanded: boolean }) => React.ReactNode);
}

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  AccordionTriggerProps
>(({ className, children, ...props }, ref) => {
  const [isExpanded, setIsExpanded] = React.useState(false)

  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        ref={ref}
        className={cn(
          "flex flex-1 items-center justify-between transition-all",
          className
        )}
        {...props}
        onMouseDown={() => setIsExpanded(!isExpanded)}
      >
        {typeof children === "function" ? children({ isExpanded }) : children}
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
})
AccordionTrigger.displayName = "AccordionTrigger"

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className={cn(
      "overflow-hidden text-sm transition-all",
      "data-[state=closed]:animate-accordion-up",
      "data-[state=open]:animate-accordion-down"
    )}
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = "AccordionContent"

export { 
  Accordion,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
  type AccordionTriggerProps
}

================
File: src/components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: src/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: src/components/ui/button.tsx
================
import * as React from 'react';
import { Slot, Slottable } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';

const buttonVariants = cva(
  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      effect: {
        expandIcon: 'group gap-0 relative',
        ringHover: 'transition-all duration-300 hover:ring-2 hover:ring-primary/90 hover:ring-offset-2',
        shine:
          'before:animate-shine relative overflow-hidden before:absolute before:inset-0 before:rounded-[inherit] before:bg-[linear-gradient(45deg,transparent_25%,rgba(255,255,255,0.5)_50%,transparent_75%,transparent_100%)] before:bg-[length:250%_250%,100%_100%] before:bg-no-repeat background-position_0s_ease',
        shineHover:
          'relative overflow-hidden before:absolute before:inset-0 before:rounded-[inherit] before:bg-[linear-gradient(45deg,transparent_25%,rgba(255,255,255,0.5)_50%,transparent_75%,transparent_100%)] before:bg-[length:250%_250%,100%_100%] before:bg-[position:200%_0,0_0] before:bg-no-repeat before:transition-[background-position_0s_ease] hover:before:bg-[position:-100%_0,0_0] before:duration-1000',
        gooeyRight:
        'relative z-0 overflow-hidden transition-all duration-50 before:absolute before:inset-0 before:-z-10 before:translate-x-[150%] before:translate-y-[150%] before:scale-[2.5] before:rounded-[100%] before:bg-primary before:transition-transform before:duration-1000 hover:text-primary-foreground hover:before:translate-x-[0%] hover:before:translate-y-[0%]',
        gooeyLeft:
        'relative z-0 overflow-hidden transition-all duration-50 data-[color=white]:after:bg-white data-[color=red]:after:bg-red-600 after:absolute after:inset-0 after:-z-10 after:translate-x-[-150%] after:translate-y-[150%] after:scale-[2.5] after:rounded-[100%] after:transition-transform after:duration-1000 data-[color=white]:hover:text-white data-[color=red]:hover:text-white hover:after:translate-x-[0%] hover:after:translate-y-[0%]',
        underline:
          'relative !no-underline after:absolute after:bg-primary after:bottom-2 after:h-[1px] after:w-2/3 after:origin-bottom-left after:scale-x-100 hover:after:origin-bottom-right hover:after:scale-x-0 after:transition-transform after:ease-in-out after:duration-300',
        hoverUnderline:
          'relative !no-underline after:absolute after:bg-primary after:bottom-2 after:h-[1px] after:w-2/3 after:origin-bottom-right after:scale-x-0 hover:after:origin-bottom-left hover:after:scale-x-100 after:transition-transform after:ease-in-out after:duration-300',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

interface IconProps {
  icon: React.ElementType;
  iconPlacement: 'left' | 'right';
}

interface IconRefProps {
  icon?: never;
  iconPlacement?: undefined;
}

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

export type ButtonIconProps = IconProps | IconRefProps;

const Button = React.forwardRef<HTMLButtonElement, ButtonProps & ButtonIconProps>(
  ({ className, variant, effect, size, icon: Icon, iconPlacement, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button';
    return (
      <Comp className={cn(buttonVariants({ variant, effect, size, className }))} ref={ref} {...props}>
        {Icon &&
          iconPlacement === 'left' &&
          (effect === 'expandIcon' ? (
            <div className="w-0 translate-x-[0%] pr-0 opacity-0 transition-all duration-200 group-hover:w-5 group-hover:translate-x-100 group-hover:pr-2 group-hover:opacity-100">
              <Icon />
            </div>
          ) : (
            <Icon />
          ))}
        <Slottable>{props.children}</Slottable>
        {Icon &&
          iconPlacement === 'right' &&
          (effect === 'expandIcon' ? (
            <div className="w-0 translate-x-[100%] pl-0 opacity-0 transition-all duration-200 group-hover:w-5 group-hover:translate-x-0 group-hover:pl-2 group-hover:opacity-100">
              <Icon />
            </div>
          ) : (
            <Icon />
          ))}
      </Comp>
    );
  }
);
Button.displayName = 'Button';

export { Button, buttonVariants };

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: src/components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/placeholders-and-vanish-input.tsx
================
"use client";

import { AnimatePresence, motion } from "framer-motion";
import { useCallback, useEffect, useRef, useState } from "react";
import { cn } from "@/lib/utils";

export function PlaceholdersAndVanishInput({
  placeholders,
  onChange,
  onSubmit,
}: {
  placeholders: string[];
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;
}) {
  const [currentPlaceholder, setCurrentPlaceholder] = useState(0);
  const [isFocused, setIsFocused] = useState(false);
  const [isHovered, setIsHovered] = useState(false);

  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const startAnimation = () => {
    intervalRef.current = setInterval(() => {
      setCurrentPlaceholder((prev) => (prev + 1) % placeholders.length);
    }, 3000);
  };
  const handleVisibilityChange = () => {
    if (document.visibilityState !== "visible" && intervalRef.current) {
      clearInterval(intervalRef.current); // Clear the interval when the tab is not visible
      intervalRef.current = null;
    } else if (document.visibilityState === "visible") {
      startAnimation(); // Restart the interval when the tab becomes visible
    }
  };

  useEffect(() => {
    startAnimation();
    document.addEventListener("visibilitychange", handleVisibilityChange);

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [placeholders]);

  const canvasRef = useRef<HTMLCanvasElement>(null);
  const newDataRef = useRef<any[]>([]);
  const inputRef = useRef<HTMLInputElement>(null);
  const [value, setValue] = useState("");
  const [animating, setAnimating] = useState(false);

  const draw = useCallback(() => {
    if (!inputRef.current) return;
    const canvas = canvasRef.current;
    if (!canvas) return;
    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    canvas.width = 800;
    canvas.height = 800;
    ctx.clearRect(0, 0, 800, 800);
    const computedStyles = getComputedStyle(inputRef.current);

    const fontSize = parseFloat(computedStyles.getPropertyValue("font-size"));
    ctx.font = `${fontSize * 2}px ${computedStyles.fontFamily}`;
    ctx.fillStyle = "#FFF";
    ctx.fillText(value, 16, 40);

    const imageData = ctx.getImageData(0, 0, 800, 800);
    const pixelData = imageData.data;
    const newData: any[] = [];

    for (let t = 0; t < 800; t++) {
      let i = 4 * t * 800;
      for (let n = 0; n < 800; n++) {
        let e = i + 4 * n;
        if (
          pixelData[e] !== 0 &&
          pixelData[e + 1] !== 0 &&
          pixelData[e + 2] !== 0
        ) {
          newData.push({
            x: n,
            y: t,
            color: [
              pixelData[e],
              pixelData[e + 1],
              pixelData[e + 2],
              pixelData[e + 3],
            ],
          });
        }
      }
    }

    newDataRef.current = newData.map(({ x, y, color }) => ({
      x,
      y,
      r: 1,
      color: `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${color[3]})`,
    }));
  }, [value]);

  useEffect(() => {
    draw();
  }, [value, draw]);

  const animate = (start: number) => {
    const animateFrame = (pos: number = 0) => {
      requestAnimationFrame(() => {
        const newArr = [];
        for (let i = 0; i < newDataRef.current.length; i++) {
          const current = newDataRef.current[i];
          if (current.x < pos) {
            newArr.push(current);
          } else {
            if (current.r <= 0) {
              current.r = 0;
              continue;
            }
            current.x += Math.random() > 0.5 ? 1 : -1;
            current.y += Math.random() > 0.5 ? 1 : -1;
            current.r -= 0.05 * Math.random();
            newArr.push(current);
          }
        }
        newDataRef.current = newArr;
        const ctx = canvasRef.current?.getContext("2d");
        if (ctx) {
          ctx.clearRect(pos, 0, 800, 800);
          newDataRef.current.forEach((t) => {
            const { x: n, y: i, r: s, color: color } = t;
            if (n > pos) {
              ctx.beginPath();
              ctx.rect(n, i, s, s);
              ctx.fillStyle = color;
              ctx.strokeStyle = color;
              ctx.stroke();
            }
          });
        }
        if (newDataRef.current.length > 0) {
          animateFrame(pos - 8);
        } else {
          setValue("");
          setAnimating(false);
        }
      });
    };
    animateFrame(start);
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter" && !animating) {
      vanishAndSubmit();
    }
  };

  const vanishAndSubmit = () => {
    setAnimating(true);
    draw();

    const value = inputRef.current?.value || "";
    if (value && inputRef.current) {
      const maxX = newDataRef.current.reduce(
        (prev, current) => (current.x > prev ? current.x : prev),
        0
      );
      animate(maxX);
    }
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    vanishAndSubmit();
    onSubmit && onSubmit(e);
  };

  // Get the active state for border animation
  const isActive = animating || isFocused;

  return (
    <div className="relative w-full max-w-xl mx-auto">
      {/* Animated border - positioned behind the form */}
      {/* Replace these two motion.div elements for enhanced pulsing */}

      {/* Animated border - positioned behind the form */}
      <motion.div
        className="absolute inset-0 rounded-full overflow-hidden"
        initial={{ opacity: 0 }}
        animate={{
          opacity: isActive ? 1 : isHovered ? 0.7 : 0,
        }}
        transition={{ duration: 0.2 }}
      >
        <motion.div
          className="absolute inset-0 bg-gradient-to-r from-blue-400 via-purple-500 to-pink-400"
          animate={{
            backgroundPosition: isActive ? ["0% center", "100% center"] : "0% center"
          }}
          transition={{
            duration: 2,
            repeat: Infinity,
            repeatType: "reverse"
          }}
          style={{ backgroundSize: "200% 100%" }}
        />
      </motion.div>

      {/* Enhanced pulsing glow effect */}
      <motion.div
        className="absolute inset-[-6px] rounded-full pointer-events-none"
        animate={{
          scale: isActive ? [1, 1.02, 1] : 1,
          opacity: isActive ? [0.7, 0.9, 0.7] : 0.4,
        }}
        transition={{
          duration: 1.5,
          repeat: Infinity,
          repeatType: "reverse",
        }}
        style={{
          background: "linear-gradient(90deg, #60a5fa, #a78bfa, #f472b6, #60a5fa)",
          backgroundSize: "400% 100%",
          filter: "blur(8px)",
          zIndex: -1
        }}
      />

      {/* Add this new element for extra brightness */}
      <motion.div
        className="absolute inset-[-2px] rounded-full pointer-events-none"
        animate={{
          opacity: isActive ? [0.4, 0.8, 0.4] : 0,
          backgroundPosition: ["0% center", "100% center"],
        }}
        transition={{
          opacity: {
            duration: 1,
            repeat: Infinity,
            repeatType: "reverse",
          },
          backgroundPosition: {
            duration: 3,
            repeat: Infinity,
            repeatType: "reverse",
          }
        }}
        style={{
          background: "linear-gradient(90deg, #3b82f680, #8b5cf680, #ec489980, #3b82f680)",
          backgroundSize: "200% 100%",
          filter: "blur(3px)",
          zIndex: -1
        }}
      />

      <form
        className={cn(
          "w-full relative bg-white dark:bg-zinc-800 h-12 rounded-full overflow-hidden transition duration-200 border-2 border-transparent",
          value && "bg-gray-50 dark:bg-zinc-700"
        )}
        style={{ zIndex: 10 }}  // Ensure the form is above the animations
        onSubmit={handleSubmit}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        <canvas
          className={cn(
            "absolute pointer-events-none text-base transform scale-50 top-[20%] left-2 sm:left-8 origin-top-left filter invert dark:invert-0 pr-20",
            !animating ? "opacity-0" : "opacity-100"
          )}
          ref={canvasRef}
        />
        <input
          onChange={(e) => {
            if (!animating) {
              setValue(e.target.value);
              onChange && onChange(e);
            }
          }}
          onKeyDown={handleKeyDown}
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          ref={inputRef}
          value={value}
          type="text"
          className={cn(
            "w-full relative text-sm sm:text-base z-50 border-none dark:text-white bg-transparent text-black h-full rounded-full focus:outline-none focus:ring-0 pl-4 sm:pl-10 pr-20",
            animating && "text-transparent dark:text-transparent"
          )}
        />

        <button
          disabled={!value}
          type="submit"
          className="absolute right-2 top-1/2 z-50 -translate-y-1/2 h-8 w-8 rounded-full disabled:bg-gray-100 bg-black dark:bg-zinc-900 dark:disabled:bg-zinc-800 transition duration-200 flex items-center justify-center"
        >
          <motion.svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="text-gray-300 h-4 w-4"
          >
            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
            <motion.path
              d="M5 12l14 0"
              initial={{
                strokeDasharray: "50%",
                strokeDashoffset: "50%",
              }}
              animate={{
                strokeDashoffset: value ? 0 : "50%",
              }}
              transition={{
                duration: 0.3,
                ease: "linear",
              }}
            />
            <path d="M13 18l6 -6" />
            <path d="M13 6l6 6" />
          </motion.svg>
        </button>

        <div className="absolute inset-0 flex items-center rounded-full pointer-events-none">
          <AnimatePresence mode="wait">
            {!value && (
              <motion.p
                initial={{
                  y: 5,
                  opacity: 0,
                }}
                key={`current-placeholder-${currentPlaceholder}`}
                animate={{
                  y: 0,
                  opacity: 1,
                }}
                exit={{
                  y: -15,
                  opacity: 0,
                }}
                transition={{
                  duration: 0.3,
                  ease: "linear",
                }}
                className="dark:text-zinc-500 text-sm sm:text-base font-normal text-neutral-500 pl-4 sm:pl-12 text-left w-[calc(100%-2rem)] truncate"
              >
                {placeholders[currentPlaceholder]}
              </motion.p>
            )}
          </AnimatePresence>
        </div>
      </form>
    </div>
  );
}

================
File: src/components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: src/components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: src/components/ui/slider.tsx
================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: src/components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: src/components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: src/components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: src/components/onedarkpro.json
================
{
    "inherit": true,
    "base": "vs-dark",
    "colors": {
      "activityBar.background": "#282c34",
      "activityBar.foreground": "#d7dae0",
      "activityBarBadge.background": "#4d78cc",
      "activityBarBadge.foreground": "#f8fafd",
      "badge.background": "#282c34",
      "button.background": "#404754",
      "button.secondaryBackground": "#30333d",
      "button.secondaryForeground": "#c0bdbd",
      "checkbox.border": "#404754",
      "debugToolBar.background": "#21252b",
      "descriptionForeground": "#abb2bf",
      "diffEditor.insertedTextBackground": "#00809b33",
      "dropdown.background": "#21252b",
      "dropdown.border": "#21252b",
      "editor.background": "#282c34",
      "editor.findMatchBackground": "#d19a6644",
      "editor.findMatchBorder": "#ffffff5a",
      "editor.findMatchHighlightBackground": "#ffffff22",
      "editor.foreground": "#abb2bf",
      "editorBracketHighlight.foreground1": "#d19a66",
      "editorBracketHighlight.foreground2": "#c678dd",
      "editorBracketHighlight.foreground3": "#56b6c2",
      "editorHoverWidget.highlightForeground": "#61afef",
      "editorInlayHint.foreground": "#abb2bf",
      "editorInlayHint.background": "#2c313c",
      "editor.lineHighlightBackground": "#2c313c",
      "editorLineNumber.activeForeground": "#abb2bf",
      "editorGutter.addedBackground": "#109868",
      "editorGutter.deletedBackground": "#9A353D",
      "editorGutter.modifiedBackground": "#948B60",
      "editorOverviewRuler.addedBackground": "#109868",
      "editorOverviewRuler.deletedBackground": "#9A353D",
      "editorOverviewRuler.modifiedBackground": "#948B60",
      "editor.selectionBackground": "#67769660",
      "editor.selectionHighlightBackground": "#ffffff10",
      "editor.selectionHighlightBorder": "#dddddd",
      "editor.wordHighlightBackground": "#d2e0ff2f",
      "editor.wordHighlightBorder": "#7f848e",
      "editor.wordHighlightStrongBackground": "#abb2bf26",
      "editor.wordHighlightStrongBorder": "#7f848e",
      "editorBracketMatch.background": "#515a6b",
      "editorBracketMatch.border": "#515a6b",
      "editorCursor.background": "#ffffffc9",
      "editorCursor.foreground": "#528bff",
      "editorError.foreground": "#c24038",
      "editorGroup.background": "#181a1f",
      "editorGroup.border": "#181a1f",
      "editorGroupHeader.tabsBackground": "#21252b",
      "editorHoverWidget.background": "#21252b",
      "editorHoverWidget.border": "#181a1f",
      "editorIndentGuide.activeBackground": "#c8c8c859",
      "editorIndentGuide.background": "#3b4048",
      "editorLineNumber.foreground": "#495162",
      "editorMarkerNavigation.background": "#21252b",
      "editorRuler.foreground": "#abb2bf26",
      "editorSuggestWidget.background": "#21252b",
      "editorSuggestWidget.border": "#181a1f",
      "editorSuggestWidget.selectedBackground": "#2c313a",
      "editorWarning.foreground": "#d19a66",
      "editorWhitespace.foreground": "#ffffff1d",
      "editorWidget.background": "#21252b",
      "focusBorder": "#3e4452",
      "gitDecoration.ignoredResourceForeground": "#636b78",
      "input.background": "#1d1f23",
      "input.foreground": "#abb2bf",
      "list.activeSelectionBackground": "#2c313a",
      "list.activeSelectionForeground": "#d7dae0",
      "list.focusBackground": "#323842",
      "list.focusForeground": "#f0f0f0",
      "list.highlightForeground": "#ecebeb",
      "list.hoverBackground": "#2c313a",
      "list.hoverForeground": "#abb2bf",
      "list.inactiveSelectionBackground": "#323842",
      "list.inactiveSelectionForeground": "#d7dae0",
      "list.warningForeground": "#d19a66",
      "menu.foreground": "#abb2bf",
      "menu.separatorBackground": "#343a45",
      "minimapGutter.addedBackground": "#109868",
      "minimapGutter.deletedBackground": "#9A353D",
      "minimapGutter.modifiedBackground": "#948B60",
      "panel.border": "#3e4452",
      "panelSectionHeader.background": "#21252b",
      "peekViewEditor.background": "#1b1d23",
      "peekViewEditor.matchHighlightBackground": "#29244b",
      "peekViewResult.background": "#22262b",
      "scrollbar.shadow": "#23252c",
      "scrollbarSlider.activeBackground": "#747d9180",
      "scrollbarSlider.background": "#4e566660",
      "scrollbarSlider.hoverBackground": "#5a637580",
      "settings.focusedRowBackground": "#282c34",
      "settings.headerForeground": "#fff",
      "sideBar.background": "#21252b",
      "sideBar.foreground": "#abb2bf",
      "sideBarSectionHeader.background": "#282c34",
      "sideBarSectionHeader.foreground": "#abb2bf",
      "statusBar.background": "#21252b",
      "statusBar.debuggingBackground": "#cc6633",
      "statusBar.debuggingBorder": "#ff000000",
      "statusBar.debuggingForeground": "#ffffff",
      "statusBar.foreground": "#9da5b4",
      "statusBar.noFolderBackground": "#21252b",
      "statusBarItem.remoteBackground": "#4d78cc",
      "statusBarItem.remoteForeground": "#f8fafd",
      "tab.activeBackground": "#282c34",
      "tab.activeBorder": "#b4b4b4",
      "tab.activeForeground": "#dcdcdc",
      "tab.border": "#181a1f",
      "tab.hoverBackground": "#323842",
      "tab.inactiveBackground": "#21252b",
      "tab.unfocusedHoverBackground": "#323842",
      "terminal.ansiBlack": "#3f4451",
      "terminal.ansiBlue": "#4aa5f0",
      "terminal.ansiBrightBlack": "#4f5666",
      "terminal.ansiBrightBlue": "#4dc4ff",
      "terminal.ansiBrightCyan": "#4cd1e0",
      "terminal.ansiBrightGreen": "#a5e075",
      "terminal.ansiBrightMagenta": "#de73ff",
      "terminal.ansiBrightRed": "#ff616e",
      "terminal.ansiBrightWhite": "#e6e6e6",
      "terminal.ansiBrightYellow": "#f0a45d",
      "terminal.ansiCyan": "#42b3c2",
      "terminal.ansiGreen": "#8cc265",
      "terminal.ansiMagenta": "#c162de",
      "terminal.ansiRed": "#e05561",
      "terminal.ansiWhite": "#d7dae0",
      "terminal.ansiYellow": "#d18f52",
      "terminal.background": "#282c34",
      "terminal.border": "#3e4452",
      "terminal.foreground": "#abb2bf",
      "terminal.selectionBackground": "#abb2bf30",
      "textBlockQuote.background": "#2e3440",
      "textBlockQuote.border": "#4b5362",
      "textLink.foreground": "#61afef",
      "textPreformat.foreground": "#d19a66",
      "titleBar.activeBackground": "#282c34",
      "titleBar.activeForeground": "#9da5b4",
      "titleBar.inactiveBackground": "#282c34",
      "titleBar.inactiveForeground": "#6b717d",
      "tree.indentGuidesStroke": "#ffffff1d",
      "walkThrough.embeddedEditorBackground": "#2e3440",
      "welcomePage.buttonHoverBackground": "#404754"
    },
    "rules": [
      {
        "foreground": "#abb2bf",
        "token": "meta.embedded"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.delayed.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.list.begin.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.list.end.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.ability.begin.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.ability.end.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.operator.assignment.as.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.separator.pipe.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.separator.delimiter.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.hash.unison"
      },
      {
        "foreground": "#c678dd",
        "token": "variable.other.generic-type.haskell"
      },
      {
        "foreground": "#d19a66",
        "token": "storage.type.haskell"
      },
      {
        "foreground": "#e06c75",
        "token": "support.variable.magic.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.period.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.element.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.parenthesis.begin.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.parenthesis.end.python"
      },
      {
        "foreground": "#e5c07b",
        "token": "variable.parameter.function.language.special.self.python"
      },
      {
        "foreground": "#e5c07b",
        "token": "variable.parameter.function.language.special.cls.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "storage.modifier.lifetime.rust"
      },
      {
        "foreground": "#61afef",
        "token": "support.function.std.rust"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.lifetime.rust"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.language.rust"
      },
      {
        "foreground": "#c678dd",
        "token": "support.constant.edge"
      },
      {
        "foreground": "#e06c75",
        "token": "constant.other.character-class.regexp"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.word"
      },
      {
        "foreground": "#d19a66",
        "token": "keyword.operator.quantifier.regexp"
      },
      {
        "foreground": "#abb2bf",
        "token": "variable.parameter.function"
      },
      {
        "foreground": "#5c6370",
        "token": "comment markup.link"
      },
      {
        "foreground": "#e5c07b",
        "token": "markup.changed.diff"
      },
      {
        "foreground": "#61afef",
        "token": "meta.diff.header.from-file"
      },
      {
        "foreground": "#61afef",
        "token": "meta.diff.header.to-file"
      },
      {
        "foreground": "#61afef",
        "token": "punctuation.definition.from-file.diff"
      },
      {
        "foreground": "#61afef",
        "token": "punctuation.definition.to-file.diff"
      },
      {
        "foreground": "#98c379",
        "token": "markup.inserted.diff"
      },
      {
        "foreground": "#e06c75",
        "token": "markup.deleted.diff"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.function.c"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.function.cpp"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.block.begin.bracket.curly.cpp"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.block.end.bracket.curly.cpp"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.terminator.statement.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.block.begin.bracket.curly.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.block.end.bracket.curly.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.parens.begin.bracket.round.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.parens.end.bracket.round.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.parameters.begin.bracket.round.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.parameters.end.bracket.round.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.key-value"
      },
      {
        "foreground": "#61afef",
        "token": "keyword.operator.expression.import"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.constant.math"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.property.math"
      },
      {
        "foreground": "#e5c07b",
        "token": "variable.other.constant"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.type.annotation.java"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.type.object.array.java"
      },
      {
        "foreground": "#e06c75",
        "token": "source.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.block.begin.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.block.end.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.method-parameters.begin.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.method-parameters.end.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "meta.method.identifier.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.method.begin.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.method.end.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.terminator.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.class.begin.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.class.end.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.inner-class.begin.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.inner-class.end.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "meta.method-call.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.class.begin.bracket.curly.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.class.end.bracket.curly.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.method.begin.bracket.curly.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.method.end.bracket.curly.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.period.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.bracket.angle.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.annotation.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "meta.method.body.java"
      },
      {
        "foreground": "#61afef",
        "token": "meta.method.java"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.modifier.import.java"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.type.java"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.type.generic.java"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.instanceof.java"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.definition.variable.name.java"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.logical"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.bitwise"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.channel"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.property-value.scss"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.property-value.css"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.css"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.scss"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.less"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.color.w3c-standard-color-name.css"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.color.w3c-standard-color-name.scss"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.list.comma.css"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.color.w3c-standard-color-name.css"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.type.vendored.property-name.css"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.module.node"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.object.module"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.module.node"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.type.module"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.other.readwrite"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.object-literal.key"
      },
      {
        "foreground": "#e06c75",
        "token": "support.variable.property"
      },
      {
        "foreground": "#e06c75",
        "token": "support.variable.object.process"
      },
      {
        "foreground": "#e06c75",
        "token": "support.variable.object.node"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.json"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.instanceof"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.new"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.ternary"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.optional"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.keyof"
      },
      {
        "foreground": "#e06c75",
        "token": "support.type.object.console"
      },
      {
        "foreground": "#d19a66",
        "token": "support.variable.property.process"
      },
      {
        "foreground": "#61afef",
        "token": "entity.name.function"
      },
      {
        "foreground": "#61afef",
        "token": "support.function.console"
      },
      {
        "foreground": "#abb2bf",
        "token": "keyword.operator.misc.rust"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.sigil.rust"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.delete"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.type.object.dom"
      },
      {
        "foreground": "#e06c75",
        "token": "support.variable.dom"
      },
      {
        "foreground": "#e06c75",
        "token": "support.variable.property.dom"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.arithmetic"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.comparison"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.decrement"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.increment"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.relational"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.assignment.c"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.comparison.c"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.c"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.increment.c"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.decrement.c"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.bitwise.shift.c"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.assignment.cpp"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.comparison.cpp"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.cpp"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.increment.cpp"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.decrement.cpp"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.bitwise.shift.cpp"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.delimiter"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.separator.c"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.separator.cpp"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.type.posix-reserved.c"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.type.posix-reserved.cpp"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.sizeof.c"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.sizeof.cpp"
      },
      {
        "foreground": "#d19a66",
        "token": "variable.parameter.function.language.python"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.type.python"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.logical.python"
      },
      {
        "foreground": "#d19a66",
        "token": "variable.parameter.function.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.arguments.begin.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.arguments.end.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.arguments.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.list.begin.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.list.end.python"
      },
      {
        "foreground": "#61afef",
        "token": "meta.function-call.generic.python"
      },
      {
        "foreground": "#d19a66",
        "token": "constant.character.format.placeholder.other.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "keyword.operator"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.assignment.compound"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.assignment.compound.js"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.assignment.compound.ts"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.namespace"
      },
      {
        "foreground": "#e06c75",
        "token": "variable"
      },
      {
        "foreground": "#abb2bf",
        "token": "variable.c"
      },
      {
        "foreground": "#e5c07b",
        "token": "variable.language"
      },
      {
        "foreground": "#abb2bf",
        "token": "token.variable.parameter.java"
      },
      {
        "foreground": "#e5c07b",
        "token": "import.storage.java"
      },
      {
        "foreground": "#c678dd",
        "token": "token.package.keyword"
      },
      {
        "foreground": "#abb2bf",
        "token": "token.package"
      },
      {
        "foreground": "#61afef",
        "token": "entity.name.function"
      },
      {
        "foreground": "#61afef",
        "token": "meta.require"
      },
      {
        "foreground": "#61afef",
        "token": "support.function.any-method"
      },
      {
        "foreground": "#61afef",
        "token": "variable.function"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.type.namespace"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.class"
      },
      {
        "foreground": "#e5c07b",
        "token": " entity.name.type.class"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.class.identifier.namespace.type"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.class"
      },
      {
        "foreground": "#e5c07b",
        "token": "variable.other.class.js"
      },
      {
        "foreground": "#e5c07b",
        "token": "variable.other.class.ts"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.other.class.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.type"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.control"
      },
      {
        "foreground": "#d19a66",
        "token": "control.elements"
      },
      {
        "foreground": "#d19a66",
        "token": " keyword.operator.less"
      },
      {
        "foreground": "#61afef",
        "token": "keyword.other.special-method"
      },
      {
        "foreground": "#c678dd",
        "token": "storage"
      },
      {
        "foreground": "#c678dd",
        "token": "token.storage"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.delete"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.in"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.of"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.instanceof"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.new"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.typeof"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.void"
      },
      {
        "foreground": "#e5c07b",
        "token": "token.storage.type.java"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.function"
      },
      {
        "foreground": "#abb2bf",
        "token": "support.type.property-name"
      },
      {
        "foreground": "#e06c75",
        "token": "support.type.property-name.toml"
      },
      {
        "foreground": "#e06c75",
        "token": " support.type.property-name.table.toml"
      },
      {
        "foreground": "#e06c75",
        "token": " support.type.property-name.array.toml"
      },
      {
        "foreground": "#abb2bf",
        "token": "support.constant.property-value"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.font-name"
      },
      {
        "foreground": "#abb2bf",
        "token": "meta.tag"
      },
      {
        "foreground": "#98c379",
        "token": "string"
      },
      {
        "foreground": "#56b6c2",
        "token": "constant.other.symbol"
      },
      {
        "foreground": "#d19a66",
        "token": "constant.numeric"
      },
      {
        "foreground": "#d19a66",
        "token": "constant"
      },
      {
        "foreground": "#d19a66",
        "token": "punctuation.definition.constant"
      },
      {
        "foreground": "#e06c75",
        "token": "entity.name.tag"
      },
      {
        "foreground": "#d19a66",
        "token": "entity.other.attribute-name"
      },
      {
        "foreground": "#61afef",
        "token": "entity.other.attribute-name.id"
      },
      {
        "foreground": "#d19a66",
        "token": "entity.other.attribute-name.class.css"
      },
      {
        "foreground": "#c678dd",
        "token": "meta.selector"
      },
      {
        "foreground": "#e06c75",
        "token": "markup.heading"
      },
      {
        "foreground": "#61afef",
        "token": "markup.heading punctuation.definition.heading"
      },
      {
        "foreground": "#61afef",
        "token": " entity.name.section"
      },
      {
        "foreground": "#e06c75",
        "token": "keyword.other.unit"
      },
      {
        "foreground": "#d19a66",
        "token": "markup.bold"
      },
      {
        "foreground": "#d19a66",
        "token": "todo.bold"
      },
      {
        "foreground": "#e5c07b",
        "token": "punctuation.definition.bold"
      },
      {
        "foreground": "#c678dd",
        "token": "markup.italic"
      },
      {
        "foreground": "#c678dd",
        "token": " punctuation.definition.italic"
      },
      {
        "foreground": "#c678dd",
        "token": "todo.emphasis"
      },
      {
        "foreground": "#c678dd",
        "token": "emphasis md"
      },
      {
        "foreground": "#e06c75",
        "token": "entity.name.section.markdown"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.heading.markdown"
      },
      {
        "foreground": "#e5c07b",
        "token": "punctuation.definition.list.begin.markdown"
      },
      {
        "foreground": "#abb2bf",
        "token": "markup.heading.setext"
      },
      {
        "foreground": "#d19a66",
        "token": "punctuation.definition.bold.markdown"
      },
      {
        "foreground": "#98c379",
        "token": "markup.inline.raw.markdown"
      },
      {
        "foreground": "#98c379",
        "token": "markup.inline.raw.string.markdown"
      },
      {
        "foreground": "#e5c07b",
        "token": "punctuation.definition.raw.markdown"
      },
      {
        "foreground": "#e5c07b",
        "token": "punctuation.definition.list.markdown"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.string.begin.markdown"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.string.end.markdown"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.metadata.markdown"
      },
      {
        "foreground": "#e06c75",
        "token": "beginning.punctuation.definition.list.markdown"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.metadata.markdown"
      },
      {
        "foreground": "#c678dd",
        "token": "markup.underline.link.markdown"
      },
      {
        "foreground": "#c678dd",
        "token": "markup.underline.link.image.markdown"
      },
      {
        "foreground": "#61afef",
        "token": "string.other.link.title.markdown"
      },
      {
        "foreground": "#61afef",
        "token": "string.other.link.description.markdown"
      },
      {
        "foreground": "#98c379",
        "token": "markup.raw.monospace.asciidoc"
      },
      {
        "foreground": "#e5c07b",
        "token": "punctuation.definition.asciidoc"
      },
      {
        "foreground": "#e5c07b",
        "token": "markup.list.asciidoc"
      },
      {
        "foreground": "#c678dd",
        "token": "markup.link.asciidoc"
      },
      {
        "foreground": "#c678dd",
        "token": "markup.other.url.asciidoc"
      },
      {
        "foreground": "#61afef",
        "token": "string.unquoted.asciidoc"
      },
      {
        "foreground": "#61afef",
        "token": "markup.other.url.asciidoc"
      },
      {
        "foreground": "#56b6c2",
        "token": "string.regexp"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.section.embedded"
      },
      {
        "foreground": "#e06c75",
        "token": " variable.interpolation"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.section.embedded.begin"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.section.embedded.end"
      },
      {
        "foreground": "#ffffff",
        "token": "invalid.illegal"
      },
      {
        "foreground": "#abb2bf",
        "token": "invalid.illegal.bad-ampersand.html"
      },
      {
        "foreground": "#e06c75",
        "token": "invalid.illegal.unrecognized-tag.html"
      },
      {
        "foreground": "#ffffff",
        "token": "invalid.broken"
      },
      {
        "foreground": "#ffffff",
        "token": "invalid.deprecated"
      },
      {
        "foreground": "#d19a66",
        "token": "invalid.deprecated.entity.other.attribute-name.html"
      },
      {
        "foreground": "#ffffff",
        "token": "invalid.unimplemented"
      },
      {
        "foreground": "#e06c75",
        "token": "source.json meta.structure.dictionary.json > string.quoted.json"
      },
      {
        "foreground": "#e06c75",
        "token": "source.json meta.structure.dictionary.json > string.quoted.json > punctuation.string"
      },
      {
        "foreground": "#98c379",
        "token": "source.json meta.structure.dictionary.json > value.json > string.quoted.json"
      },
      {
        "foreground": "#98c379",
        "token": "source.json meta.structure.array.json > value.json > string.quoted.json"
      },
      {
        "foreground": "#98c379",
        "token": "source.json meta.structure.dictionary.json > value.json > string.quoted.json > punctuation"
      },
      {
        "foreground": "#98c379",
        "token": "source.json meta.structure.array.json > value.json > string.quoted.json > punctuation"
      },
      {
        "foreground": "#56b6c2",
        "token": "source.json meta.structure.dictionary.json > constant.language.json"
      },
      {
        "foreground": "#56b6c2",
        "token": "source.json meta.structure.array.json > constant.language.json"
      },
      {
        "foreground": "#e06c75",
        "token": "support.type.property-name.json"
      },
      {
        "foreground": "#e06c75",
        "token": "support.type.property-name.json punctuation"
      },
      {
        "foreground": "#c678dd",
        "token": "text.html.laravel-blade source.php.embedded.line.html entity.name.tag.laravel-blade"
      },
      {
        "foreground": "#c678dd",
        "token": "text.html.laravel-blade source.php.embedded.line.html support.constant.laravel-blade"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.other.namespace.use.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.other.namespace.use-as.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.other.alias.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "meta.interface.php"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.error-control.php"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.type.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.array.begin.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.array.end.php"
      },
      {
        "foreground": "#f44747",
        "token": "invalid.illegal.non-null-typehinted.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.type.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "meta.other.type.phpdoc.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "keyword.other.type.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "keyword.other.array.phpdoc.php"
      },
      {
        "foreground": "#61afef",
        "token": "meta.function-call.php"
      },
      {
        "foreground": "#61afef",
        "token": "meta.function-call.object.php"
      },
      {
        "foreground": "#61afef",
        "token": "meta.function-call.static.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.parameters.begin.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.parameters.end.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.delimiter.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.scope.begin.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.scope.end.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.terminator.expression.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.arguments.begin.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.arguments.end.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.storage-type.begin.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.storage-type.end.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.array.begin.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.array.end.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.begin.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.end.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.begin.bracket.curly.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.end.bracket.curly.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.section.switch-block.end.bracket.curly.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.section.switch-block.start.bracket.curly.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.section.switch-block.begin.bracket.curly.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.section.switch-block.end.bracket.curly.php"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.core.rust"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.ext.php"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.std.php"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.core.php"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.parser-token.php"
      },
      {
        "foreground": "#61afef",
        "token": "entity.name.goto-label.php"
      },
      {
        "foreground": "#61afef",
        "token": "support.other.php"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.logical.php"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.bitwise.php"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.arithmetic.php"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.regexp.php"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.comparison.php"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.heredoc.php"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.nowdoc.php"
      },
      {
        "foreground": "#61afef",
        "token": "meta.function.decorator.python"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.token.decorator.python"
      },
      {
        "foreground": "#56b6c2",
        "token": "meta.function.decorator.identifier.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "function.parameter"
      },
      {
        "foreground": "#abb2bf",
        "token": "function.brace"
      },
      {
        "foreground": "#abb2bf",
        "token": "function.parameter.ruby"
      },
      {
        "foreground": "#abb2bf",
        "token": " function.parameter.cs"
      },
      {
        "foreground": "#56b6c2",
        "token": "constant.language.symbol.ruby"
      },
      {
        "foreground": "#56b6c2",
        "token": "constant.language.symbol.hashkey.ruby"
      },
      {
        "foreground": "#56b6c2",
        "token": "rgb-value"
      },
      {
        "foreground": "#d19a66",
        "token": "inline-color-decoration rgb-value"
      },
      {
        "foreground": "#d19a66",
        "token": "less rgb-value"
      },
      {
        "foreground": "#e06c75",
        "token": "selector.sass"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.primitive.ts"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.builtin.ts"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.primitive.tsx"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.builtin.tsx"
      },
      {
        "foreground": "#abb2bf",
        "token": "block.scope.end"
      },
      {
        "foreground": "#abb2bf",
        "token": "block.scope.begin"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.type.cs"
      },
      {
        "foreground": "#e06c75",
        "token": "entity.name.variable.local.cs"
      },
      {
        "foreground": "#61afef",
        "token": "token.info-token"
      },
      {
        "foreground": "#d19a66",
        "token": "token.warn-token"
      },
      {
        "foreground": "#f44747",
        "token": "token.error-token"
      },
      {
        "foreground": "#c678dd",
        "token": "token.debug-token"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.definition.template-expression.begin"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.definition.template-expression.end"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.section.embedded"
      },
      {
        "foreground": "#abb2bf",
        "token": "meta.template.expression"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.module"
      },
      {
        "foreground": "#61afef",
        "token": "support.type.type.flowtype"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.primitive"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.property.object"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.parameter.function.js"
      },
      {
        "foreground": "#98c379",
        "token": "keyword.other.template.begin"
      },
      {
        "foreground": "#98c379",
        "token": "keyword.other.template.end"
      },
      {
        "foreground": "#98c379",
        "token": "keyword.other.substitution.begin"
      },
      {
        "foreground": "#98c379",
        "token": "keyword.other.substitution.end"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.assignment"
      },
      {
        "foreground": "#e5c07b",
        "token": "keyword.operator.assignment.go"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.arithmetic.go"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.address.go"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.package.go"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.type.prelude.elm"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.elm"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.quasi.element"
      },
      {
        "foreground": "#e06c75",
        "token": "constant.character.entity"
      },
      {
        "foreground": "#56b6c2",
        "token": "entity.other.attribute-name.pseudo-element"
      },
      {
        "foreground": "#56b6c2",
        "token": "entity.other.attribute-name.pseudo-class"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.global.clojure"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.symbol.clojure"
      },
      {
        "foreground": "#56b6c2",
        "token": "constant.keyword.clojure"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.arguments.coffee"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.parameter.function.coffee"
      },
      {
        "foreground": "#98c379",
        "token": "source.ini"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.scope.prerequisites.makefile"
      },
      {
        "foreground": "#e5c07b",
        "token": "source.makefile"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.modifier.import.groovy"
      },
      {
        "foreground": "#61afef",
        "token": "meta.method.groovy"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.definition.variable.name.groovy"
      },
      {
        "foreground": "#98c379",
        "token": "meta.definition.class.inherited.classes.groovy"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.variable.semantic.hlsl"
      },
      {
        "foreground": "#c678dd",
        "token": "support.type.texture.hlsl"
      },
      {
        "foreground": "#c678dd",
        "token": "support.type.sampler.hlsl"
      },
      {
        "foreground": "#c678dd",
        "token": "support.type.object.hlsl"
      },
      {
        "foreground": "#c678dd",
        "token": "support.type.object.rw.hlsl"
      },
      {
        "foreground": "#c678dd",
        "token": "support.type.fx.hlsl"
      },
      {
        "foreground": "#c678dd",
        "token": "support.type.object.hlsl"
      },
      {
        "foreground": "#e06c75",
        "token": "text.variable"
      },
      {
        "foreground": "#e06c75",
        "token": "text.bracketed"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.swift"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.vb.asp"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.function.xi"
      },
      {
        "foreground": "#56b6c2",
        "token": "entity.name.class.xi"
      },
      {
        "foreground": "#e06c75",
        "token": "constant.character.character-class.regexp.xi"
      },
      {
        "foreground": "#c678dd",
        "token": "constant.regexp.xi"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.control.xi"
      },
      {
        "foreground": "#abb2bf",
        "token": "invalid.xi"
      },
      {
        "foreground": "#98c379",
        "token": "beginning.punctuation.definition.quote.markdown.xi"
      },
      {
        "foreground": "#7f848e",
        "token": "beginning.punctuation.definition.list.markdown.xi"
      },
      {
        "foreground": "#61afef",
        "token": "constant.character.xi"
      },
      {
        "foreground": "#61afef",
        "token": "accent.xi"
      },
      {
        "foreground": "#d19a66",
        "token": "wikiword.xi"
      },
      {
        "foreground": "#ffffff",
        "token": "constant.other.color.rgb-value.xi"
      },
      {
        "foreground": "#5c6370",
        "token": "punctuation.definition.tag.xi"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.label.cs"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.scope-resolution.function.call"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.scope-resolution.function.definition"
      },
      {
        "foreground": "#e06c75",
        "token": "entity.name.label.cs"
      },
      {
        "foreground": "#e06c75",
        "token": "markup.heading.setext.1.markdown"
      },
      {
        "foreground": "#e06c75",
        "token": "markup.heading.setext.2.markdown"
      },
      {
        "foreground": "#abb2bf",
        "token": " meta.brace.square"
      },
      {
        "foreground": "#7f848e",
        "fontStyle": "italic",
        "token": "comment"
      },
      {
        "foreground": "#7f848e",
        "fontStyle": "italic",
        "token": " punctuation.definition.comment"
      },
      {
        "foreground": "#5c6370",
        "token": "markup.quote.markdown"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.block.sequence.item.yaml"
      },
      {
        "foreground": "#56b6c2",
        "token": "constant.language.symbol.elixir"
      },
      {
        "foreground": "#56b6c2",
        "token": "constant.language.symbol.double-quoted.elixir"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.variable.parameter.cs"
      },
      {
        "foreground": "#e06c75",
        "token": "entity.name.variable.field.cs"
      },
      {
        "foreground": "#e06c75",
        "token": "markup.deleted"
      },
      {
        "foreground": "#98c379",
        "token": "markup.inserted"
      },
      {
        "fontStyle": "underline",
        "token": "markup.underline"
      },
      {
        "foreground": "#BE5046",
        "token": "punctuation.section.embedded.begin.php"
      },
      {
        "foreground": "#BE5046",
        "token": "punctuation.section.embedded.end.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "support.other.namespace.php"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.parameter.function.latex"
      },
      {
        "foreground": "#e5c07b",
        "token": "variable.other.object"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.other.constant.property"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.other.inherited-class"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.other.readwrite.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "entity.name.variable.parameter.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.colon.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "constant.other.php"
      },
      {
        "foreground": "#c678dd",
        "token": "constant.numeric.decimal.asm.x86_64"
      },
      {
        "foreground": "#d19a66",
        "token": "support.other.parenthesis.regexp"
      },
      {
        "foreground": "#56b6c2",
        "token": "constant.character.escape"
      },
      {
        "foreground": "#e06c75",
        "token": "string.regexp"
      },
      {
        "foreground": "#98c379",
        "token": "log.info"
      },
      {
        "foreground": "#e5c07b",
        "token": "log.warning"
      },
      {
        "foreground": "#e06c75",
        "token": "log.error"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.is"
      },
      {
        "foreground": "#e06c75",
        "token": "entity.name.label"
      },
      {
        "fontStyle": "italic",
        "token": "entity.other.attribute-name.js"
      },
      {
        "fontStyle": "italic",
        "token": "entity.other.attribute-name.ts"
      },
      {
        "fontStyle": "italic",
        "token": "entity.other.attribute-name.jsx"
      },
      {
        "fontStyle": "italic",
        "token": "entity.other.attribute-name.tsx"
      },
      {
        "fontStyle": "italic",
        "token": "variable.parameter"
      },
      {
        "fontStyle": "italic",
        "token": "variable.language.super"
      },
      {
        "fontStyle": "italic",
        "token": "comment.line.double-slash"
      },
      {
        "fontStyle": "italic",
        "token": "comment.block.documentation"
      },
      {
        "fontStyle": "italic",
        "token": "markup.italic.markdown"
      }
    ],
    "encodedTokensColors": []
  }

================
File: src/lib/actions.ts
================
export const ACTIONS = {
  JOIN: 'join',
  JOINED: 'joined',
  DISCONNECTED: 'disconnected',
  CODE_CHANGE: 'code-change',
  SYNC_CODE: 'sync-code',
  LEAVE: 'leave',
  COMPILE: 'compile',
  COMPILE_RESULT: 'compile-result',
  TYPING: 'typing',
  STOP_TYPING: 'stop-typing',
  SEND_MESSAGE: 'send-message',
  RECEIVE_MESSAGE: 'receive-message',
  SYNC_MESSAGES: 'sync-messages'  // Add this new action
}as const;

================
File: src/lib/languageConfig.ts
================
// 1. First, create a new file to hold language-specific configurations
// File: lib/languageConfig.ts

export interface LanguageConfig {
    name: string;
    extension: string;
    defaultCode: string;
    monacoLanguage: string;
  }
  
  export const SUPPORTED_LANGUAGES: Record<string, LanguageConfig> = {
    javascript: {
      name: "JavaScript",
      extension: "js",
      monacoLanguage: "javascript",
      defaultCode: 
  `// JavaScript Example
  function printPyramid(height) {
      let pattern = '';
      
      // Loop through each row
      for (let i = 1; i <= height; i++) {
          // Add spaces before stars
          let spaces = ' '.repeat(height - i);
          
          // Add stars for this row
          let stars = '*'.repeat(2 * i - 1);
          
          // Combine spaces and stars for this row
          pattern += spaces + stars + '\\n';
      }
      
      return pattern;
  }
  console.log(printPyramid(5));`
    },
    python: {
      name: "Python",
      extension: "py",
      monacoLanguage: "python",
      defaultCode: 
  `# Python Example
  def print_pyramid(height):
      pattern = ""
      
      # Loop through each row
      for i in range(1, height + 1):
          # Add spaces before stars
          spaces = " " * (height - i)
          
          # Add stars for this row
          stars = "*" * (2 * i - 1)
          
          # Combine spaces and stars for this row
          pattern += spaces + stars + "\\n"
      
      return pattern
  
  print(print_pyramid(5))`
    },
    java: {
      name: "Java",
      extension: "java",
      monacoLanguage: "java",
      defaultCode: 
  `// Java Example
  public class Main {
      public static void main(String[] args) {
          System.out.println(printPyramid(5));
      }
      
      public static String printPyramid(int height) {
          StringBuilder pattern = new StringBuilder();
          
          // Loop through each row
          for (int i = 1; i <= height; i++) {
              // Add spaces before stars
              for (int j = 0; j < height - i; j++) {
                  pattern.append(" ");
              }
              
              // Add stars for this row
              for (int j = 0; j < 2 * i - 1; j++) {
                  pattern.append("*");
              }
              
              pattern.append("\\n");
          }
          
          return pattern.toString();
      }
  }`
    },
    cpp: {
      name: "C++",
      extension: "cpp",
      monacoLanguage: "cpp",
      defaultCode: 
  `// C++ Example
  #include <iostream>
  #include <string>
  
  std::string printPyramid(int height) {
      std::string pattern = "";
      
      // Loop through each row
      for (int i = 1; i <= height; i++) {
          // Add spaces before stars
          for (int j = 0; j < height - i; j++) {
              pattern += " ";
          }
          
          // Add stars for this row
          for (int j = 0; j < 2 * i - 1; j++) {
              pattern += "*";
          }
          
          pattern += "\\n";
      }
      
      return pattern;
  }
  
  int main() {
      std::cout << printPyramid(5);
      return 0;
  }`
    },
    // Add more languages as needed
  };

================
File: src/lib/socket.ts
================
import { Socket } from "socket.io-client";
import type { DefaultEventsMap } from '@socket.io/component-emitter';
import { io } from "socket.io-client";

export const initSocket = async (): Promise<Socket<DefaultEventsMap, DefaultEventsMap>> => {
  const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || 'https://code-connect-server-production.up.railway.app';
  
  const options = {
    forceNew: true,
    reconnectionAttempts: Infinity,
    timeout: 10000,
    transports: ['websocket']
  };

  return new Promise((resolve, reject) => {
    try {
      const socket = io(SOCKET_URL, options);

      socket.on('connect', () => {
        console.log('Socket connected with ID:', socket.id);
        resolve(socket);
      });

      socket.on('connect_error', (err) => {
        console.error('Socket connection error:', err);
        reject(err);
      });

      // Set up reconnection handling
      socket.on('reconnect_attempt', () => {
        console.log('Attempting to reconnect...');
      });

      socket.on('reconnect', () => {
        console.log('Reconnected successfully');
      });

    } catch (err) {
      console.error('Socket initialization error:', err);
      reject(err);
    }
  });
};

================
File: src/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

================
File: src/providers/socketProvider.tsx
================
"use client";

import { useSearchParams } from 'next/navigation';
import { createContext, Suspense, useContext, useEffect, useState } from 'react';
import { io as ClientIO, Socket } from 'socket.io-client';

type SocketContextType = {
  socket: Socket | null;
  isConnected: boolean;
  lastError: Error | null;
};

const SocketContext = createContext<SocketContextType>({
  socket: null,
  isConnected: false,
  lastError: null
});

export const useSocket = () => {
  return useContext(SocketContext);
};

// Separate component to handle search params
const SocketProviderInner = ({ children }: { children: React.ReactNode }) => {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [lastError, setLastError] = useState<Error | null>(null);
  const searchParams = useSearchParams();
  const username = searchParams.get('username');

  useEffect(() => {
    const socketInstance = ClientIO(process.env.NEXT_PUBLIC_SOCKET_URL ?? 'https://code-connect-server-production.up.railway.app', {
      forceNew: true,
      reconnectionAttempts: 5,
      timeout: 10000,
      transports: ['websocket'],
      auth: {
        username
      }
    });

    const handleBeforeUnload = () => {
      const roomId = window.location.pathname.split('/').pop();
      if (socketInstance && roomId) {
        socketInstance.emit('leave', { roomId });
        socketInstance.disconnect();
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);

    // Connection event handlers
    socketInstance.on('connect', () => {
      console.log('Socket connected with ID:', socketInstance.id);
      setIsConnected(true);
      setLastError(null);
    });

    socketInstance.on('connect_error', (error) => {
      console.error('Socket connection error:', error);
      setLastError(error);
      setIsConnected(false);
    });

    socketInstance.on('disconnect', (reason) => {
      console.log('Socket disconnected:', reason);
      setIsConnected(false);
    });

    socketInstance.on('error', (error) => {
      console.error('Socket error:', error);
      setLastError(error);
    });

    setSocket(socketInstance);

    return () => {
      handleBeforeUnload();
      window.removeEventListener('beforeunload', handleBeforeUnload);
      if (socketInstance) {
        socketInstance.removeAllListeners();
        socketInstance.disconnect();
      }
    };
  }, [username]);

  return (
    <SocketContext.Provider value={{ socket, isConnected, lastError }}>
      {children}
    </SocketContext.Provider>
  );
};

// Main provider component with Suspense boundary
export const SocketProvider = ({ children }: { children: React.ReactNode }) => {
  return (
    <Suspense fallback={<div></div>}>
      <SocketProviderInner>{children}</SocketProviderInner>
    </Suspense>
  );
};

================
File: src/types/env.d.ts
================
// src/types/env.d.ts
declare namespace NodeJS {
    interface ProcessEnv {
      NEXT_PUBLIC_SOCKET_URL: string;
    }
  }

================
File: src/middleware.ts
================
import { authMiddleware } from "@clerk/nextjs";
 
export default authMiddleware({
  publicRoutes: [
    "/",
    "/sign-in(.*)",
    "/sign-up(.*)",
    "/sso-callback(.*)",
    "/api/webhooks(.*)"
  ],
  ignoredRoutes: [
    "/((?!api|trpc))(_next|.+..+)(.*)",
    "/api/webhooks(.*)"
  ],
  debug: true // Enable debug mode to see detailed logs
});
 
export const config = {
  matcher: ["/((?!.*\\..*|_next).*)", "/", "/(api|trpc)(.*)"],
};

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: next.config.mjs
================
import MonacoWebpackPlugin from 'monaco-editor-webpack-plugin';

/** @type {import('next').NextConfig} */
const nextConfig = {
  swcMinify: true,  // <--- Ensure minification is turned on
  webpack: (config, { isServer }) => {
    config.experiments = { ...config.experiments, topLevelAwait: true }
    if (!isServer) {
      config.plugins.push(
        new MonacoWebpackPlugin({
          languages: ['javascript', 'typescript', 'python', 'java', 'cpp'],
          filename: 'static/[name].worker.js',
          experimental: {
            optimizeCss: true
          }
        })
      );
    }
    return config;
  },
};

export default nextConfig;

================
File: next.config.ts
================
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  transpilePackages: ['three'],
  webpack: (config) => {
    config.module.rules.push({
      test: /\.(glsl|vs|fs|vert|frag)$/,
      exclude: /node_modules/,
      use: ['raw-loader'],
    })
    return config
  }
}

export default nextConfig

================
File: package.json
================
{
  "name": "code-connect-next",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "shadcn": "shadcn-ui"
  },
  "dependencies": {
    "@clerk/nextjs": "^4.29.7",
    "@codemirror/language": "^6.10.8",
    "@codemirror/state": "^6.5.1",
    "@codemirror/view": "^6.36.2",
    "@dicebear/collection": "^9.2.2",
    "@emoji-mart/data": "^1.2.1",
    "@emoji-mart/react": "^1.1.1",
    "@google/generative-ai": "^0.21.0",
    "@monaco-editor/react": "^4.6.0",
    "@next/font": "^14.2.15",
    "@radix-ui/react-accordion": "^1.2.2",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-dialog": "^1.1.5",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-select": "^2.1.5",
    "@radix-ui/react-slider": "^1.2.2",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-switch": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.7",
    "@react-three/drei": "^9.92.7",
    "@react-three/fiber": "^8.15.12",
    "@react-three/postprocessing": "^2.19.1",
    "@types/gsap": "^1.20.2",
    "@types/react-syntax-highlighter": "^15.5.13",
    "@types/three": "^0.173.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "codemirror": "^6.0.1",
    "framer-motion": "^12.4.7",
    "gsap": "^3.12.7",
    "lucide-react": "^0.474.0",
    "mini-svg-data-uri": "^1.4.4",
    "monaco-editor": "^0.52.2",
    "motion": "^12.4.7",
    "next": "15.1.6",
    "next-fonts": "^1.5.1",
    "next-themes": "^0.4.4",
    "openai": "^4.82.0",
    "raw-loader": "^4.0.2",
    "re-resizable": "^6.10.3",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hot-toast": "^2.5.1",
    "react-intersection-observer": "^9.15.1",
    "react-nice-avatar": "^1.5.0",
    "react-syntax-highlighter": "^15.6.1",
    "shadcn": "^2.3.0",
    "simplex-noise": "^4.0.3",
    "skeleton": "^0.1.2",
    "socket.io-client": "^4.8.1",
    "sonner": "^1.7.3",
    "tailwind-merge": "^2.6.0",
    "tailwind-variants": "^0.3.1",
    "tailwindcss-animate": "^1.0.7",
    "three": "^0.173.0",
    "three-stdlib": "^2.28.9",
    "uuid": "^11.0.5"
  },
  "devDependencies": {
    "@types/lodash": "^4.17.15",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "monaco-editor-webpack-plugin": "^7.1.0",
    "postcss": "^8",
    "shadcn-ui": "^0.9.4",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import { withTV } from "tailwind-variants/transformer"
import type { Config } from 'tailwindcss'
const svgToDataUri = require("mini-svg-data-uri");

const colors = require("tailwindcss/colors");
const {
  default: flattenColorPalette,
} = require("tailwindcss/lib/util/flattenColorPalette");

const config: Config = {
  darkMode: ["class", "class"],
  content: ["./pages/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}", "./app/**/*.{ts,tsx}", "./src/**/*.{ts,tsx}"],
  theme: {
  	container: {
  		center: true,
  		padding: '2rem',
  		screens: {
  			'2xl': '1400px'
  		}
  	},
  	extend: {
  		colors: {
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0px'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0px'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [
	require("tailwindcss-animate"),
	addVariablesForColors,
    function ({ matchUtilities, theme }: any) {
      matchUtilities(
        {
          "bg-grid": (value: any) => ({
            backgroundImage: `url("${svgToDataUri(
              `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="32" height="32" fill="none" stroke="${value}"><path d="M0 .5H31.5V32"/></svg>`
            )}")`,
          }),
          "bg-grid-small": (value: any) => ({
            backgroundImage: `url("${svgToDataUri(
              `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="8" height="8" fill="none" stroke="${value}"><path d="M0 .5H31.5V32"/></svg>`
            )}")`,
          }),
          "bg-dot": (value: any) => ({
            backgroundImage: `url("${svgToDataUri(
              `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="16" height="16" fill="none"><circle fill="${value}" id="pattern-circle" cx="10" cy="10" r="1.6257413380501518"></circle></svg>`
            )}")`,
          }),
        },
        { values: flattenColorPalette(theme("backgroundColor")), type: "color" }
      );
    },
  ],
}

export default withTV(config)

function addVariablesForColors({ addBase, theme }: any) {
	let allColors = flattenColorPalette(theme("colors"));
	let newVars = Object.fromEntries(
	  Object.entries(allColors).map(([key, val]) => [`--${key}`, val])
	);
   
	addBase({
	  ":root": newVars,
	});
  }

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "types": ["gsap"],
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "../cc-next-unusedComp/CodeViz.tsx", "../cc-next-unusedComp/MoveToTop.tsx", "../cc-next-unusedComp/ParticleField.tsx"],
  "exclude": ["node_modules"]
}
